
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097b  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000732  00000000  00000000  00000d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000403  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fc  00000000  00000000  00001ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	c0 00       	.word	0x00c0	; ????
  6a:	d4 00       	.word	0x00d4	; ????
  6c:	c2 00       	.word	0x00c2	; ????
  6e:	c4 00       	.word	0x00c4	; ????
  70:	c6 00       	.word	0x00c6	; ????
  72:	c8 00       	.word	0x00c8	; ????
  74:	ca 00       	.word	0x00ca	; ????
  76:	cc 00       	.word	0x00cc	; ????
  78:	ce 00       	.word	0x00ce	; ????
  7a:	d0 00       	.word	0x00d0	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ab 30       	cpi	r26, 0x0B	; 11
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  9c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <init_SevenSegment>:
}sev;

void init_SevenSegment()
{
	 
	sev.ddr      =& DDRD ;  sev.data_port =& PORTD ;
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	f1 e0       	ldi	r31, 0x01	; 1
  a8:	8a e2       	ldi	r24, 0x2A	; 42
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	91 83       	std	Z+1, r25	; 0x01
  ae:	80 83       	st	Z, r24
  b0:	8b e2       	ldi	r24, 0x2B	; 43
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	82 83       	std	Z+2, r24	; 0x02
	sev.ctrl_ddr =& DDRC ;  sev.s0 = 0x01  ; sev.s1 = 0x02;     
  b8:	87 e2       	ldi	r24, 0x27	; 39
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	95 83       	std	Z+5, r25	; 0x05
  be:	84 83       	std	Z+4, r24	; 0x04
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	86 83       	std	Z+6, r24	; 0x06
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	87 83       	std	Z+7, r24	; 0x07
	
	*(sev.ddr)       = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a b9       	out	0x0a, r24	; 10
    *(sev.data_port) = 0xff;
  cc:	8b b9       	out	0x0b, r24	; 11
	  sev.data=0;
  ce:	10 86       	std	Z+8, r1	; 0x08
	 *(sev.data_port) = 0xff;
  */
	// *(sev.ctrl_ddr) |= sev.s0 | sev.s1  ;
	 
	 //PORTC =0x03; 
	 PORTC = 0x08  ; 
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	88 b9       	out	0x08, r24	; 8
	 for (int i=0;i<8;i++)
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	15 c0       	rjmp	.+42     	; 0x104 <init_SevenSegment+0x60>
	 {
		 *(sev.data_port) =(1<<i);
  da:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  de:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	08 2e       	mov	r0, r24
  e6:	01 c0       	rjmp	.+2      	; 0xea <init_SevenSegment+0x46>
  e8:	22 0f       	add	r18, r18
  ea:	0a 94       	dec	r0
  ec:	ea f7       	brpl	.-6      	; 0xe8 <init_SevenSegment+0x44>
  ee:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	31 ee       	ldi	r19, 0xE1	; 225
  f4:	44 e0       	ldi	r20, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <init_SevenSegment+0x52>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_SevenSegment+0x5c>
 100:	00 00       	nop
  */
	// *(sev.ctrl_ddr) |= sev.s0 | sev.s1  ;
	 
	 //PORTC =0x03; 
	 PORTC = 0x08  ; 
	 for (int i=0;i<8;i++)
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	91 05       	cpc	r25, r1
 108:	44 f3       	brlt	.-48     	; 0xda <init_SevenSegment+0x36>
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	90 e7       	ldi	r25, 0x70	; 112
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <init_SevenSegment+0x6c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <init_SevenSegment+0x76>
 11a:	00 00       	nop
	 {
		 *(sev.data_port) =(1<<i);
		 _delay_ms(100);
	 }
	 _delay_ms(50);
	 PORTC = 0x00;
 11c:	18 b8       	out	0x08, r1	; 8
	 	 
	 PORTC = 0x04;  
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	88 b9       	out	0x08, r24	; 8
	 
	
	 for (int i=0;i<8;i++)
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	15 c0       	rjmp	.+42     	; 0x152 <init_SevenSegment+0xae>
	 {
		 *(sev.data_port) =(1<<i);
 128:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	08 2e       	mov	r0, r24
 134:	01 c0       	rjmp	.+2      	; 0x138 <init_SevenSegment+0x94>
 136:	22 0f       	add	r18, r18
 138:	0a 94       	dec	r0
 13a:	ea f7       	brpl	.-6      	; 0x136 <init_SevenSegment+0x92>
 13c:	20 83       	st	Z, r18
 13e:	3f ef       	ldi	r19, 0xFF	; 255
 140:	41 ee       	ldi	r20, 0xE1	; 225
 142:	24 e0       	ldi	r18, 0x04	; 4
 144:	31 50       	subi	r19, 0x01	; 1
 146:	40 40       	sbci	r20, 0x00	; 0
 148:	20 40       	sbci	r18, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <init_SevenSegment+0xa0>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <init_SevenSegment+0xaa>
 14e:	00 00       	nop
	 PORTC = 0x00;
	 	 
	 PORTC = 0x04;  
	 
	
	 for (int i=0;i<8;i++)
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	91 05       	cpc	r25, r1
 156:	44 f3       	brlt	.-48     	; 0x128 <init_SevenSegment+0x84>
 158:	3f ef       	ldi	r19, 0xFF	; 255
 15a:	40 e7       	ldi	r20, 0x70	; 112
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	31 50       	subi	r19, 0x01	; 1
 160:	40 40       	sbci	r20, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <init_SevenSegment+0xba>
 166:	00 c0       	rjmp	.+0      	; 0x168 <init_SevenSegment+0xc4>
 168:	00 00       	nop
		 *(sev.data_port) =(1<<i);
		 _delay_ms(100);
	 }
	// PORTC = 0x08;
     _delay_ms(50);
	 PORTC = 0x00;
 16a:	18 b8       	out	0x08, r1	; 8
 16c:	08 95       	ret

0000016e <evaluate>:
}

uint8_t evaluate(unsigned char x)
{
	uint8_t DATA_7SEG=0;
	switch(x)
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	91 05       	cpc	r25, r1
 174:	b8 f4       	brcc	.+46     	; 0x1a4 <evaluate+0x36>
 176:	fc 01       	movw	r30, r24
 178:	ec 5c       	subi	r30, 0xCC	; 204
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__tablejump2__>
	{
		case 0  : DATA_7SEG = 0x3f;     break;
 180:	8f e3       	ldi	r24, 0x3F	; 63
 182:	08 95       	ret
		case 1  : DATA_7SEG = 0x06;     break;
		case 2  : DATA_7SEG = 0x5b;     break;
 184:	8b e5       	ldi	r24, 0x5B	; 91
 186:	08 95       	ret
		case 3  : DATA_7SEG = 0x4f;     break;
 188:	8f e4       	ldi	r24, 0x4F	; 79
 18a:	08 95       	ret
		
		case 4  : DATA_7SEG = 0x66;     break;
 18c:	86 e6       	ldi	r24, 0x66	; 102
 18e:	08 95       	ret
		case 5  : DATA_7SEG = 0x6d;     break;
 190:	8d e6       	ldi	r24, 0x6D	; 109
 192:	08 95       	ret
		case 6  : DATA_7SEG = 0x7d;     break;
 194:	8d e7       	ldi	r24, 0x7D	; 125
 196:	08 95       	ret
		
		case 7  : DATA_7SEG = 0x07;     break;
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	08 95       	ret
		case 8  : DATA_7SEG = 0x7f;     break;
 19c:	8f e7       	ldi	r24, 0x7F	; 127
 19e:	08 95       	ret
		case 9  : DATA_7SEG = 0x6f;     break;
 1a0:	8f e6       	ldi	r24, 0x6F	; 111
 1a2:	08 95       	ret
		
		default :
		DATA_7SEG = 0xfc;     break;
 1a4:	8c ef       	ldi	r24, 0xFC	; 252
 1a6:	08 95       	ret
{
	uint8_t DATA_7SEG=0;
	switch(x)
	{
		case 0  : DATA_7SEG = 0x3f;     break;
		case 1  : DATA_7SEG = 0x06;     break;
 1a8:	86 e0       	ldi	r24, 0x06	; 6
		
	}
	
	return DATA_7SEG;
	
}
 1aa:	08 95       	ret

000001ac <main>:



int main() {
	
    DDRB  |= 0x20;DDRC =0x0c;
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	84 b9       	out	0x04, r24	; 4
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	87 b9       	out	0x07, r24	; 7
	PORTB =0x00;
 1b6:	15 b8       	out	0x05, r1	; 5
	PORTC =0x0c;
 1b8:	88 b9       	out	0x08, r24	; 8
	init_SevenSegment();
 1ba:	0e 94 52 00 	call	0xa4	; 0xa4 <init_SevenSegment>
	while (1)
	{
		for (int i=0;i<100;i++)
 1be:	c1 2c       	mov	r12, r1
 1c0:	d1 2c       	mov	r13, r1
 1c2:	3f c0       	rjmp	.+126    	; 0x242 <main+0x96>
		{
			for (int j=0;j<25;j++)
			{
			   PORTC = 0x08  ;
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	88 b9       	out	0x08, r24	; 8
			   *(sev.data_port) = evaluate(i%10);
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ef 2e       	mov	r14, r31
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	ff 2e       	mov	r15, r31
 1d2:	f0 2d       	mov	r31, r0
 1d4:	f7 01       	movw	r30, r14
 1d6:	a2 80       	ldd	r10, Z+2	; 0x02
 1d8:	b3 80       	ldd	r11, Z+3	; 0x03
 1da:	0a e0       	ldi	r16, 0x0A	; 10
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	c6 01       	movw	r24, r12
 1e0:	b8 01       	movw	r22, r16
 1e2:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 1e6:	0e 94 b7 00 	call	0x16e	; 0x16e <evaluate>
 1ea:	f5 01       	movw	r30, r10
 1ec:	80 83       	st	Z, r24
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	9c e7       	ldi	r25, 0x7C	; 124
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x46>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x4c>
 1f8:	00 00       	nop
			   _delay_ms(8);
			   PORTC = 0x00;
 1fa:	18 b8       	out	0x08, r1	; 8
				 
				 PORTC = 0x04;
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	88 b9       	out	0x08, r24	; 8
				 *(sev.data_port) =evaluate((i%100)/10);
 200:	f7 01       	movw	r30, r14
 202:	e2 80       	ldd	r14, Z+2	; 0x02
 204:	f3 80       	ldd	r15, Z+3	; 0x03
 206:	c6 01       	movw	r24, r12
 208:	64 e6       	ldi	r22, 0x64	; 100
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 210:	b8 01       	movw	r22, r16
 212:	0e 94 26 01 	call	0x24c	; 0x24c <__divmodhi4>
 216:	86 2f       	mov	r24, r22
 218:	0e 94 b7 00 	call	0x16e	; 0x16e <evaluate>
 21c:	f7 01       	movw	r30, r14
 21e:	80 83       	st	Z, r24
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	9c e7       	ldi	r25, 0x7C	; 124
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x78>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x7e>
 22a:	00 00       	nop
				 _delay_ms(8);
				 PORTC = 0x00;
 22c:	18 b8       	out	0x08, r1	; 8
	init_SevenSegment();
	while (1)
	{
		for (int i=0;i<100;i++)
		{
			for (int j=0;j<25;j++)
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0x8a>
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	c9 31       	cpi	r28, 0x19	; 25
 238:	d1 05       	cpc	r29, r1
 23a:	24 f2       	brlt	.-120    	; 0x1c4 <main+0x18>
	PORTB =0x00;
	PORTC =0x0c;
	init_SevenSegment();
	while (1)
	{
		for (int i=0;i<100;i++)
 23c:	9f ef       	ldi	r25, 0xFF	; 255
 23e:	c9 1a       	sub	r12, r25
 240:	d9 0a       	sbc	r13, r25
 242:	e4 e6       	ldi	r30, 0x64	; 100
 244:	ce 16       	cp	r12, r30
 246:	d1 04       	cpc	r13, r1
 248:	a4 f3       	brlt	.-24     	; 0x232 <main+0x86>
 24a:	b9 cf       	rjmp	.-142    	; 0x1be <main+0x12>

0000024c <__divmodhi4>:
 24c:	97 fb       	bst	r25, 7
 24e:	07 2e       	mov	r0, r23
 250:	16 f4       	brtc	.+4      	; 0x256 <__divmodhi4+0xa>
 252:	00 94       	com	r0
 254:	07 d0       	rcall	.+14     	; 0x264 <__divmodhi4_neg1>
 256:	77 fd       	sbrc	r23, 7
 258:	09 d0       	rcall	.+18     	; 0x26c <__divmodhi4_neg2>
 25a:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 25e:	07 fc       	sbrc	r0, 7
 260:	05 d0       	rcall	.+10     	; 0x26c <__divmodhi4_neg2>
 262:	3e f4       	brtc	.+14     	; 0x272 <__divmodhi4_exit>

00000264 <__divmodhi4_neg1>:
 264:	90 95       	com	r25
 266:	81 95       	neg	r24
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	08 95       	ret

0000026c <__divmodhi4_neg2>:
 26c:	70 95       	com	r23
 26e:	61 95       	neg	r22
 270:	7f 4f       	sbci	r23, 0xFF	; 255

00000272 <__divmodhi4_exit>:
 272:	08 95       	ret

00000274 <__tablejump2__>:
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	05 90       	lpm	r0, Z+
 27a:	f4 91       	lpm	r31, Z
 27c:	e0 2d       	mov	r30, r0
 27e:	09 94       	ijmp

00000280 <__udivmodhi4>:
 280:	aa 1b       	sub	r26, r26
 282:	bb 1b       	sub	r27, r27
 284:	51 e1       	ldi	r21, 0x11	; 17
 286:	07 c0       	rjmp	.+14     	; 0x296 <__udivmodhi4_ep>

00000288 <__udivmodhi4_loop>:
 288:	aa 1f       	adc	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	a6 17       	cp	r26, r22
 28e:	b7 07       	cpc	r27, r23
 290:	10 f0       	brcs	.+4      	; 0x296 <__udivmodhi4_ep>
 292:	a6 1b       	sub	r26, r22
 294:	b7 0b       	sbc	r27, r23

00000296 <__udivmodhi4_ep>:
 296:	88 1f       	adc	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	5a 95       	dec	r21
 29c:	a9 f7       	brne	.-22     	; 0x288 <__udivmodhi4_loop>
 29e:	80 95       	com	r24
 2a0:	90 95       	com	r25
 2a2:	bc 01       	movw	r22, r24
 2a4:	cd 01       	movw	r24, r26
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
