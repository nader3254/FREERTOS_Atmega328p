
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000446  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800176  00800176  00000550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ff6  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e3  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d3  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 37       	cpi	r26, 0x7A	; 122
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  9e:	0c 94 21 02 	jmp	0x442	; 0x442 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <out>:
#define D5 45
#define D6 46
#define D7 47
void out(uint8_t a,char b)
{
	for (int i=10;i<48;i++)
  a6:	2a e0       	ldi	r18, 0x0A	; 10
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	6a c0       	rjmp	.+212    	; 0x180 <out+0xda>
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a){uint8_t tmp =i-10;DDRA |=(1<<tmp);if (b=='h'||b=='H'){PORTA |=(1<<tmp);break;} else{PORTA &=~(1<<tmp);break;}}}
		if (i>=18&&i<28)//for port B
  ac:	a9 01       	movw	r20, r18
  ae:	f9 01       	movw	r30, r18
  b0:	72 97       	sbiw	r30, 0x12	; 18
  b2:	3a 97       	sbiw	r30, 0x0a	; 10
  b4:	f0 f4       	brcc	.+60     	; 0xf2 <out+0x4c>
		{if (i==a){uint8_t tmp =i-20;DDRB |=(1<<tmp);if (b=='h'||b=='H'){PORTB |=(1<<tmp);break;} else{PORTB &=~(1<<tmp);break;}}}
  b6:	e8 2f       	mov	r30, r24
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	2e 17       	cp	r18, r30
  bc:	3f 07       	cpc	r19, r31
  be:	c9 f4       	brne	.+50     	; 0xf2 <out+0x4c>
  c0:	24 51       	subi	r18, 0x14	; 20
  c2:	34 b1       	in	r19, 0x04	; 4
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <out+0x28>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	2a 95       	dec	r18
  d0:	e2 f7       	brpl	.-8      	; 0xca <out+0x24>
  d2:	23 2f       	mov	r18, r19
  d4:	28 2b       	or	r18, r24
  d6:	24 b9       	out	0x04, r18	; 4
  d8:	68 36       	cpi	r22, 0x68	; 104
  da:	11 f0       	breq	.+4      	; 0xe0 <out+0x3a>
  dc:	68 34       	cpi	r22, 0x48	; 72
  de:	21 f4       	brne	.+8      	; 0xe8 <out+0x42>
  e0:	95 b1       	in	r25, 0x05	; 5
  e2:	89 2b       	or	r24, r25
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	80 95       	com	r24
  ec:	89 23       	and	r24, r25
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	08 95       	ret
		if (i>=28&&i<38)//for port C
  f2:	fa 01       	movw	r30, r20
  f4:	7c 97       	sbiw	r30, 0x1c	; 28
  f6:	3a 97       	sbiw	r30, 0x0a	; 10
  f8:	f0 f4       	brcc	.+60     	; 0x136 <out+0x90>
		{if (i==a){uint8_t tmp =i-30;DDRC |=(1<<tmp);if (b=='h'||b=='H'){PORTC |=(1<<tmp);break;} else{PORTC &=~(1<<tmp);break;}}}
  fa:	e8 2f       	mov	r30, r24
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	2e 17       	cp	r18, r30
 100:	3f 07       	cpc	r19, r31
 102:	c9 f4       	brne	.+50     	; 0x136 <out+0x90>
 104:	2e 51       	subi	r18, 0x1E	; 30
 106:	37 b1       	in	r19, 0x07	; 7
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <out+0x6c>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	2a 95       	dec	r18
 114:	e2 f7       	brpl	.-8      	; 0x10e <out+0x68>
 116:	23 2f       	mov	r18, r19
 118:	28 2b       	or	r18, r24
 11a:	27 b9       	out	0x07, r18	; 7
 11c:	68 36       	cpi	r22, 0x68	; 104
 11e:	11 f0       	breq	.+4      	; 0x124 <out+0x7e>
 120:	68 34       	cpi	r22, 0x48	; 72
 122:	21 f4       	brne	.+8      	; 0x12c <out+0x86>
 124:	98 b1       	in	r25, 0x08	; 8
 126:	89 2b       	or	r24, r25
 128:	88 b9       	out	0x08, r24	; 8
 12a:	08 95       	ret
 12c:	98 b1       	in	r25, 0x08	; 8
 12e:	80 95       	com	r24
 130:	89 23       	and	r24, r25
 132:	88 b9       	out	0x08, r24	; 8
 134:	08 95       	ret
		if (i>=38&&i<48)//for port D
 136:	46 52       	subi	r20, 0x26	; 38
 138:	51 09       	sbc	r21, r1
 13a:	4a 30       	cpi	r20, 0x0A	; 10
 13c:	51 05       	cpc	r21, r1
 13e:	f0 f4       	brcc	.+60     	; 0x17c <out+0xd6>
		{if (i==a){uint8_t tmp =i-40;DDRD |=(1<<tmp);if (b=='h'||b=='H'){PORTD |=(1<<tmp);break;} else{PORTD &=~(1<<tmp);break;}}}
 140:	48 2f       	mov	r20, r24
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	24 17       	cp	r18, r20
 146:	35 07       	cpc	r19, r21
 148:	c9 f4       	brne	.+50     	; 0x17c <out+0xd6>
 14a:	28 52       	subi	r18, 0x28	; 40
 14c:	3a b1       	in	r19, 0x0a	; 10
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <out+0xb2>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	2a 95       	dec	r18
 15a:	e2 f7       	brpl	.-8      	; 0x154 <out+0xae>
 15c:	23 2f       	mov	r18, r19
 15e:	28 2b       	or	r18, r24
 160:	2a b9       	out	0x0a, r18	; 10
 162:	68 36       	cpi	r22, 0x68	; 104
 164:	11 f0       	breq	.+4      	; 0x16a <out+0xc4>
 166:	68 34       	cpi	r22, 0x48	; 72
 168:	21 f4       	brne	.+8      	; 0x172 <out+0xcc>
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	89 2b       	or	r24, r25
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	08 95       	ret
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	80 95       	com	r24
 176:	89 23       	and	r24, r25
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	08 95       	ret
#define D5 45
#define D6 46
#define D7 47
void out(uint8_t a,char b)
{
	for (int i=10;i<48;i++)
 17c:	2f 5f       	subi	r18, 0xFF	; 255
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	20 33       	cpi	r18, 0x30	; 48
 182:	31 05       	cpc	r19, r1
 184:	0c f4       	brge	.+2      	; 0x188 <out+0xe2>
 186:	92 cf       	rjmp	.-220    	; 0xac <out+0x6>
 188:	08 95       	ret

0000018a <prints>:

uint16_t o_ctr=0,h_ctr=0;


void prints( char * msg)
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	8c 01       	movw	r16, r24
	uint8_t i =0;
 192:	c0 e0       	ldi	r28, 0x00	; 0
	while(msg[i] != '\0')
 194:	04 c0       	rjmp	.+8      	; 0x19e <prints+0x14>
	{
		UATR_SEND(msg[i]);
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 1a 02 	call	0x434	; 0x434 <UATR_SEND>
		i++;
 19c:	cf 5f       	subi	r28, 0xFF	; 255


void prints( char * msg)
{
	uint8_t i =0;
	while(msg[i] != '\0')
 19e:	f8 01       	movw	r30, r16
 1a0:	ec 0f       	add	r30, r28
 1a2:	f1 1d       	adc	r31, r1
 1a4:	80 81       	ld	r24, Z
 1a6:	81 11       	cpse	r24, r1
 1a8:	f6 cf       	rjmp	.-20     	; 0x196 <prints+0xc>
	{
		UATR_SEND(msg[i]);
		i++;
	}
	
}
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <printi>:
void printi(uint8_t x)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	2a 97       	sbiw	r28, 0x0a	; 10
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
	char asci_num[]={'0','1','2','3','4','5','6','7','8','9'};
 1c8:	9a e0       	ldi	r25, 0x0A	; 10
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	de 01       	movw	r26, r28
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	01 90       	ld	r0, Z+
 1d4:	0d 92       	st	X+, r0
 1d6:	9a 95       	dec	r25
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <printi+0x20>
	uint8_t digit1=0,digit2=0;
	
	digit1 = x % 10;
 1da:	3d ec       	ldi	r19, 0xCD	; 205
 1dc:	83 9f       	mul	r24, r19
 1de:	91 2d       	mov	r25, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	96 95       	lsr	r25
 1e4:	96 95       	lsr	r25
 1e6:	96 95       	lsr	r25
 1e8:	99 0f       	add	r25, r25
 1ea:	29 2f       	mov	r18, r25
 1ec:	22 0f       	add	r18, r18
 1ee:	22 0f       	add	r18, r18
 1f0:	92 0f       	add	r25, r18
 1f2:	28 2f       	mov	r18, r24
 1f4:	29 1b       	sub	r18, r25
 1f6:	92 2f       	mov	r25, r18
	digit2 = (x %100) / 10;
 1f8:	29 e2       	ldi	r18, 0x29	; 41
 1fa:	82 9f       	mul	r24, r18
 1fc:	21 2d       	mov	r18, r1
 1fe:	11 24       	eor	r1, r1
 200:	22 95       	swap	r18
 202:	2f 70       	andi	r18, 0x0F	; 15
 204:	44 e6       	ldi	r20, 0x64	; 100
 206:	24 9f       	mul	r18, r20
 208:	80 19       	sub	r24, r0
 20a:	11 24       	eor	r1, r1
 20c:	83 9f       	mul	r24, r19
 20e:	81 2d       	mov	r24, r1
 210:	11 24       	eor	r1, r1
 212:	86 95       	lsr	r24
 214:	86 95       	lsr	r24
 216:	86 95       	lsr	r24
	
	char tmp[2] ;
	tmp[0] = asci_num[digit1];
 218:	e1 e0       	ldi	r30, 0x01	; 1
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ec 0f       	add	r30, r28
 21e:	fd 1f       	adc	r31, r29
 220:	e9 0f       	add	r30, r25
 222:	f1 1d       	adc	r31, r1
 224:	10 81       	ld	r17, Z
	tmp[1] = asci_num[digit2];
 226:	e1 e0       	ldi	r30, 0x01	; 1
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ec 0f       	add	r30, r28
 22c:	fd 1f       	adc	r31, r29
 22e:	e8 0f       	add	r30, r24
 230:	f1 1d       	adc	r31, r1
 232:	80 81       	ld	r24, Z
	
		
		UATR_SEND(tmp[1]);
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 1a 02 	call	0x434	; 0x434 <UATR_SEND>
		UATR_SEND(tmp[0]);
 23a:	81 2f       	mov	r24, r17
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 1a 02 	call	0x434	; 0x434 <UATR_SEND>
		
	
	
}
 242:	2a 96       	adiw	r28, 0x0a	; 10
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	08 95       	ret

00000256 <main>:

int main(void)
{
	
	 UART_init();
 256:	0e 94 0a 02 	call	0x414	; 0x414 <UART_init>
	 
	 
	 while(1)
	 {
		 
		 o_ctr++;
 25a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <o_ctr>
 25e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <o_ctr+0x1>
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <o_ctr+0x1>
 268:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <o_ctr>
		 prints("o is incremented ... \n");
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
		
		 prints("o = ");  printi(o_ctr);
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
 27c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <o_ctr>
 280:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <printi>
		 prints('\n') ;
 284:	8a e0       	ldi	r24, 0x0A	; 10
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
		 
		 if (water_condition)
 28c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 290:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	08 f4       	brcc	.+2      	; 0x29c <main+0x46>
 29a:	44 c0       	rjmp	.+136    	; 0x324 <main+0xce>
 29c:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <o_ctr>
 2a0:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <o_ctr+0x1>
 2a4:	21 15       	cp	r18, r1
 2a6:	31 05       	cpc	r19, r1
 2a8:	e9 f1       	breq	.+122    	; 0x324 <main+0xce>
		 {
			  o_ctr--; h_ctr-=2;
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	31 09       	sbc	r19, r1
 2ae:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <o_ctr+0x1>
 2b2:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <o_ctr>
 2b6:	02 97       	sbiw	r24, 0x02	; 2
 2b8:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 2bc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
			 prints("new water created .... \n");
 2c0:	81 e2       	ldi	r24, 0x21	; 33
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
			  prints(" h = ");  printi(h_ctr);
 2c8:	8a e3       	ldi	r24, 0x3A	; 58
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
 2d0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 2d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <printi>
			  // print('\n') ;
			  prints(" o = ");  printi(o_ctr);
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
 2e0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <o_ctr>
 2e4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <printi>
			  prints('\n') ;
 2e8:	8a e0       	ldi	r24, 0x0A	; 10
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
			
			 out(D4,'h');
 2f0:	68 e6       	ldi	r22, 0x68	; 104
 2f2:	8c e2       	ldi	r24, 0x2C	; 44
 2f4:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	89 e6       	ldi	r24, 0x69	; 105
 2fc:	98 e1       	ldi	r25, 0x18	; 24
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0xa8>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0xb2>
 308:	00 00       	nop
			 _delay_ms(500);
			 out(D4,'l');
 30a:	6c e6       	ldi	r22, 0x6C	; 108
 30c:	8c e2       	ldi	r24, 0x2C	; 44
 30e:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	89 e6       	ldi	r24, 0x69	; 105
 316:	98 e1       	ldi	r25, 0x18	; 24
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0xc2>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0xcc>
 322:	00 00       	nop
 324:	2f ef       	ldi	r18, 0xFF	; 255
 326:	8b e7       	ldi	r24, 0x7B	; 123
 328:	92 e9       	ldi	r25, 0x92	; 146
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0xd4>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0xde>
 334:	00 00       	nop
		 
		 /************************************************************************/
		 /*                                                                      */
		 /************************************************************************/
		 
		 	h_ctr++;
 336:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 33a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 344:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
		 	prints("h is incremented ... \n");
 348:	86 e4       	ldi	r24, 0x46	; 70
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
		 	prints("h = ");  printi(h_ctr);
 350:	8b e3       	ldi	r24, 0x3B	; 59
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
 358:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 35c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <printi>
		 	prints('\n') ;
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
		 	if (water_condition)
 368:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 36c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x1>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	91 05       	cpc	r25, r1
 374:	08 f4       	brcc	.+2      	; 0x378 <main+0x122>
 376:	44 c0       	rjmp	.+136    	; 0x400 <__EEPROM_REGION_LENGTH__>
 378:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <o_ctr>
 37c:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <o_ctr+0x1>
 380:	21 15       	cp	r18, r1
 382:	31 05       	cpc	r19, r1
 384:	e9 f1       	breq	.+122    	; 0x400 <__EEPROM_REGION_LENGTH__>
		 	{ 	o_ctr--; h_ctr-=2;
 386:	21 50       	subi	r18, 0x01	; 1
 388:	31 09       	sbc	r19, r1
 38a:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <o_ctr+0x1>
 38e:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <o_ctr>
 392:	02 97       	sbiw	r24, 0x02	; 2
 394:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__data_end+0x1>
 398:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
			 	prints("new water created ....\n");
 39c:	8d e5       	ldi	r24, 0x5D	; 93
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
				 prints(" h = ");  printi(h_ctr);
 3a4:	8a e3       	ldi	r24, 0x3A	; 58
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
 3ac:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 3b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <printi>
				// print('\n') ;
				 prints(" o = ");  printi(o_ctr);
 3b4:	80 e4       	ldi	r24, 0x40	; 64
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
 3bc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <o_ctr>
 3c0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <printi>
				 prints('\n') ;
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 c5 00 	call	0x18a	; 0x18a <prints>
			
			 	out(D4,'h');
 3cc:	68 e6       	ldi	r22, 0x68	; 104
 3ce:	8c e2       	ldi	r24, 0x2C	; 44
 3d0:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
 3d4:	2f ef       	ldi	r18, 0xFF	; 255
 3d6:	89 e6       	ldi	r24, 0x69	; 105
 3d8:	98 e1       	ldi	r25, 0x18	; 24
 3da:	21 50       	subi	r18, 0x01	; 1
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x184>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x18e>
 3e4:	00 00       	nop
			 	_delay_ms(500);
			 	out(D4,'l');
 3e6:	6c e6       	ldi	r22, 0x6C	; 108
 3e8:	8c e2       	ldi	r24, 0x2C	; 44
 3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	89 e6       	ldi	r24, 0x69	; 105
 3f2:	98 e1       	ldi	r25, 0x18	; 24
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x19e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x1a8>
 3fe:	00 00       	nop
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	83 ed       	ldi	r24, 0xD3	; 211
 404:	90 e3       	ldi	r25, 0x30	; 48
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	23 cf       	rjmp	.-442    	; 0x25a <main+0x4>

00000414 <UART_init>:


void UART_init()
{
	  uint16_t baud_config = 103;                             //for 16 MHZ => 115200 Baud Rate   
	  UCSR0C |= (1<<UCSZ01)   |  (1<<UCSZ00) ;               //data size 8 bit       
 414:	e2 ec       	ldi	r30, 0xC2	; 194
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	86 60       	ori	r24, 0x06	; 6
 41c:	80 83       	st	Z, r24
	  UBRR0L  = (uint8_t) baud_config;
 41e:	87 e6       	ldi	r24, 0x67	; 103
 420:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	  UBRR0H  = (uint8_t) (baud_config>>8);
 424:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	  UCSR0B |= (1<<TXEN0) |  (1<<RXEN0) ;	
 428:	e1 ec       	ldi	r30, 0xC1	; 193
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	88 61       	ori	r24, 0x18	; 24
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <UATR_SEND>:
void UATR_SEND(char x )
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
 434:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 438:	95 ff       	sbrs	r25, 5
 43a:	fc cf       	rjmp	.-8      	; 0x434 <UATR_SEND>
	UDR0 = x;
 43c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
