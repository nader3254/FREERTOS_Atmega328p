
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001af8  00001b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000647  0080014e  0080014e  00001bda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000495c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e1  00000000  00000000  00006960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c22  00000000  00000000  00007b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  0000a764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001582  00000000  00000000  0000b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004973  00000000  00000000  0000c872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  000111e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ef       	ldi	r30, 0xF8	; 248
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 34       	cpi	r26, 0x4E	; 78
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	ae e4       	ldi	r26, 0x4E	; 78
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 39       	cpi	r26, 0x95	; 149
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <main>
      9e:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <out>:
		if (i>=28&&i<38)//for port C
		{if (i==a1){uint8_t tmp =i-30;DDRC &=~(1<<tmp);PORTC |=(1<<tmp);}}
		if (i>=38&&i<48)//for port D
		{if (i==a1){uint8_t tmp =i-40;DDRD &=~(1<<tmp);PORTD |=(1<<tmp);}}
	}
}
      a6:	2a e0       	ldi	r18, 0x0A	; 10
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	6a c0       	rjmp	.+212    	; 0x180 <out+0xda>
      ac:	a9 01       	movw	r20, r18
      ae:	f9 01       	movw	r30, r18
      b0:	72 97       	sbiw	r30, 0x12	; 18
      b2:	3a 97       	sbiw	r30, 0x0a	; 10
      b4:	f0 f4       	brcc	.+60     	; 0xf2 <out+0x4c>
      b6:	e8 2f       	mov	r30, r24
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	2e 17       	cp	r18, r30
      bc:	3f 07       	cpc	r19, r31
      be:	c9 f4       	brne	.+50     	; 0xf2 <out+0x4c>
      c0:	24 51       	subi	r18, 0x14	; 20
      c2:	34 b1       	in	r19, 0x04	; 4
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	02 c0       	rjmp	.+4      	; 0xce <out+0x28>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	2a 95       	dec	r18
      d0:	e2 f7       	brpl	.-8      	; 0xca <out+0x24>
      d2:	23 2f       	mov	r18, r19
      d4:	28 2b       	or	r18, r24
      d6:	24 b9       	out	0x04, r18	; 4
      d8:	68 36       	cpi	r22, 0x68	; 104
      da:	11 f0       	breq	.+4      	; 0xe0 <out+0x3a>
      dc:	68 34       	cpi	r22, 0x48	; 72
      de:	21 f4       	brne	.+8      	; 0xe8 <out+0x42>
      e0:	95 b1       	in	r25, 0x05	; 5
      e2:	89 2b       	or	r24, r25
      e4:	85 b9       	out	0x05, r24	; 5
      e6:	08 95       	ret
      e8:	95 b1       	in	r25, 0x05	; 5
      ea:	80 95       	com	r24
      ec:	89 23       	and	r24, r25
      ee:	85 b9       	out	0x05, r24	; 5
      f0:	08 95       	ret
      f2:	fa 01       	movw	r30, r20
      f4:	7c 97       	sbiw	r30, 0x1c	; 28
      f6:	3a 97       	sbiw	r30, 0x0a	; 10
      f8:	f0 f4       	brcc	.+60     	; 0x136 <out+0x90>
      fa:	e8 2f       	mov	r30, r24
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	2e 17       	cp	r18, r30
     100:	3f 07       	cpc	r19, r31
     102:	c9 f4       	brne	.+50     	; 0x136 <out+0x90>
     104:	2e 51       	subi	r18, 0x1E	; 30
     106:	37 b1       	in	r19, 0x07	; 7
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	02 c0       	rjmp	.+4      	; 0x112 <out+0x6c>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	2a 95       	dec	r18
     114:	e2 f7       	brpl	.-8      	; 0x10e <out+0x68>
     116:	23 2f       	mov	r18, r19
     118:	28 2b       	or	r18, r24
     11a:	27 b9       	out	0x07, r18	; 7
     11c:	68 36       	cpi	r22, 0x68	; 104
     11e:	11 f0       	breq	.+4      	; 0x124 <out+0x7e>
     120:	68 34       	cpi	r22, 0x48	; 72
     122:	21 f4       	brne	.+8      	; 0x12c <out+0x86>
     124:	98 b1       	in	r25, 0x08	; 8
     126:	89 2b       	or	r24, r25
     128:	88 b9       	out	0x08, r24	; 8
     12a:	08 95       	ret
     12c:	98 b1       	in	r25, 0x08	; 8
     12e:	80 95       	com	r24
     130:	89 23       	and	r24, r25
     132:	88 b9       	out	0x08, r24	; 8
     134:	08 95       	ret
     136:	46 52       	subi	r20, 0x26	; 38
     138:	51 09       	sbc	r21, r1
     13a:	4a 30       	cpi	r20, 0x0A	; 10
     13c:	51 05       	cpc	r21, r1
     13e:	f0 f4       	brcc	.+60     	; 0x17c <out+0xd6>
     140:	48 2f       	mov	r20, r24
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	24 17       	cp	r18, r20
     146:	35 07       	cpc	r19, r21
     148:	c9 f4       	brne	.+50     	; 0x17c <out+0xd6>
     14a:	28 52       	subi	r18, 0x28	; 40
     14c:	3a b1       	in	r19, 0x0a	; 10
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <out+0xb2>
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	2a 95       	dec	r18
     15a:	e2 f7       	brpl	.-8      	; 0x154 <out+0xae>
     15c:	23 2f       	mov	r18, r19
     15e:	28 2b       	or	r18, r24
     160:	2a b9       	out	0x0a, r18	; 10
     162:	68 36       	cpi	r22, 0x68	; 104
     164:	11 f0       	breq	.+4      	; 0x16a <out+0xc4>
     166:	68 34       	cpi	r22, 0x48	; 72
     168:	21 f4       	brne	.+8      	; 0x172 <out+0xcc>
     16a:	9b b1       	in	r25, 0x0b	; 11
     16c:	89 2b       	or	r24, r25
     16e:	8b b9       	out	0x0b, r24	; 11
     170:	08 95       	ret
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	80 95       	com	r24
     176:	89 23       	and	r24, r25
     178:	8b b9       	out	0x0b, r24	; 11
     17a:	08 95       	ret
     17c:	2f 5f       	subi	r18, 0xFF	; 255
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	20 33       	cpi	r18, 0x30	; 48
     182:	31 05       	cpc	r19, r1
     184:	0c f4       	brge	.+2      	; 0x188 <out+0xe2>
     186:	92 cf       	rjmp	.-220    	; 0xac <out+0x6>
     188:	08 95       	ret

0000018a <inp>:
     18a:	2a e0       	ldi	r18, 0x0A	; 10
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	4a c0       	rjmp	.+148    	; 0x224 <inp+0x9a>
     190:	a9 01       	movw	r20, r18
     192:	b9 01       	movw	r22, r18
     194:	62 51       	subi	r22, 0x12	; 18
     196:	71 09       	sbc	r23, r1
     198:	6a 30       	cpi	r22, 0x0A	; 10
     19a:	71 05       	cpc	r23, r1
     19c:	90 f4       	brcc	.+36     	; 0x1c2 <inp+0x38>
     19e:	68 2f       	mov	r22, r24
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	26 17       	cp	r18, r22
     1a4:	37 07       	cpc	r19, r23
     1a6:	69 f4       	brne	.+26     	; 0x1c2 <inp+0x38>
     1a8:	ec ee       	ldi	r30, 0xEC	; 236
     1aa:	e2 0f       	add	r30, r18
     1ac:	94 b1       	in	r25, 0x04	; 4
     1ae:	61 e0       	ldi	r22, 0x01	; 1
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <inp+0x2e>
     1b4:	66 0f       	add	r22, r22
     1b6:	77 1f       	adc	r23, r23
     1b8:	ea 95       	dec	r30
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <inp+0x2a>
     1bc:	60 95       	com	r22
     1be:	69 23       	and	r22, r25
     1c0:	64 b9       	out	0x04, r22	; 4
     1c2:	ba 01       	movw	r22, r20
     1c4:	6c 51       	subi	r22, 0x1C	; 28
     1c6:	71 09       	sbc	r23, r1
     1c8:	6a 30       	cpi	r22, 0x0A	; 10
     1ca:	71 05       	cpc	r23, r1
     1cc:	90 f4       	brcc	.+36     	; 0x1f2 <inp+0x68>
     1ce:	68 2f       	mov	r22, r24
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	26 17       	cp	r18, r22
     1d4:	37 07       	cpc	r19, r23
     1d6:	69 f4       	brne	.+26     	; 0x1f2 <inp+0x68>
     1d8:	e2 ee       	ldi	r30, 0xE2	; 226
     1da:	e2 0f       	add	r30, r18
     1dc:	97 b1       	in	r25, 0x07	; 7
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <inp+0x5e>
     1e4:	66 0f       	add	r22, r22
     1e6:	77 1f       	adc	r23, r23
     1e8:	ea 95       	dec	r30
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <inp+0x5a>
     1ec:	60 95       	com	r22
     1ee:	69 23       	and	r22, r25
     1f0:	67 b9       	out	0x07, r22	; 7
     1f2:	46 52       	subi	r20, 0x26	; 38
     1f4:	51 09       	sbc	r21, r1
     1f6:	4a 30       	cpi	r20, 0x0A	; 10
     1f8:	51 05       	cpc	r21, r1
     1fa:	90 f4       	brcc	.+36     	; 0x220 <inp+0x96>
     1fc:	48 2f       	mov	r20, r24
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	24 17       	cp	r18, r20
     202:	35 07       	cpc	r19, r21
     204:	69 f4       	brne	.+26     	; 0x220 <inp+0x96>
     206:	68 ed       	ldi	r22, 0xD8	; 216
     208:	62 0f       	add	r22, r18
     20a:	9a b1       	in	r25, 0x0a	; 10
     20c:	41 e0       	ldi	r20, 0x01	; 1
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <inp+0x8c>
     212:	44 0f       	add	r20, r20
     214:	55 1f       	adc	r21, r21
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <inp+0x88>
     21a:	40 95       	com	r20
     21c:	49 23       	and	r20, r25
     21e:	4a b9       	out	0x0a, r20	; 10
     220:	2f 5f       	subi	r18, 0xFF	; 255
     222:	3f 4f       	sbci	r19, 0xFF	; 255
     224:	20 33       	cpi	r18, 0x30	; 48
     226:	31 05       	cpc	r19, r1
     228:	0c f4       	brge	.+2      	; 0x22c <inp+0xa2>
     22a:	b2 cf       	rjmp	.-156    	; 0x190 <inp+0x6>
     22c:	08 95       	ret

0000022e <read>:
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
     22e:	2a e0       	ldi	r18, 0x0A	; 10
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	54 c0       	rjmp	.+168    	; 0x2dc <read+0xae>
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a2){uint8_t tmp =i-10;if ((PINA & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=18&&i<28)//for port B
     234:	a9 01       	movw	r20, r18
     236:	b9 01       	movw	r22, r18
     238:	62 51       	subi	r22, 0x12	; 18
     23a:	71 09       	sbc	r23, r1
     23c:	6a 30       	cpi	r22, 0x0A	; 10
     23e:	71 05       	cpc	r23, r1
     240:	a0 f4       	brcc	.+40     	; 0x26a <read+0x3c>
		{if (i==a2){uint8_t tmp =i-20;if ((PINB & (1<<tmp))){return 1;} else{return 0;}}}
     242:	68 2f       	mov	r22, r24
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	26 17       	cp	r18, r22
     248:	37 07       	cpc	r19, r23
     24a:	79 f4       	brne	.+30     	; 0x26a <read+0x3c>
     24c:	24 51       	subi	r18, 0x14	; 20
     24e:	83 b1       	in	r24, 0x03	; 3
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	ac 01       	movw	r20, r24
     254:	02 c0       	rjmp	.+4      	; 0x25a <read+0x2c>
     256:	55 95       	asr	r21
     258:	47 95       	ror	r20
     25a:	2a 95       	dec	r18
     25c:	e2 f7       	brpl	.-8      	; 0x256 <read+0x28>
     25e:	ca 01       	movw	r24, r20
     260:	81 70       	andi	r24, 0x01	; 1
     262:	99 27       	eor	r25, r25
     264:	40 fd       	sbrc	r20, 0
     266:	3f c0       	rjmp	.+126    	; 0x2e6 <read+0xb8>
     268:	08 95       	ret
		if (i>=28&&i<38)//for port C
     26a:	ba 01       	movw	r22, r20
     26c:	6c 51       	subi	r22, 0x1C	; 28
     26e:	71 09       	sbc	r23, r1
     270:	6a 30       	cpi	r22, 0x0A	; 10
     272:	71 05       	cpc	r23, r1
     274:	b0 f4       	brcc	.+44     	; 0x2a2 <read+0x74>
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
     276:	68 2f       	mov	r22, r24
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	26 17       	cp	r18, r22
     27c:	37 07       	cpc	r19, r23
     27e:	89 f4       	brne	.+34     	; 0x2a2 <read+0x74>
     280:	2e 51       	subi	r18, 0x1E	; 30
     282:	86 b1       	in	r24, 0x06	; 6
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <read+0x60>
     28a:	55 95       	asr	r21
     28c:	47 95       	ror	r20
     28e:	2a 95       	dec	r18
     290:	e2 f7       	brpl	.-8      	; 0x28a <read+0x5c>
     292:	ca 01       	movw	r24, r20
     294:	81 70       	andi	r24, 0x01	; 1
     296:	99 27       	eor	r25, r25
     298:	40 ff       	sbrs	r20, 0
     29a:	27 c0       	rjmp	.+78     	; 0x2ea <read+0xbc>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	08 95       	ret
		if (i>=38&&i<48)//for port D
     2a2:	46 52       	subi	r20, 0x26	; 38
     2a4:	51 09       	sbc	r21, r1
     2a6:	4a 30       	cpi	r20, 0x0A	; 10
     2a8:	51 05       	cpc	r21, r1
     2aa:	b0 f4       	brcc	.+44     	; 0x2d8 <read+0xaa>
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
     2ac:	48 2f       	mov	r20, r24
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	24 17       	cp	r18, r20
     2b2:	35 07       	cpc	r19, r21
     2b4:	89 f4       	brne	.+34     	; 0x2d8 <read+0xaa>
     2b6:	28 52       	subi	r18, 0x28	; 40
     2b8:	89 b1       	in	r24, 0x09	; 9
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	ac 01       	movw	r20, r24
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <read+0x96>
     2c0:	55 95       	asr	r21
     2c2:	47 95       	ror	r20
     2c4:	2a 95       	dec	r18
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <read+0x92>
     2c8:	ca 01       	movw	r24, r20
     2ca:	81 70       	andi	r24, 0x01	; 1
     2cc:	99 27       	eor	r25, r25
     2ce:	40 ff       	sbrs	r20, 0
     2d0:	0c c0       	rjmp	.+24     	; 0x2ea <read+0xbc>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret
		{if (i==a1){uint8_t tmp =i-40;DDRD &=~(1<<tmp);PORTD |=(1<<tmp);}}
	}
}
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
     2d8:	2f 5f       	subi	r18, 0xFF	; 255
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	20 33       	cpi	r18, 0x30	; 48
     2de:	31 05       	cpc	r19, r1
     2e0:	0c f4       	brge	.+2      	; 0x2e4 <read+0xb6>
     2e2:	a8 cf       	rjmp	.-176    	; 0x234 <read+0x6>
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
     2e4:	08 95       	ret
	for (int i=10;i<48;i++)
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a2){uint8_t tmp =i-10;if ((PINA & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=18&&i<28)//for port B
		{if (i==a2){uint8_t tmp =i-20;if ((PINB & (1<<tmp))){return 1;} else{return 0;}}}
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
     2ea:	08 95       	ret

000002ec <UART_init>:


void UART_init()
{
	  uint16_t baud_config = 103;                             //for 16 MHZ => 115200 Baud Rate   
	  UCSR0C |= (1<<UCSZ01)   |  (1<<UCSZ00) ;               //data size 8 bit       
     2ec:	e2 ec       	ldi	r30, 0xC2	; 194
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	86 60       	ori	r24, 0x06	; 6
     2f4:	80 83       	st	Z, r24
	  UBRR0L  = (uint8_t) baud_config;
     2f6:	87 e6       	ldi	r24, 0x67	; 103
     2f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	  UBRR0H  = (uint8_t) (baud_config>>8);
     2fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	  UCSR0B |= (1<<TXEN0) |  (1<<RXEN0) ;	
     300:	e1 ec       	ldi	r30, 0xC1	; 193
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	88 61       	ori	r24, 0x18	; 24
     308:	80 83       	st	Z, r24
     30a:	08 95       	ret

0000030c <UATR_SEND>:
void UATR_SEND(char x )
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
     30c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     310:	95 ff       	sbrs	r25, 5
     312:	fc cf       	rjmp	.-8      	; 0x30c <UATR_SEND>
	UDR0 = x;
     314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     318:	08 95       	ret

0000031a <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     31a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     31e:	8c e7       	ldi	r24, 0x7C	; 124
     320:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     324:	8b e0       	ldi	r24, 0x0B	; 11
     326:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     32a:	ef e6       	ldi	r30, 0x6F	; 111
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	82 60       	ori	r24, 0x02	; 2
     332:	80 83       	st	Z, r24
     334:	08 95       	ret

00000336 <pxPortInitialiseStack>:
     336:	31 e1       	ldi	r19, 0x11	; 17
     338:	fc 01       	movw	r30, r24
     33a:	30 83       	st	Z, r19
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	22 e2       	ldi	r18, 0x22	; 34
     340:	20 83       	st	Z, r18
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	a3 e3       	ldi	r26, 0x33	; 51
     346:	a0 83       	st	Z, r26
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	60 83       	st	Z, r22
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	70 83       	st	Z, r23
     350:	31 97       	sbiw	r30, 0x01	; 1
     352:	10 82       	st	Z, r1
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	60 e8       	ldi	r22, 0x80	; 128
     358:	60 83       	st	Z, r22
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	10 82       	st	Z, r1
     35e:	31 97       	sbiw	r30, 0x01	; 1
     360:	62 e0       	ldi	r22, 0x02	; 2
     362:	60 83       	st	Z, r22
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	63 e0       	ldi	r22, 0x03	; 3
     368:	60 83       	st	Z, r22
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	64 e0       	ldi	r22, 0x04	; 4
     36e:	60 83       	st	Z, r22
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	65 e0       	ldi	r22, 0x05	; 5
     374:	60 83       	st	Z, r22
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	66 e0       	ldi	r22, 0x06	; 6
     37a:	60 83       	st	Z, r22
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	67 e0       	ldi	r22, 0x07	; 7
     380:	60 83       	st	Z, r22
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	68 e0       	ldi	r22, 0x08	; 8
     386:	60 83       	st	Z, r22
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	69 e0       	ldi	r22, 0x09	; 9
     38c:	60 83       	st	Z, r22
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	60 e1       	ldi	r22, 0x10	; 16
     392:	60 83       	st	Z, r22
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	30 83       	st	Z, r19
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	32 e1       	ldi	r19, 0x12	; 18
     39c:	30 83       	st	Z, r19
     39e:	31 97       	sbiw	r30, 0x01	; 1
     3a0:	33 e1       	ldi	r19, 0x13	; 19
     3a2:	30 83       	st	Z, r19
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	34 e1       	ldi	r19, 0x14	; 20
     3a8:	30 83       	st	Z, r19
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	35 e1       	ldi	r19, 0x15	; 21
     3ae:	30 83       	st	Z, r19
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	36 e1       	ldi	r19, 0x16	; 22
     3b4:	30 83       	st	Z, r19
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	37 e1       	ldi	r19, 0x17	; 23
     3ba:	30 83       	st	Z, r19
     3bc:	31 97       	sbiw	r30, 0x01	; 1
     3be:	38 e1       	ldi	r19, 0x18	; 24
     3c0:	30 83       	st	Z, r19
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	39 e1       	ldi	r19, 0x19	; 25
     3c6:	30 83       	st	Z, r19
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	30 e2       	ldi	r19, 0x20	; 32
     3cc:	30 83       	st	Z, r19
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	31 e2       	ldi	r19, 0x21	; 33
     3d2:	30 83       	st	Z, r19
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	20 83       	st	Z, r18
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	23 e2       	ldi	r18, 0x23	; 35
     3dc:	20 83       	st	Z, r18
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	40 83       	st	Z, r20
     3e2:	31 97       	sbiw	r30, 0x01	; 1
     3e4:	50 83       	st	Z, r21
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	26 e2       	ldi	r18, 0x26	; 38
     3ea:	20 83       	st	Z, r18
     3ec:	31 97       	sbiw	r30, 0x01	; 1
     3ee:	27 e2       	ldi	r18, 0x27	; 39
     3f0:	20 83       	st	Z, r18
     3f2:	31 97       	sbiw	r30, 0x01	; 1
     3f4:	28 e2       	ldi	r18, 0x28	; 40
     3f6:	20 83       	st	Z, r18
     3f8:	31 97       	sbiw	r30, 0x01	; 1
     3fa:	29 e2       	ldi	r18, 0x29	; 41
     3fc:	20 83       	st	Z, r18
     3fe:	31 97       	sbiw	r30, 0x01	; 1
     400:	20 e3       	ldi	r18, 0x30	; 48
     402:	20 83       	st	Z, r18
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	21 e3       	ldi	r18, 0x31	; 49
     408:	20 83       	st	Z, r18
     40a:	86 97       	sbiw	r24, 0x26	; 38
     40c:	08 95       	ret

0000040e <xPortStartScheduler>:
     40e:	0e 94 8d 01 	call	0x31a	; 0x31a <prvSetupTimerInterrupt>
     412:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <pxCurrentTCB>
     416:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     41a:	cd 91       	ld	r28, X+
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	dd 91       	ld	r29, X+
     420:	de bf       	out	0x3e, r29	; 62
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	bf 91       	pop	r27
     42c:	af 91       	pop	r26
     42e:	9f 91       	pop	r25
     430:	8f 91       	pop	r24
     432:	7f 91       	pop	r23
     434:	6f 91       	pop	r22
     436:	5f 91       	pop	r21
     438:	4f 91       	pop	r20
     43a:	3f 91       	pop	r19
     43c:	2f 91       	pop	r18
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	bf 90       	pop	r11
     44c:	af 90       	pop	r10
     44e:	9f 90       	pop	r9
     450:	8f 90       	pop	r8
     452:	7f 90       	pop	r7
     454:	6f 90       	pop	r6
     456:	5f 90       	pop	r5
     458:	4f 90       	pop	r4
     45a:	3f 90       	pop	r3
     45c:	2f 90       	pop	r2
     45e:	1f 90       	pop	r1
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	08 95       	ret
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret

0000046c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	0f 92       	push	r0
     474:	1f 92       	push	r1
     476:	11 24       	eor	r1, r1
     478:	2f 92       	push	r2
     47a:	3f 92       	push	r3
     47c:	4f 92       	push	r4
     47e:	5f 92       	push	r5
     480:	6f 92       	push	r6
     482:	7f 92       	push	r7
     484:	8f 92       	push	r8
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
     4b4:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <pxCurrentTCB>
     4b8:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     4bc:	0d b6       	in	r0, 0x3d	; 61
     4be:	0d 92       	st	X+, r0
     4c0:	0e b6       	in	r0, 0x3e	; 62
     4c2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     4c4:	0e 94 01 0b 	call	0x1602	; 0x1602 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     4c8:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <pxCurrentTCB>
     4cc:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     4d0:	cd 91       	ld	r28, X+
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	dd 91       	ld	r29, X+
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	bf 90       	pop	r11
     502:	af 90       	pop	r10
     504:	9f 90       	pop	r9
     506:	8f 90       	pop	r8
     508:	7f 90       	pop	r7
     50a:	6f 90       	pop	r6
     50c:	5f 90       	pop	r5
     50e:	4f 90       	pop	r4
     510:	3f 90       	pop	r3
     512:	2f 90       	pop	r2
     514:	1f 90       	pop	r1
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     51c:	08 95       	ret

0000051e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	0f 92       	push	r0
     526:	1f 92       	push	r1
     528:	11 24       	eor	r1, r1
     52a:	2f 92       	push	r2
     52c:	3f 92       	push	r3
     52e:	4f 92       	push	r4
     530:	5f 92       	push	r5
     532:	6f 92       	push	r6
     534:	7f 92       	push	r7
     536:	8f 92       	push	r8
     538:	9f 92       	push	r9
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
     566:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <pxCurrentTCB>
     56a:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     56e:	0d b6       	in	r0, 0x3d	; 61
     570:	0d 92       	st	X+, r0
     572:	0e b6       	in	r0, 0x3e	; 62
     574:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     576:	0e 94 12 09 	call	0x1224	; 0x1224 <xTaskIncrementTick>
     57a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     57c:	0e 94 01 0b 	call	0x1602	; 0x1602 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     580:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <pxCurrentTCB>
     584:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     588:	cd 91       	ld	r28, X+
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	dd 91       	ld	r29, X+
     58e:	de bf       	out	0x3e, r29	; 62
     590:	ff 91       	pop	r31
     592:	ef 91       	pop	r30
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	bf 91       	pop	r27
     59a:	af 91       	pop	r26
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	7f 91       	pop	r23
     5a2:	6f 91       	pop	r22
     5a4:	5f 91       	pop	r21
     5a6:	4f 91       	pop	r20
     5a8:	3f 91       	pop	r19
     5aa:	2f 91       	pop	r18
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	bf 90       	pop	r11
     5ba:	af 90       	pop	r10
     5bc:	9f 90       	pop	r9
     5be:	8f 90       	pop	r8
     5c0:	7f 90       	pop	r7
     5c2:	6f 90       	pop	r6
     5c4:	5f 90       	pop	r5
     5c6:	4f 90       	pop	r4
     5c8:	3f 90       	pop	r3
     5ca:	2f 90       	pop	r2
     5cc:	1f 90       	pop	r1
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5d4:	08 95       	ret

000005d6 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     5d6:	0e 94 8f 02 	call	0x51e	; 0x51e <vPortYieldFromTick>
		asm volatile ( "reti" );
     5da:	18 95       	reti

000005dc <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5dc:	a3 e5       	ldi	r26, 0x53	; 83
     5de:	b1 e0       	ldi	r27, 0x01	; 1
     5e0:	e7 e5       	ldi	r30, 0x57	; 87
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	fc 93       	st	X, r31
     5e8:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	1c 92       	st	X, r1
     5ee:	1e 92       	st	-X, r1
     5f0:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     5f2:	af e4       	ldi	r26, 0x4F	; 79
     5f4:	b1 e0       	ldi	r27, 0x01	; 1
     5f6:	8b ed       	ldi	r24, 0xDB	; 219
     5f8:	95 e0       	ldi	r25, 0x05	; 5
     5fa:	13 96       	adiw	r26, 0x03	; 3
     5fc:	9c 93       	st	X, r25
     5fe:	8e 93       	st	-X, r24
     600:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     602:	11 96       	adiw	r26, 0x01	; 1
     604:	1c 92       	st	X, r1
     606:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     608:	93 83       	std	Z+3, r25	; 0x03
     60a:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     60c:	b1 83       	std	Z+1, r27	; 0x01
     60e:	a0 83       	st	Z, r26
     610:	08 95       	ret

00000612 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     620:	0e 94 0c 09 	call	0x1218	; 0x1218 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     624:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
     628:	81 11       	cpse	r24, r1
     62a:	05 c0       	rjmp	.+10     	; 0x636 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     62c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     636:	20 97       	sbiw	r28, 0x00	; 0
     638:	71 f0       	breq	.+28     	; 0x656 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     63a:	ce 01       	movw	r24, r28
     63c:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     63e:	c8 17       	cp	r28, r24
     640:	d9 07       	cpc	r29, r25
     642:	38 f4       	brcc	.+14     	; 0x652 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     644:	25 96       	adiw	r28, 0x05	; 5
     646:	8c 17       	cp	r24, r28
     648:	9d 07       	cpc	r25, r29
     64a:	28 f0       	brcs	.+10     	; 0x656 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     64c:	c0 e0       	ldi	r28, 0x00	; 0
     64e:	d0 e0       	ldi	r29, 0x00	; 0
     650:	02 c0       	rjmp	.+4      	; 0x656 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     652:	c0 e0       	ldi	r28, 0x00	; 0
     654:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     656:	20 97       	sbiw	r28, 0x00	; 0
     658:	09 f4       	brne	.+2      	; 0x65c <pvPortMalloc+0x4a>
     65a:	5e c0       	rjmp	.+188    	; 0x718 <pvPortMalloc+0x106>
     65c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     660:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     664:	2c 17       	cp	r18, r28
     666:	3d 07       	cpc	r19, r29
     668:	08 f4       	brcc	.+2      	; 0x66c <pvPortMalloc+0x5a>
     66a:	59 c0       	rjmp	.+178    	; 0x71e <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     66c:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <xStart>
     670:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     674:	a3 e5       	ldi	r26, 0x53	; 83
     676:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     678:	02 c0       	rjmp	.+4      	; 0x67e <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     67a:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     67c:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     67e:	82 81       	ldd	r24, Z+2	; 0x02
     680:	93 81       	ldd	r25, Z+3	; 0x03
     682:	8c 17       	cp	r24, r28
     684:	9d 07       	cpc	r25, r29
     686:	20 f4       	brcc	.+8      	; 0x690 <pvPortMalloc+0x7e>
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	a9 f7       	brne	.-22     	; 0x67a <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	ef 34       	cpi	r30, 0x4F	; 79
     694:	f8 07       	cpc	r31, r24
     696:	09 f4       	brne	.+2      	; 0x69a <pvPortMalloc+0x88>
     698:	45 c0       	rjmp	.+138    	; 0x724 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     69a:	0d 91       	ld	r16, X+
     69c:	1c 91       	ld	r17, X
     69e:	11 97       	sbiw	r26, 0x01	; 1
     6a0:	0c 5f       	subi	r16, 0xFC	; 252
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	8d 93       	st	X+, r24
     6aa:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	93 81       	ldd	r25, Z+3	; 0x03
     6b0:	8c 1b       	sub	r24, r28
     6b2:	9d 0b       	sbc	r25, r29
     6b4:	89 30       	cpi	r24, 0x09	; 9
     6b6:	91 05       	cpc	r25, r1
     6b8:	30 f1       	brcs	.+76     	; 0x706 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     6ba:	bf 01       	movw	r22, r30
     6bc:	6c 0f       	add	r22, r28
     6be:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     6c0:	db 01       	movw	r26, r22
     6c2:	13 96       	adiw	r26, 0x03	; 3
     6c4:	9c 93       	st	X, r25
     6c6:	8e 93       	st	-X, r24
     6c8:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     6ca:	d3 83       	std	Z+3, r29	; 0x03
     6cc:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     6ce:	12 96       	adiw	r26, 0x02	; 2
     6d0:	4d 91       	ld	r20, X+
     6d2:	5c 91       	ld	r21, X
     6d4:	13 97       	sbiw	r26, 0x03	; 3
     6d6:	0f 2e       	mov	r0, r31
     6d8:	f3 e5       	ldi	r31, 0x53	; 83
     6da:	ef 2e       	mov	r14, r31
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	ff 2e       	mov	r15, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <pvPortMalloc+0xd4>
     6e4:	7d 01       	movw	r14, r26
     6e6:	e7 01       	movw	r28, r14
     6e8:	a8 81       	ld	r26, Y
     6ea:	b9 81       	ldd	r27, Y+1	; 0x01
     6ec:	12 96       	adiw	r26, 0x02	; 2
     6ee:	8d 91       	ld	r24, X+
     6f0:	9c 91       	ld	r25, X
     6f2:	13 97       	sbiw	r26, 0x03	; 3
     6f4:	84 17       	cp	r24, r20
     6f6:	95 07       	cpc	r25, r21
     6f8:	a8 f3       	brcs	.-22     	; 0x6e4 <pvPortMalloc+0xd2>
     6fa:	eb 01       	movw	r28, r22
     6fc:	b9 83       	std	Y+1, r27	; 0x01
     6fe:	a8 83       	st	Y, r26
     700:	d7 01       	movw	r26, r14
     702:	6d 93       	st	X+, r22
     704:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     706:	82 81       	ldd	r24, Z+2	; 0x02
     708:	93 81       	ldd	r25, Z+3	; 0x03
     70a:	28 1b       	sub	r18, r24
     70c:	39 0b       	sbc	r19, r25
     70e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     712:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     716:	08 c0       	rjmp	.+16     	; 0x728 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     718:	00 e0       	ldi	r16, 0x00	; 0
     71a:	10 e0       	ldi	r17, 0x00	; 0
     71c:	05 c0       	rjmp	.+10     	; 0x728 <pvPortMalloc+0x116>
     71e:	00 e0       	ldi	r16, 0x00	; 0
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <pvPortMalloc+0x116>
     724:	00 e0       	ldi	r16, 0x00	; 0
     726:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     728:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     72c:	c8 01       	movw	r24, r16
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	08 95       	ret

0000073c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	41 f1       	breq	.+80     	; 0x798 <vPortFree+0x5c>
     748:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     74a:	8c 01       	movw	r16, r24
     74c:	04 50       	subi	r16, 0x04	; 4
     74e:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     750:	0e 94 0c 09 	call	0x1218	; 0x1218 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     754:	f8 01       	movw	r30, r16
     756:	42 81       	ldd	r20, Z+2	; 0x02
     758:	53 81       	ldd	r21, Z+3	; 0x03
     75a:	a3 e5       	ldi	r26, 0x53	; 83
     75c:	b1 e0       	ldi	r27, 0x01	; 1
     75e:	01 c0       	rjmp	.+2      	; 0x762 <vPortFree+0x26>
     760:	df 01       	movw	r26, r30
     762:	ed 91       	ld	r30, X+
     764:	fc 91       	ld	r31, X
     766:	11 97       	sbiw	r26, 0x01	; 1
     768:	22 81       	ldd	r18, Z+2	; 0x02
     76a:	33 81       	ldd	r19, Z+3	; 0x03
     76c:	24 17       	cp	r18, r20
     76e:	35 07       	cpc	r19, r21
     770:	b8 f3       	brcs	.-18     	; 0x760 <vPortFree+0x24>
     772:	24 97       	sbiw	r28, 0x04	; 4
     774:	f9 83       	std	Y+1, r31	; 0x01
     776:	e8 83       	st	Y, r30
     778:	0d 93       	st	X+, r16
     77a:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	9b 81       	ldd	r25, Y+3	; 0x03
     780:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     784:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     790:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     794:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
    }
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     7a2:	fc 01       	movw	r30, r24
     7a4:	03 96       	adiw	r24, 0x03	; 3
     7a6:	92 83       	std	Z+2, r25	; 0x02
     7a8:	81 83       	std	Z+1, r24	; 0x01
     7aa:	2f ef       	ldi	r18, 0xFF	; 255
     7ac:	3f ef       	ldi	r19, 0xFF	; 255
     7ae:	34 83       	std	Z+4, r19	; 0x04
     7b0:	23 83       	std	Z+3, r18	; 0x03
     7b2:	96 83       	std	Z+6, r25	; 0x06
     7b4:	85 83       	std	Z+5, r24	; 0x05
     7b6:	90 87       	std	Z+8, r25	; 0x08
     7b8:	87 83       	std	Z+7, r24	; 0x07
     7ba:	10 82       	st	Z, r1
     7bc:	08 95       	ret

000007be <vListInitialiseItem>:
     7be:	fc 01       	movw	r30, r24
     7c0:	11 86       	std	Z+9, r1	; 0x09
     7c2:	10 86       	std	Z+8, r1	; 0x08
     7c4:	08 95       	ret

000007c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7cc:	48 81       	ld	r20, Y
     7ce:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7d0:	4f 3f       	cpi	r20, 0xFF	; 255
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	52 07       	cpc	r21, r18
     7d6:	21 f4       	brne	.+8      	; 0x7e0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7d8:	fc 01       	movw	r30, r24
     7da:	a7 81       	ldd	r26, Z+7	; 0x07
     7dc:	b0 85       	ldd	r27, Z+8	; 0x08
     7de:	0d c0       	rjmp	.+26     	; 0x7fa <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7e0:	dc 01       	movw	r26, r24
     7e2:	13 96       	adiw	r26, 0x03	; 3
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <vListInsert+0x22>
     7e6:	df 01       	movw	r26, r30
     7e8:	12 96       	adiw	r26, 0x02	; 2
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	13 97       	sbiw	r26, 0x03	; 3
     7f0:	20 81       	ld	r18, Z
     7f2:	31 81       	ldd	r19, Z+1	; 0x01
     7f4:	42 17       	cp	r20, r18
     7f6:	53 07       	cpc	r21, r19
     7f8:	b0 f7       	brcc	.-20     	; 0x7e6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7fa:	12 96       	adiw	r26, 0x02	; 2
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	13 97       	sbiw	r26, 0x03	; 3
     802:	fb 83       	std	Y+3, r31	; 0x03
     804:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     806:	d5 83       	std	Z+5, r29	; 0x05
     808:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     80a:	bd 83       	std	Y+5, r27	; 0x05
     80c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     80e:	13 96       	adiw	r26, 0x03	; 3
     810:	dc 93       	st	X, r29
     812:	ce 93       	st	-X, r28
     814:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     816:	99 87       	std	Y+9, r25	; 0x09
     818:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     81a:	fc 01       	movw	r30, r24
     81c:	20 81       	ld	r18, Z
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	20 83       	st	Z, r18
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     82e:	a0 85       	ldd	r26, Z+8	; 0x08
     830:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     832:	c2 81       	ldd	r28, Z+2	; 0x02
     834:	d3 81       	ldd	r29, Z+3	; 0x03
     836:	84 81       	ldd	r24, Z+4	; 0x04
     838:	95 81       	ldd	r25, Z+5	; 0x05
     83a:	9d 83       	std	Y+5, r25	; 0x05
     83c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     83e:	c4 81       	ldd	r28, Z+4	; 0x04
     840:	d5 81       	ldd	r29, Z+5	; 0x05
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	9b 83       	std	Y+3, r25	; 0x03
     848:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     84a:	11 96       	adiw	r26, 0x01	; 1
     84c:	8d 91       	ld	r24, X+
     84e:	9c 91       	ld	r25, X
     850:	12 97       	sbiw	r26, 0x02	; 2
     852:	e8 17       	cp	r30, r24
     854:	f9 07       	cpc	r31, r25
     856:	31 f4       	brne	.+12     	; 0x864 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     858:	84 81       	ldd	r24, Z+4	; 0x04
     85a:	95 81       	ldd	r25, Z+5	; 0x05
     85c:	12 96       	adiw	r26, 0x02	; 2
     85e:	9c 93       	st	X, r25
     860:	8e 93       	st	-X, r24
     862:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     864:	11 86       	std	Z+9, r1	; 0x09
     866:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     868:	8c 91       	ld	r24, X
     86a:	81 50       	subi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     86e:	8c 91       	ld	r24, X
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	0f 92       	push	r0
     87c:	fc 01       	movw	r30, r24
     87e:	82 8d       	ldd	r24, Z+26	; 0x1a
     880:	81 11       	cpse	r24, r1
     882:	02 c0       	rjmp	.+4      	; 0x888 <prvIsQueueEmpty+0x12>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	01 c0       	rjmp	.+2      	; 0x88a <prvIsQueueEmpty+0x14>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	08 95       	ret

00000890 <prvIsQueueFull>:
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	0f 92       	push	r0
     896:	fc 01       	movw	r30, r24
     898:	22 8d       	ldd	r18, Z+26	; 0x1a
     89a:	83 8d       	ldd	r24, Z+27	; 0x1b
     89c:	28 13       	cpse	r18, r24
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <prvIsQueueFull+0x14>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <prvIsQueueFull+0x16>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	08 95       	ret

000008ac <prvCopyDataToQueue>:
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	04 2f       	mov	r16, r20
     8b8:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8ba:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8bc:	44 23       	and	r20, r20
     8be:	b9 f1       	breq	.+110    	; 0x92e <__stack+0x2f>
     8c0:	01 11       	cpse	r16, r1
     8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <prvCopyDataToQueue+0x44>
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	8a 81       	ldd	r24, Y+2	; 0x02
     8c8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ca:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <memcpy>
     8ce:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8d0:	8a 81       	ldd	r24, Y+2	; 0x02
     8d2:	9b 81       	ldd	r25, Y+3	; 0x03
     8d4:	82 0f       	add	r24, r18
     8d6:	91 1d       	adc	r25, r1
     8d8:	9b 83       	std	Y+3, r25	; 0x03
     8da:	8a 83       	std	Y+2, r24	; 0x02
     8dc:	2c 81       	ldd	r18, Y+4	; 0x04
     8de:	3d 81       	ldd	r19, Y+5	; 0x05
     8e0:	82 17       	cp	r24, r18
     8e2:	93 07       	cpc	r25, r19
     8e4:	20 f1       	brcs	.+72     	; 0x92e <__stack+0x2f>
     8e6:	88 81       	ld	r24, Y
     8e8:	99 81       	ldd	r25, Y+1	; 0x01
     8ea:	9b 83       	std	Y+3, r25	; 0x03
     8ec:	8a 83       	std	Y+2, r24	; 0x02
     8ee:	1f c0       	rjmp	.+62     	; 0x92e <__stack+0x2f>
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	8e 81       	ldd	r24, Y+6	; 0x06
     8f4:	9f 81       	ldd	r25, Y+7	; 0x07
     8f6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <memcpy>
     8fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	91 95       	neg	r25
     900:	81 95       	neg	r24
     902:	91 09       	sbc	r25, r1
     904:	2e 81       	ldd	r18, Y+6	; 0x06
     906:	3f 81       	ldd	r19, Y+7	; 0x07
     908:	28 0f       	add	r18, r24
     90a:	39 1f       	adc	r19, r25
     90c:	3f 83       	std	Y+7, r19	; 0x07
     90e:	2e 83       	std	Y+6, r18	; 0x06
     910:	48 81       	ld	r20, Y
     912:	59 81       	ldd	r21, Y+1	; 0x01
     914:	24 17       	cp	r18, r20
     916:	35 07       	cpc	r19, r21
     918:	30 f4       	brcc	.+12     	; 0x926 <__stack+0x27>
     91a:	2c 81       	ldd	r18, Y+4	; 0x04
     91c:	3d 81       	ldd	r19, Y+5	; 0x05
     91e:	82 0f       	add	r24, r18
     920:	93 1f       	adc	r25, r19
     922:	9f 83       	std	Y+7, r25	; 0x07
     924:	8e 83       	std	Y+6, r24	; 0x06
     926:	02 30       	cpi	r16, 0x02	; 2
     928:	11 f4       	brne	.+4      	; 0x92e <__stack+0x2f>
     92a:	11 11       	cpse	r17, r1
     92c:	11 50       	subi	r17, 0x01	; 1
     92e:	1f 5f       	subi	r17, 0xFF	; 255
     930:	1a 8f       	std	Y+26, r17	; 0x1a
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <prvCopyDataFromQueue>:
     93e:	fc 01       	movw	r30, r24
     940:	44 8d       	ldd	r20, Z+28	; 0x1c
     942:	44 23       	and	r20, r20
     944:	a9 f0       	breq	.+42     	; 0x970 <prvCopyDataFromQueue+0x32>
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	26 81       	ldd	r18, Z+6	; 0x06
     94a:	37 81       	ldd	r19, Z+7	; 0x07
     94c:	24 0f       	add	r18, r20
     94e:	35 1f       	adc	r19, r21
     950:	37 83       	std	Z+7, r19	; 0x07
     952:	26 83       	std	Z+6, r18	; 0x06
     954:	84 81       	ldd	r24, Z+4	; 0x04
     956:	95 81       	ldd	r25, Z+5	; 0x05
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	20 f0       	brcs	.+8      	; 0x966 <prvCopyDataFromQueue+0x28>
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	97 83       	std	Z+7, r25	; 0x07
     964:	86 83       	std	Z+6, r24	; 0x06
     966:	cb 01       	movw	r24, r22
     968:	66 81       	ldd	r22, Z+6	; 0x06
     96a:	77 81       	ldd	r23, Z+7	; 0x07
     96c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <memcpy>
     970:	08 95       	ret

00000972 <prvUnlockQueue>:
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	0f 92       	push	r0
     980:	1e 8d       	ldd	r17, Y+30	; 0x1e
     982:	0b c0       	rjmp	.+22     	; 0x99a <prvUnlockQueue+0x28>
     984:	89 89       	ldd	r24, Y+17	; 0x11
     986:	88 23       	and	r24, r24
     988:	51 f0       	breq	.+20     	; 0x99e <prvUnlockQueue+0x2c>
     98a:	ce 01       	movw	r24, r28
     98c:	41 96       	adiw	r24, 0x11	; 17
     98e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xTaskRemoveFromEventList>
     992:	81 11       	cpse	r24, r1
     994:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vTaskMissedYield>
     998:	11 50       	subi	r17, 0x01	; 1
     99a:	11 16       	cp	r1, r17
     99c:	9c f3       	brlt	.-26     	; 0x984 <prvUnlockQueue+0x12>
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	8e 8f       	std	Y+30, r24	; 0x1e
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	0f 92       	push	r0
     9ac:	1d 8d       	ldd	r17, Y+29	; 0x1d
     9ae:	0b c0       	rjmp	.+22     	; 0x9c6 <prvUnlockQueue+0x54>
     9b0:	88 85       	ldd	r24, Y+8	; 0x08
     9b2:	88 23       	and	r24, r24
     9b4:	51 f0       	breq	.+20     	; 0x9ca <prvUnlockQueue+0x58>
     9b6:	ce 01       	movw	r24, r28
     9b8:	08 96       	adiw	r24, 0x08	; 8
     9ba:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xTaskRemoveFromEventList>
     9be:	81 11       	cpse	r24, r1
     9c0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <vTaskMissedYield>
     9c4:	11 50       	subi	r17, 0x01	; 1
     9c6:	11 16       	cp	r1, r17
     9c8:	9c f3       	brlt	.-26     	; 0x9b0 <prvUnlockQueue+0x3e>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	8d 8f       	std	Y+29, r24	; 0x1d
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	08 95       	ret

000009da <xQueueGenericReset>:
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	fc 01       	movw	r30, r24
     9e4:	36 2f       	mov	r19, r22
     9e6:	89 2b       	or	r24, r25
     9e8:	09 f4       	brne	.+2      	; 0x9ec <xQueueGenericReset+0x12>
     9ea:	4d c0       	rjmp	.+154    	; 0xa86 <xQueueGenericReset+0xac>
     9ec:	23 8d       	ldd	r18, Z+27	; 0x1b
     9ee:	22 23       	and	r18, r18
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <xQueueGenericReset+0x1a>
     9f2:	4b c0       	rjmp	.+150    	; 0xa8a <xQueueGenericReset+0xb0>
     9f4:	02 2f       	mov	r16, r18
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	9f ef       	ldi	r25, 0xFF	; 255
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__udivmodhi4>
     a02:	44 8d       	ldd	r20, Z+28	; 0x1c
     a04:	84 2f       	mov	r24, r20
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	68 17       	cp	r22, r24
     a0a:	79 07       	cpc	r23, r25
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <xQueueGenericReset+0x36>
     a0e:	3f c0       	rjmp	.+126    	; 0xa8e <xQueueGenericReset+0xb4>
     a10:	ef 01       	movw	r28, r30
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	0f 92       	push	r0
     a18:	60 81       	ld	r22, Z
     a1a:	71 81       	ldd	r23, Z+1	; 0x01
     a1c:	fb 01       	movw	r30, r22
     a1e:	24 9f       	mul	r18, r20
     a20:	e0 0d       	add	r30, r0
     a22:	f1 1d       	adc	r31, r1
     a24:	11 24       	eor	r1, r1
     a26:	fd 83       	std	Y+5, r31	; 0x05
     a28:	ec 83       	std	Y+4, r30	; 0x04
     a2a:	1a 8e       	std	Y+26, r1	; 0x1a
     a2c:	7b 83       	std	Y+3, r23	; 0x03
     a2e:	6a 83       	std	Y+2, r22	; 0x02
     a30:	01 50       	subi	r16, 0x01	; 1
     a32:	11 09       	sbc	r17, r1
     a34:	80 9f       	mul	r24, r16
     a36:	a0 01       	movw	r20, r0
     a38:	81 9f       	mul	r24, r17
     a3a:	50 0d       	add	r21, r0
     a3c:	90 9f       	mul	r25, r16
     a3e:	50 0d       	add	r21, r0
     a40:	11 24       	eor	r1, r1
     a42:	cb 01       	movw	r24, r22
     a44:	84 0f       	add	r24, r20
     a46:	95 1f       	adc	r25, r21
     a48:	9f 83       	std	Y+7, r25	; 0x07
     a4a:	8e 83       	std	Y+6, r24	; 0x06
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	8d 8f       	std	Y+29, r24	; 0x1d
     a50:	8e 8f       	std	Y+30, r24	; 0x1e
     a52:	31 11       	cpse	r19, r1
     a54:	0c c0       	rjmp	.+24     	; 0xa6e <xQueueGenericReset+0x94>
     a56:	88 85       	ldd	r24, Y+8	; 0x08
     a58:	88 23       	and	r24, r24
     a5a:	89 f0       	breq	.+34     	; 0xa7e <xQueueGenericReset+0xa4>
     a5c:	ce 01       	movw	r24, r28
     a5e:	08 96       	adiw	r24, 0x08	; 8
     a60:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xTaskRemoveFromEventList>
     a64:	88 23       	and	r24, r24
     a66:	59 f0       	breq	.+22     	; 0xa7e <xQueueGenericReset+0xa4>
     a68:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
     a6c:	08 c0       	rjmp	.+16     	; 0xa7e <xQueueGenericReset+0xa4>
     a6e:	ce 01       	movw	r24, r28
     a70:	08 96       	adiw	r24, 0x08	; 8
     a72:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     a76:	ce 01       	movw	r24, r28
     a78:	41 96       	adiw	r24, 0x11	; 17
     a7a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <xQueueGenericReset+0xb6>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <xQueueGenericReset+0xb6>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <xQueueGenericReset+0xb6>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <prvInitialiseNewQueue>:
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	f8 01       	movw	r30, r16
     aa0:	61 11       	cpse	r22, r1
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <prvInitialiseNewQueue+0x10>
     aa4:	11 83       	std	Z+1, r17	; 0x01
     aa6:	00 83       	st	Z, r16
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <prvInitialiseNewQueue+0x14>
     aaa:	51 83       	std	Z+1, r21	; 0x01
     aac:	40 83       	st	Z, r20
     aae:	83 8f       	std	Z+27, r24	; 0x1b
     ab0:	64 8f       	std	Z+28, r22	; 0x1c
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	cf 01       	movw	r24, r30
     ab6:	0e 94 ed 04 	call	0x9da	; 0x9da <xQueueGenericReset>
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <xQueueGenericCreate>:
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	38 2f       	mov	r19, r24
     ad0:	e6 2f       	mov	r30, r22
     ad2:	88 23       	and	r24, r24
     ad4:	29 f1       	breq	.+74     	; 0xb20 <xQueueGenericCreate+0x60>
     ad6:	68 2f       	mov	r22, r24
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	9f ef       	ldi	r25, 0xFF	; 255
     ade:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__udivmodhi4>
     ae2:	8e 2f       	mov	r24, r30
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	68 17       	cp	r22, r24
     ae8:	79 07       	cpc	r23, r25
     aea:	e8 f0       	brcs	.+58     	; 0xb26 <xQueueGenericCreate+0x66>
     aec:	3e 9f       	mul	r19, r30
     aee:	c0 01       	movw	r24, r0
     af0:	11 24       	eor	r1, r1
     af2:	81 3e       	cpi	r24, 0xE1	; 225
     af4:	2f ef       	ldi	r18, 0xFF	; 255
     af6:	92 07       	cpc	r25, r18
     af8:	c8 f4       	brcc	.+50     	; 0xb2c <xQueueGenericCreate+0x6c>
     afa:	d4 2e       	mov	r13, r20
     afc:	de 2f       	mov	r29, r30
     afe:	c3 2f       	mov	r28, r19
     b00:	4f 96       	adiw	r24, 0x1f	; 31
     b02:	0e 94 09 03 	call	0x612	; 0x612 <pvPortMalloc>
     b06:	7c 01       	movw	r14, r24
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	91 f0       	breq	.+36     	; 0xb30 <xQueueGenericCreate+0x70>
     b0c:	8c 01       	movw	r16, r24
     b0e:	2d 2d       	mov	r18, r13
     b10:	ac 01       	movw	r20, r24
     b12:	41 5e       	subi	r20, 0xE1	; 225
     b14:	5f 4f       	sbci	r21, 0xFF	; 255
     b16:	6d 2f       	mov	r22, r29
     b18:	8c 2f       	mov	r24, r28
     b1a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <prvInitialiseNewQueue>
     b1e:	08 c0       	rjmp	.+16     	; 0xb30 <xQueueGenericCreate+0x70>
     b20:	e1 2c       	mov	r14, r1
     b22:	f1 2c       	mov	r15, r1
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <xQueueGenericCreate+0x70>
     b26:	e1 2c       	mov	r14, r1
     b28:	f1 2c       	mov	r15, r1
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <xQueueGenericCreate+0x70>
     b2c:	e1 2c       	mov	r14, r1
     b2e:	f1 2c       	mov	r15, r1
     b30:	c7 01       	movw	r24, r14
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	08 95       	ret

00000b42 <xQueueGenericSend>:
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	00 d0       	rcall	.+0      	; 0xb54 <xQueueGenericSend+0x12>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <xQueueGenericSend+0x14>
     b56:	1f 92       	push	r1
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	8c 01       	movw	r16, r24
     b5e:	7b 01       	movw	r14, r22
     b60:	5d 83       	std	Y+5, r21	; 0x05
     b62:	4c 83       	std	Y+4, r20	; 0x04
     b64:	c2 2e       	mov	r12, r18
     b66:	d1 2c       	mov	r13, r1
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	0f 92       	push	r0
     b6e:	f8 01       	movw	r30, r16
     b70:	92 8d       	ldd	r25, Z+26	; 0x1a
     b72:	83 8d       	ldd	r24, Z+27	; 0x1b
     b74:	98 17       	cp	r25, r24
     b76:	18 f0       	brcs	.+6      	; 0xb7e <xQueueGenericSend+0x3c>
     b78:	f2 e0       	ldi	r31, 0x02	; 2
     b7a:	cf 12       	cpse	r12, r31
     b7c:	19 c0       	rjmp	.+50     	; 0xbb0 <xQueueGenericSend+0x6e>
     b7e:	4c 2d       	mov	r20, r12
     b80:	b7 01       	movw	r22, r14
     b82:	c8 01       	movw	r24, r16
     b84:	0e 94 56 04 	call	0x8ac	; 0x8ac <prvCopyDataToQueue>
     b88:	f8 01       	movw	r30, r16
     b8a:	91 89       	ldd	r25, Z+17	; 0x11
     b8c:	99 23       	and	r25, r25
     b8e:	49 f0       	breq	.+18     	; 0xba2 <xQueueGenericSend+0x60>
     b90:	c8 01       	movw	r24, r16
     b92:	41 96       	adiw	r24, 0x11	; 17
     b94:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xTaskRemoveFromEventList>
     b98:	88 23       	and	r24, r24
     b9a:	31 f0       	breq	.+12     	; 0xba8 <xQueueGenericSend+0x66>
     b9c:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <xQueueGenericSend+0x66>
     ba2:	81 11       	cpse	r24, r1
     ba4:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	4d c0       	rjmp	.+154    	; 0xc4a <xQueueGenericSend+0x108>
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	9d 81       	ldd	r25, Y+5	; 0x05
     bb4:	89 2b       	or	r24, r25
     bb6:	21 f4       	brne	.+8      	; 0xbc0 <xQueueGenericSend+0x7e>
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	45 c0       	rjmp	.+138    	; 0xc4a <xQueueGenericSend+0x108>
     bc0:	d1 10       	cpse	r13, r1
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <xQueueGenericSend+0x8e>
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 24 0c 	call	0x1848	; 0x1848 <vTaskInternalSetTimeOutState>
     bcc:	dd 24       	eor	r13, r13
     bce:	d3 94       	inc	r13
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0e 94 0c 09 	call	0x1218	; 0x1218 <vTaskSuspendAll>
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	0f 92       	push	r0
     bde:	f8 01       	movw	r30, r16
     be0:	85 8d       	ldd	r24, Z+29	; 0x1d
     be2:	8f 3f       	cpi	r24, 0xFF	; 255
     be4:	09 f4       	brne	.+2      	; 0xbe8 <xQueueGenericSend+0xa6>
     be6:	15 8e       	std	Z+29, r1	; 0x1d
     be8:	f8 01       	movw	r30, r16
     bea:	86 8d       	ldd	r24, Z+30	; 0x1e
     bec:	8f 3f       	cpi	r24, 0xFF	; 255
     bee:	09 f4       	brne	.+2      	; 0xbf2 <xQueueGenericSend+0xb0>
     bf0:	16 8e       	std	Z+30, r1	; 0x1e
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	be 01       	movw	r22, r28
     bf8:	6c 5f       	subi	r22, 0xFC	; 252
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 2f 0c 	call	0x185e	; 0x185e <xTaskCheckForTimeOut>
     c04:	81 11       	cpse	r24, r1
     c06:	1b c0       	rjmp	.+54     	; 0xc3e <xQueueGenericSend+0xfc>
     c08:	c8 01       	movw	r24, r16
     c0a:	0e 94 48 04 	call	0x890	; 0x890 <prvIsQueueFull>
     c0e:	88 23       	and	r24, r24
     c10:	81 f0       	breq	.+32     	; 0xc32 <xQueueGenericSend+0xf0>
     c12:	6c 81       	ldd	r22, Y+4	; 0x04
     c14:	7d 81       	ldd	r23, Y+5	; 0x05
     c16:	c8 01       	movw	r24, r16
     c18:	08 96       	adiw	r24, 0x08	; 8
     c1a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vTaskPlaceOnEventList>
     c1e:	c8 01       	movw	r24, r16
     c20:	0e 94 b9 04 	call	0x972	; 0x972 <prvUnlockQueue>
     c24:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
     c28:	81 11       	cpse	r24, r1
     c2a:	9e cf       	rjmp	.-196    	; 0xb68 <xQueueGenericSend+0x26>
     c2c:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
     c30:	9b cf       	rjmp	.-202    	; 0xb68 <xQueueGenericSend+0x26>
     c32:	c8 01       	movw	r24, r16
     c34:	0e 94 b9 04 	call	0x972	; 0x972 <prvUnlockQueue>
     c38:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
     c3c:	95 cf       	rjmp	.-214    	; 0xb68 <xQueueGenericSend+0x26>
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 b9 04 	call	0x972	; 0x972 <prvUnlockQueue>
     c44:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	08 95       	ret

00000c66 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	00 d0       	rcall	.+0      	; 0xc78 <xQueueReceive+0x12>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <xQueueReceive+0x14>
     c7a:	1f 92       	push	r1
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	8c 01       	movw	r16, r24
     c82:	6b 01       	movw	r12, r22
     c84:	5d 83       	std	Y+5, r21	; 0x05
     c86:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     c88:	e1 2c       	mov	r14, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     c90:	f8 01       	movw	r30, r16
     c92:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     c94:	ff 20       	and	r15, r15
     c96:	a9 f0       	breq	.+42     	; 0xcc2 <xQueueReceive+0x5c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     c98:	b6 01       	movw	r22, r12
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 9f 04 	call	0x93e	; 0x93e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     ca0:	fa 94       	dec	r15
     ca2:	f8 01       	movw	r30, r16
     ca4:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ca6:	80 85       	ldd	r24, Z+8	; 0x08
     ca8:	88 23       	and	r24, r24
     caa:	39 f0       	breq	.+14     	; 0xcba <xQueueReceive+0x54>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     cac:	c8 01       	movw	r24, r16
     cae:	08 96       	adiw	r24, 0x08	; 8
     cb0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <xTaskRemoveFromEventList>
     cb4:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     cb6:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	53 c0       	rjmp	.+166    	; 0xd68 <xQueueReceive+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	89 2b       	or	r24, r25
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <xQueueReceive+0x6c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	4b c0       	rjmp	.+150    	; 0xd68 <xQueueReceive+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
     cd2:	e1 10       	cpse	r14, r1
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 24 0c 	call	0x1848	; 0x1848 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     cde:	ee 24       	eor	r14, r14
     ce0:	e3 94       	inc	r14
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     ce6:	0e 94 0c 09 	call	0x1218	; 0x1218 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	0f 92       	push	r0
     cf0:	f8 01       	movw	r30, r16
     cf2:	85 8d       	ldd	r24, Z+29	; 0x1d
     cf4:	8f 3f       	cpi	r24, 0xFF	; 255
     cf6:	09 f4       	brne	.+2      	; 0xcfa <xQueueReceive+0x94>
     cf8:	15 8e       	std	Z+29, r1	; 0x1d
     cfa:	f8 01       	movw	r30, r16
     cfc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cfe:	8f 3f       	cpi	r24, 0xFF	; 255
     d00:	09 f4       	brne	.+2      	; 0xd04 <xQueueReceive+0x9e>
     d02:	16 8e       	std	Z+30, r1	; 0x1e
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     d08:	be 01       	movw	r22, r28
     d0a:	6c 5f       	subi	r22, 0xFC	; 252
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 2f 0c 	call	0x185e	; 0x185e <xTaskCheckForTimeOut>
     d16:	81 11       	cpse	r24, r1
     d18:	1b c0       	rjmp	.+54     	; 0xd50 <xQueueReceive+0xea>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d1a:	c8 01       	movw	r24, r16
     d1c:	0e 94 3b 04 	call	0x876	; 0x876 <prvIsQueueEmpty>
     d20:	88 23       	and	r24, r24
     d22:	81 f0       	breq	.+32     	; 0xd44 <xQueueReceive+0xde>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     d24:	6c 81       	ldd	r22, Y+4	; 0x04
     d26:	7d 81       	ldd	r23, Y+5	; 0x05
     d28:	c8 01       	movw	r24, r16
     d2a:	41 96       	adiw	r24, 0x11	; 17
     d2c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     d30:	c8 01       	movw	r24, r16
     d32:	0e 94 b9 04 	call	0x972	; 0x972 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     d36:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
     d3a:	81 11       	cpse	r24, r1
     d3c:	a6 cf       	rjmp	.-180    	; 0xc8a <xQueueReceive+0x24>
                {
                    portYIELD_WITHIN_API();
     d3e:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
     d42:	a3 cf       	rjmp	.-186    	; 0xc8a <xQueueReceive+0x24>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 b9 04 	call	0x972	; 0x972 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     d4a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>
     d4e:	9d cf       	rjmp	.-198    	; 0xc8a <xQueueReceive+0x24>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
     d50:	c8 01       	movw	r24, r16
     d52:	0e 94 b9 04 	call	0x972	; 0x972 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     d56:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d5a:	c8 01       	movw	r24, r16
     d5c:	0e 94 3b 04 	call	0x876	; 0x876 <prvIsQueueEmpty>
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <xQueueReceive+0x100>
     d64:	92 cf       	rjmp	.-220    	; 0xc8a <xQueueReceive+0x24>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     d66:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	08 95       	ret

00000d84 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     d84:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxDelayedTaskList>
     d88:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxDelayedTaskList+0x1>
     d8c:	80 81       	ld	r24, Z
     d8e:	81 11       	cpse	r24, r1
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <prvResetNextTaskUnblockTime+0x1c>
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <xNextTaskUnblockTime+0x1>
     d9a:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xNextTaskUnblockTime>
     d9e:	08 95       	ret
     da0:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxDelayedTaskList>
     da4:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxDelayedTaskList+0x1>
     da8:	05 80       	ldd	r0, Z+5	; 0x05
     daa:	f6 81       	ldd	r31, Z+6	; 0x06
     dac:	e0 2d       	mov	r30, r0
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <xNextTaskUnblockTime+0x1>
     db6:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xNextTaskUnblockTime>
     dba:	08 95       	ret

00000dbc <prvDeleteTCB>:
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
     dc2:	8f 89       	ldd	r24, Y+23	; 0x17
     dc4:	98 8d       	ldd	r25, Y+24	; 0x18
     dc6:	0e 94 9e 03 	call	0x73c	; 0x73c <vPortFree>
     dca:	ce 01       	movw	r24, r28
     dcc:	0e 94 9e 03 	call	0x73c	; 0x73c <vPortFree>
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <prvInitialiseNewTask>:
     dd6:	6f 92       	push	r6
     dd8:	7f 92       	push	r7
     dda:	8f 92       	push	r8
     ddc:	9f 92       	push	r9
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	4c 01       	movw	r8, r24
     df6:	d5 01       	movw	r26, r10
     df8:	57 96       	adiw	r26, 0x17	; 23
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	58 97       	sbiw	r26, 0x18	; 24
     e00:	21 50       	subi	r18, 0x01	; 1
     e02:	31 09       	sbc	r19, r1
     e04:	3c 01       	movw	r6, r24
     e06:	62 0e       	add	r6, r18
     e08:	73 1e       	adc	r7, r19
     e0a:	61 15       	cp	r22, r1
     e0c:	71 05       	cpc	r23, r1
     e0e:	89 f4       	brne	.+34     	; 0xe32 <prvInitialiseNewTask+0x5c>
     e10:	16 c0       	rjmp	.+44     	; 0xe3e <prvInitialiseNewTask+0x68>
     e12:	82 2f       	mov	r24, r18
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	fb 01       	movw	r30, r22
     e18:	e8 0f       	add	r30, r24
     e1a:	f9 1f       	adc	r31, r25
     e1c:	30 81       	ld	r19, Z
     e1e:	d5 01       	movw	r26, r10
     e20:	a8 0f       	add	r26, r24
     e22:	b9 1f       	adc	r27, r25
     e24:	59 96       	adiw	r26, 0x19	; 25
     e26:	3c 93       	st	X, r19
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	29 f0       	breq	.+10     	; 0xe38 <prvInitialiseNewTask+0x62>
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <prvInitialiseNewTask+0x5e>
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	28 30       	cpi	r18, 0x08	; 8
     e36:	68 f3       	brcs	.-38     	; 0xe12 <prvInitialiseNewTask+0x3c>
     e38:	f5 01       	movw	r30, r10
     e3a:	10 a2       	std	Z+32, r1	; 0x20
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <prvInitialiseNewTask+0x6e>
     e3e:	d5 01       	movw	r26, r10
     e40:	59 96       	adiw	r26, 0x19	; 25
     e42:	1c 92       	st	X, r1
     e44:	b3 e0       	ldi	r27, 0x03	; 3
     e46:	be 15       	cp	r27, r14
     e48:	20 f4       	brcc	.+8      	; 0xe52 <prvInitialiseNewTask+0x7c>
     e4a:	0f 2e       	mov	r0, r31
     e4c:	f3 e0       	ldi	r31, 0x03	; 3
     e4e:	ef 2e       	mov	r14, r31
     e50:	f0 2d       	mov	r31, r0
     e52:	f5 01       	movw	r30, r10
     e54:	e6 8a       	std	Z+22, r14	; 0x16
     e56:	c5 01       	movw	r24, r10
     e58:	02 96       	adiw	r24, 0x02	; 2
     e5a:	0e 94 df 03 	call	0x7be	; 0x7be <vListInitialiseItem>
     e5e:	c5 01       	movw	r24, r10
     e60:	0c 96       	adiw	r24, 0x0c	; 12
     e62:	0e 94 df 03 	call	0x7be	; 0x7be <vListInitialiseItem>
     e66:	d5 01       	movw	r26, r10
     e68:	19 96       	adiw	r26, 0x09	; 9
     e6a:	bc 92       	st	X, r11
     e6c:	ae 92       	st	-X, r10
     e6e:	18 97       	sbiw	r26, 0x08	; 8
     e70:	84 e0       	ldi	r24, 0x04	; 4
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	8e 19       	sub	r24, r14
     e76:	91 09       	sbc	r25, r1
     e78:	1d 96       	adiw	r26, 0x0d	; 13
     e7a:	9c 93       	st	X, r25
     e7c:	8e 93       	st	-X, r24
     e7e:	1c 97       	sbiw	r26, 0x0c	; 12
     e80:	53 96       	adiw	r26, 0x13	; 19
     e82:	bc 92       	st	X, r11
     e84:	ae 92       	st	-X, r10
     e86:	52 97       	sbiw	r26, 0x12	; 18
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	f5 01       	movw	r30, r10
     e8c:	b1 96       	adiw	r30, 0x21	; 33
     e8e:	df 01       	movw	r26, r30
     e90:	1d 92       	st	X+, r1
     e92:	8a 95       	dec	r24
     e94:	e9 f7       	brne	.-6      	; 0xe90 <prvInitialiseNewTask+0xba>
     e96:	f5 01       	movw	r30, r10
     e98:	15 a2       	std	Z+37, r1	; 0x25
     e9a:	a8 01       	movw	r20, r16
     e9c:	b4 01       	movw	r22, r8
     e9e:	c3 01       	movw	r24, r6
     ea0:	0e 94 9b 01 	call	0x336	; 0x336 <pxPortInitialiseStack>
     ea4:	d5 01       	movw	r26, r10
     ea6:	8d 93       	st	X+, r24
     ea8:	9c 93       	st	X, r25
     eaa:	c1 14       	cp	r12, r1
     eac:	d1 04       	cpc	r13, r1
     eae:	19 f0       	breq	.+6      	; 0xeb6 <prvInitialiseNewTask+0xe0>
     eb0:	f6 01       	movw	r30, r12
     eb2:	b1 82       	std	Z+1, r11	; 0x01
     eb4:	a0 82       	st	Z, r10
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	8f 90       	pop	r8
     ecc:	7f 90       	pop	r7
     ece:	6f 90       	pop	r6
     ed0:	08 95       	ret

00000ed2 <prvInitialiseTaskLists>:
     ed2:	cf 93       	push	r28
     ed4:	c0 e0       	ldi	r28, 0x00	; 0
     ed6:	10 c0       	rjmp	.+32     	; 0xef8 <prvInitialiseTaskLists+0x26>
     ed8:	8c 2f       	mov	r24, r28
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9c 01       	movw	r18, r24
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	22 0f       	add	r18, r18
     ee4:	33 1f       	adc	r19, r19
     ee6:	22 0f       	add	r18, r18
     ee8:	33 1f       	adc	r19, r19
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	85 59       	subi	r24, 0x95	; 149
     ef0:	98 4f       	sbci	r25, 0xF8	; 248
     ef2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     ef6:	cf 5f       	subi	r28, 0xFF	; 255
     ef8:	c4 30       	cpi	r28, 0x04	; 4
     efa:	70 f3       	brcs	.-36     	; 0xed8 <prvInitialiseTaskLists+0x6>
     efc:	82 e6       	ldi	r24, 0x62	; 98
     efe:	97 e0       	ldi	r25, 0x07	; 7
     f00:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     f04:	89 e5       	ldi	r24, 0x59	; 89
     f06:	97 e0       	ldi	r25, 0x07	; 7
     f08:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     f0c:	8c e4       	ldi	r24, 0x4C	; 76
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     f14:	83 e4       	ldi	r24, 0x43	; 67
     f16:	97 e0       	ldi	r25, 0x07	; 7
     f18:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vListInitialise>
     f1c:	82 e6       	ldi	r24, 0x62	; 98
     f1e:	97 e0       	ldi	r25, 0x07	; 7
     f20:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <pxDelayedTaskList+0x1>
     f24:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <pxDelayedTaskList>
     f28:	89 e5       	ldi	r24, 0x59	; 89
     f2a:	97 e0       	ldi	r25, 0x07	; 7
     f2c:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <pxOverflowDelayedTaskList+0x1>
     f30:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <pxOverflowDelayedTaskList>
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <prvAddNewTaskToReadyList>:
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	0f 92       	push	r0
     f44:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxCurrentNumberOfTasks>
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <uxCurrentNumberOfTasks>
     f4e:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxCurrentTCB>
     f52:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     f56:	89 2b       	or	r24, r25
     f58:	59 f4       	brne	.+22     	; 0xf70 <prvAddNewTaskToReadyList+0x38>
     f5a:	d0 93 90 07 	sts	0x0790, r29	; 0x800790 <pxCurrentTCB+0x1>
     f5e:	c0 93 8f 07 	sts	0x078F, r28	; 0x80078f <pxCurrentTCB>
     f62:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxCurrentNumberOfTasks>
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	99 f4       	brne	.+38     	; 0xf90 <prvAddNewTaskToReadyList+0x58>
     f6a:	0e 94 69 07 	call	0xed2	; 0xed2 <prvInitialiseTaskLists>
     f6e:	10 c0       	rjmp	.+32     	; 0xf90 <prvAddNewTaskToReadyList+0x58>
     f70:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <xSchedulerRunning>
     f74:	81 11       	cpse	r24, r1
     f76:	0c c0       	rjmp	.+24     	; 0xf90 <prvAddNewTaskToReadyList+0x58>
     f78:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <pxCurrentTCB>
     f7c:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
     f80:	96 89       	ldd	r25, Z+22	; 0x16
     f82:	8e 89       	ldd	r24, Y+22	; 0x16
     f84:	89 17       	cp	r24, r25
     f86:	20 f0       	brcs	.+8      	; 0xf90 <prvAddNewTaskToReadyList+0x58>
     f88:	d0 93 90 07 	sts	0x0790, r29	; 0x800790 <pxCurrentTCB+0x1>
     f8c:	c0 93 8f 07 	sts	0x078F, r28	; 0x80078f <pxCurrentTCB>
     f90:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <uxTaskNumber>
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <uxTaskNumber>
     f9a:	8e 89       	ldd	r24, Y+22	; 0x16
     f9c:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <uxTopReadyPriority>
     fa0:	98 17       	cp	r25, r24
     fa2:	10 f4       	brcc	.+4      	; 0xfa8 <prvAddNewTaskToReadyList+0x70>
     fa4:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxTopReadyPriority>
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	fc 01       	movw	r30, r24
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	8e 0f       	add	r24, r30
     fba:	9f 1f       	adc	r25, r31
     fbc:	fc 01       	movw	r30, r24
     fbe:	e5 59       	subi	r30, 0x95	; 149
     fc0:	f8 4f       	sbci	r31, 0xF8	; 248
     fc2:	01 80       	ldd	r0, Z+1	; 0x01
     fc4:	f2 81       	ldd	r31, Z+2	; 0x02
     fc6:	e0 2d       	mov	r30, r0
     fc8:	fd 83       	std	Y+5, r31	; 0x05
     fca:	ec 83       	std	Y+4, r30	; 0x04
     fcc:	84 81       	ldd	r24, Z+4	; 0x04
     fce:	95 81       	ldd	r25, Z+5	; 0x05
     fd0:	9f 83       	std	Y+7, r25	; 0x07
     fd2:	8e 83       	std	Y+6, r24	; 0x06
     fd4:	a4 81       	ldd	r26, Z+4	; 0x04
     fd6:	b5 81       	ldd	r27, Z+5	; 0x05
     fd8:	ce 01       	movw	r24, r28
     fda:	02 96       	adiw	r24, 0x02	; 2
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	9c 93       	st	X, r25
     fe0:	8e 93       	st	-X, r24
     fe2:	12 97       	sbiw	r26, 0x02	; 2
     fe4:	95 83       	std	Z+5, r25	; 0x05
     fe6:	84 83       	std	Z+4, r24	; 0x04
     fe8:	ee 89       	ldd	r30, Y+22	; 0x16
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	cf 01       	movw	r24, r30
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	e8 0f       	add	r30, r24
     ffc:	f9 1f       	adc	r31, r25
     ffe:	e5 59       	subi	r30, 0x95	; 149
    1000:	f8 4f       	sbci	r31, 0xF8	; 248
    1002:	fb 87       	std	Y+11, r31	; 0x0b
    1004:	ea 87       	std	Y+10, r30	; 0x0a
    1006:	80 81       	ld	r24, Z
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 83       	st	Z, r24
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <xSchedulerRunning>
    1014:	88 23       	and	r24, r24
    1016:	51 f0       	breq	.+20     	; 0x102c <prvAddNewTaskToReadyList+0xf4>
    1018:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <pxCurrentTCB>
    101c:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    1020:	96 89       	ldd	r25, Z+22	; 0x16
    1022:	8e 89       	ldd	r24, Y+22	; 0x16
    1024:	98 17       	cp	r25, r24
    1026:	10 f4       	brcc	.+4      	; 0x102c <prvAddNewTaskToReadyList+0xf4>
    1028:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <prvCheckTasksWaitingTermination>:
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	1c c0       	rjmp	.+56     	; 0x1070 <prvCheckTasksWaitingTermination+0x3e>
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	0f 92       	push	r0
    103e:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <xTasksWaitingTermination+0x5>
    1042:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <xTasksWaitingTermination+0x6>
    1046:	c6 81       	ldd	r28, Z+6	; 0x06
    1048:	d7 81       	ldd	r29, Z+7	; 0x07
    104a:	ce 01       	movw	r24, r28
    104c:	02 96       	adiw	r24, 0x02	; 2
    104e:	0e 94 14 04 	call	0x828	; 0x828 <uxListRemove>
    1052:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxCurrentNumberOfTasks>
    1056:	81 50       	subi	r24, 0x01	; 1
    1058:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <uxCurrentNumberOfTasks>
    105c:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxDeletedTasksWaitingCleanUp>
    1060:	81 50       	subi	r24, 0x01	; 1
    1062:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <uxDeletedTasksWaitingCleanUp>
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 de 06 	call	0xdbc	; 0xdbc <prvDeleteTCB>
    1070:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <uxDeletedTasksWaitingCleanUp>
    1074:	81 11       	cpse	r24, r1
    1076:	e0 cf       	rjmp	.-64     	; 0x1038 <prvCheckTasksWaitingTermination+0x6>
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <prvIdleTask>:
    107e:	0e 94 19 08 	call	0x1032	; 0x1032 <prvCheckTasksWaitingTermination>
    1082:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <pxReadyTasksLists>
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	d0 f3       	brcs	.-12     	; 0x107e <prvIdleTask>
    108a:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
    108e:	f7 cf       	rjmp	.-18     	; 0x107e <prvIdleTask>

00001090 <prvAddCurrentTaskToDelayedList>:
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	00 91 3f 07 	lds	r16, 0x073F	; 0x80073f <xTickCount>
    109e:	10 91 40 07 	lds	r17, 0x0740	; 0x800740 <xTickCount+0x1>
    10a2:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <pxCurrentTCB>
    10a6:	90 91 90 07 	lds	r25, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    10aa:	02 96       	adiw	r24, 0x02	; 2
    10ac:	0e 94 14 04 	call	0x828	; 0x828 <uxListRemove>
    10b0:	c0 0f       	add	r28, r16
    10b2:	d1 1f       	adc	r29, r17
    10b4:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <pxCurrentTCB>
    10b8:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    10bc:	d3 83       	std	Z+3, r29	; 0x03
    10be:	c2 83       	std	Z+2, r28	; 0x02
    10c0:	c0 17       	cp	r28, r16
    10c2:	d1 07       	cpc	r29, r17
    10c4:	68 f4       	brcc	.+26     	; 0x10e0 <prvAddCurrentTaskToDelayedList+0x50>
    10c6:	60 91 8f 07 	lds	r22, 0x078F	; 0x80078f <pxCurrentTCB>
    10ca:	70 91 90 07 	lds	r23, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    10ce:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <pxOverflowDelayedTaskList>
    10d2:	90 91 56 07 	lds	r25, 0x0756	; 0x800756 <pxOverflowDelayedTaskList+0x1>
    10d6:	6e 5f       	subi	r22, 0xFE	; 254
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <vListInsert>
    10de:	17 c0       	rjmp	.+46     	; 0x110e <prvAddCurrentTaskToDelayedList+0x7e>
    10e0:	60 91 8f 07 	lds	r22, 0x078F	; 0x80078f <pxCurrentTCB>
    10e4:	70 91 90 07 	lds	r23, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    10e8:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxDelayedTaskList>
    10ec:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxDelayedTaskList+0x1>
    10f0:	6e 5f       	subi	r22, 0xFE	; 254
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <vListInsert>
    10f8:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xNextTaskUnblockTime>
    10fc:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <xNextTaskUnblockTime+0x1>
    1100:	c8 17       	cp	r28, r24
    1102:	d9 07       	cpc	r29, r25
    1104:	20 f4       	brcc	.+8      	; 0x110e <prvAddCurrentTaskToDelayedList+0x7e>
    1106:	d0 93 37 07 	sts	0x0737, r29	; 0x800737 <xNextTaskUnblockTime+0x1>
    110a:	c0 93 36 07 	sts	0x0736, r28	; 0x800736 <xNextTaskUnblockTime>
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <xTaskCreate>:
    1118:	2f 92       	push	r2
    111a:	3f 92       	push	r3
    111c:	4f 92       	push	r4
    111e:	5f 92       	push	r5
    1120:	6f 92       	push	r6
    1122:	7f 92       	push	r7
    1124:	8f 92       	push	r8
    1126:	9f 92       	push	r9
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	3c 01       	movw	r6, r24
    113e:	1b 01       	movw	r2, r22
    1140:	5a 01       	movw	r10, r20
    1142:	29 01       	movw	r4, r18
    1144:	ca 01       	movw	r24, r20
    1146:	0e 94 09 03 	call	0x612	; 0x612 <pvPortMalloc>
    114a:	6c 01       	movw	r12, r24
    114c:	89 2b       	or	r24, r25
    114e:	71 f0       	breq	.+28     	; 0x116c <xTaskCreate+0x54>
    1150:	86 e2       	ldi	r24, 0x26	; 38
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 09 03 	call	0x612	; 0x612 <pvPortMalloc>
    1158:	ec 01       	movw	r28, r24
    115a:	89 2b       	or	r24, r25
    115c:	19 f0       	breq	.+6      	; 0x1164 <xTaskCreate+0x4c>
    115e:	d8 8e       	std	Y+24, r13	; 0x18
    1160:	cf 8a       	std	Y+23, r12	; 0x17
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <xTaskCreate+0x58>
    1164:	c6 01       	movw	r24, r12
    1166:	0e 94 9e 03 	call	0x73c	; 0x73c <vPortFree>
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <xTaskCreate+0x58>
    116c:	c0 e0       	ldi	r28, 0x00	; 0
    116e:	d0 e0       	ldi	r29, 0x00	; 0
    1170:	20 97       	sbiw	r28, 0x00	; 0
    1172:	91 f0       	breq	.+36     	; 0x1198 <xTaskCreate+0x80>
    1174:	95 01       	movw	r18, r10
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0
    117a:	81 2c       	mov	r8, r1
    117c:	91 2c       	mov	r9, r1
    117e:	5e 01       	movw	r10, r28
    1180:	67 01       	movw	r12, r14
    1182:	e0 2e       	mov	r14, r16
    1184:	82 01       	movw	r16, r4
    1186:	b1 01       	movw	r22, r2
    1188:	c3 01       	movw	r24, r6
    118a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <prvInitialiseNewTask>
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 9c 07 	call	0xf38	; 0xf38 <prvAddNewTaskToReadyList>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	01 c0       	rjmp	.+2      	; 0x119a <xTaskCreate+0x82>
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	7f 90       	pop	r7
    11b4:	6f 90       	pop	r6
    11b6:	5f 90       	pop	r5
    11b8:	4f 90       	pop	r4
    11ba:	3f 90       	pop	r3
    11bc:	2f 90       	pop	r2
    11be:	08 95       	ret

000011c0 <vTaskStartScheduler>:
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	0f 2e       	mov	r0, r31
    11c8:	f4 e3       	ldi	r31, 0x34	; 52
    11ca:	ef 2e       	mov	r14, r31
    11cc:	f7 e0       	ldi	r31, 0x07	; 7
    11ce:	ff 2e       	mov	r15, r31
    11d0:	f0 2d       	mov	r31, r0
    11d2:	00 e0       	ldi	r16, 0x00	; 0
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	45 e5       	ldi	r20, 0x55	; 85
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	65 e1       	ldi	r22, 0x15	; 21
    11de:	71 e0       	ldi	r23, 0x01	; 1
    11e0:	8f e3       	ldi	r24, 0x3F	; 63
    11e2:	98 e0       	ldi	r25, 0x08	; 8
    11e4:	0e 94 8c 08 	call	0x1118	; 0x1118 <xTaskCreate>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	81 f4       	brne	.+32     	; 0x120c <vTaskStartScheduler+0x4c>
    11ec:	f8 94       	cli
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <xNextTaskUnblockTime+0x1>
    11f6:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xNextTaskUnblockTime>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <xSchedulerRunning>
    1200:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <xTickCount+0x1>
    1204:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <xTickCount>
    1208:	0e 94 07 02 	call	0x40e	; 0x40e <xPortStartScheduler>
    120c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <vTaskSuspendAll>:
    1218:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxSchedulerSuspended>
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <uxSchedulerSuspended>
    1222:	08 95       	ret

00001224 <xTaskIncrementTick>:
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxSchedulerSuspended>
    1230:	81 11       	cpse	r24, r1
    1232:	01 c1       	rjmp	.+514    	; 0x1436 <xTaskIncrementTick+0x212>
    1234:	c0 91 3f 07 	lds	r28, 0x073F	; 0x80073f <xTickCount>
    1238:	d0 91 40 07 	lds	r29, 0x0740	; 0x800740 <xTickCount+0x1>
    123c:	8e 01       	movw	r16, r28
    123e:	0f 5f       	subi	r16, 0xFF	; 255
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	10 93 40 07 	sts	0x0740, r17	; 0x800740 <xTickCount+0x1>
    1246:	00 93 3f 07 	sts	0x073F, r16	; 0x80073f <xTickCount>
    124a:	01 15       	cp	r16, r1
    124c:	11 05       	cpc	r17, r1
    124e:	b9 f4       	brne	.+46     	; 0x127e <xTaskIncrementTick+0x5a>
    1250:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxDelayedTaskList>
    1254:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxDelayedTaskList+0x1>
    1258:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <pxOverflowDelayedTaskList>
    125c:	30 91 56 07 	lds	r19, 0x0756	; 0x800756 <pxOverflowDelayedTaskList+0x1>
    1260:	30 93 58 07 	sts	0x0758, r19	; 0x800758 <pxDelayedTaskList+0x1>
    1264:	20 93 57 07 	sts	0x0757, r18	; 0x800757 <pxDelayedTaskList>
    1268:	90 93 56 07 	sts	0x0756, r25	; 0x800756 <pxOverflowDelayedTaskList+0x1>
    126c:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <pxOverflowDelayedTaskList>
    1270:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <xNumOfOverflows>
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <xNumOfOverflows>
    127a:	0e 94 c2 06 	call	0xd84	; 0xd84 <prvResetNextTaskUnblockTime>
    127e:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xNextTaskUnblockTime>
    1282:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <xNextTaskUnblockTime+0x1>
    1286:	08 17       	cp	r16, r24
    1288:	19 07       	cpc	r17, r25
    128a:	20 f4       	brcc	.+8      	; 0x1294 <xTaskIncrementTick+0x70>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	b8 c0       	rjmp	.+368    	; 0x1400 <xTaskIncrementTick+0x1dc>
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <xTaskIncrementTick+0x72>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxDelayedTaskList>
    129a:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxDelayedTaskList+0x1>
    129e:	90 81       	ld	r25, Z
    12a0:	91 11       	cpse	r25, r1
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <xTaskIncrementTick+0x8e>
    12a4:	2f ef       	ldi	r18, 0xFF	; 255
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	30 93 37 07 	sts	0x0737, r19	; 0x800737 <xNextTaskUnblockTime+0x1>
    12ac:	20 93 36 07 	sts	0x0736, r18	; 0x800736 <xNextTaskUnblockTime>
    12b0:	a7 c0       	rjmp	.+334    	; 0x1400 <xTaskIncrementTick+0x1dc>
    12b2:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxDelayedTaskList>
    12b6:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxDelayedTaskList+0x1>
    12ba:	05 80       	ldd	r0, Z+5	; 0x05
    12bc:	f6 81       	ldd	r31, Z+6	; 0x06
    12be:	e0 2d       	mov	r30, r0
    12c0:	06 80       	ldd	r0, Z+6	; 0x06
    12c2:	f7 81       	ldd	r31, Z+7	; 0x07
    12c4:	e0 2d       	mov	r30, r0
    12c6:	22 81       	ldd	r18, Z+2	; 0x02
    12c8:	33 81       	ldd	r19, Z+3	; 0x03
    12ca:	02 17       	cp	r16, r18
    12cc:	13 07       	cpc	r17, r19
    12ce:	28 f4       	brcc	.+10     	; 0x12da <xTaskIncrementTick+0xb6>
    12d0:	30 93 37 07 	sts	0x0737, r19	; 0x800737 <xNextTaskUnblockTime+0x1>
    12d4:	20 93 36 07 	sts	0x0736, r18	; 0x800736 <xNextTaskUnblockTime>
    12d8:	93 c0       	rjmp	.+294    	; 0x1400 <xTaskIncrementTick+0x1dc>
    12da:	a2 85       	ldd	r26, Z+10	; 0x0a
    12dc:	b3 85       	ldd	r27, Z+11	; 0x0b
    12de:	24 81       	ldd	r18, Z+4	; 0x04
    12e0:	35 81       	ldd	r19, Z+5	; 0x05
    12e2:	46 81       	ldd	r20, Z+6	; 0x06
    12e4:	57 81       	ldd	r21, Z+7	; 0x07
    12e6:	e9 01       	movw	r28, r18
    12e8:	5d 83       	std	Y+5, r21	; 0x05
    12ea:	4c 83       	std	Y+4, r20	; 0x04
    12ec:	26 81       	ldd	r18, Z+6	; 0x06
    12ee:	37 81       	ldd	r19, Z+7	; 0x07
    12f0:	44 81       	ldd	r20, Z+4	; 0x04
    12f2:	55 81       	ldd	r21, Z+5	; 0x05
    12f4:	e9 01       	movw	r28, r18
    12f6:	5b 83       	std	Y+3, r21	; 0x03
    12f8:	4a 83       	std	Y+2, r20	; 0x02
    12fa:	11 96       	adiw	r26, 0x01	; 1
    12fc:	2d 91       	ld	r18, X+
    12fe:	3c 91       	ld	r19, X
    1300:	12 97       	sbiw	r26, 0x02	; 2
    1302:	af 01       	movw	r20, r30
    1304:	4e 5f       	subi	r20, 0xFE	; 254
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	24 17       	cp	r18, r20
    130a:	35 07       	cpc	r19, r21
    130c:	31 f4       	brne	.+12     	; 0x131a <xTaskIncrementTick+0xf6>
    130e:	26 81       	ldd	r18, Z+6	; 0x06
    1310:	37 81       	ldd	r19, Z+7	; 0x07
    1312:	12 96       	adiw	r26, 0x02	; 2
    1314:	3c 93       	st	X, r19
    1316:	2e 93       	st	-X, r18
    1318:	11 97       	sbiw	r26, 0x01	; 1
    131a:	13 86       	std	Z+11, r1	; 0x0b
    131c:	12 86       	std	Z+10, r1	; 0x0a
    131e:	9c 91       	ld	r25, X
    1320:	91 50       	subi	r25, 0x01	; 1
    1322:	9c 93       	st	X, r25
    1324:	a4 89       	ldd	r26, Z+20	; 0x14
    1326:	b5 89       	ldd	r27, Z+21	; 0x15
    1328:	10 97       	sbiw	r26, 0x00	; 0
    132a:	19 f1       	breq	.+70     	; 0x1372 <xTaskIncrementTick+0x14e>
    132c:	26 85       	ldd	r18, Z+14	; 0x0e
    132e:	37 85       	ldd	r19, Z+15	; 0x0f
    1330:	60 89       	ldd	r22, Z+16	; 0x10
    1332:	71 89       	ldd	r23, Z+17	; 0x11
    1334:	e9 01       	movw	r28, r18
    1336:	7d 83       	std	Y+5, r23	; 0x05
    1338:	6c 83       	std	Y+4, r22	; 0x04
    133a:	20 89       	ldd	r18, Z+16	; 0x10
    133c:	31 89       	ldd	r19, Z+17	; 0x11
    133e:	66 85       	ldd	r22, Z+14	; 0x0e
    1340:	77 85       	ldd	r23, Z+15	; 0x0f
    1342:	e9 01       	movw	r28, r18
    1344:	7b 83       	std	Y+3, r23	; 0x03
    1346:	6a 83       	std	Y+2, r22	; 0x02
    1348:	11 96       	adiw	r26, 0x01	; 1
    134a:	6d 91       	ld	r22, X+
    134c:	7c 91       	ld	r23, X
    134e:	12 97       	sbiw	r26, 0x02	; 2
    1350:	9f 01       	movw	r18, r30
    1352:	24 5f       	subi	r18, 0xF4	; 244
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	62 17       	cp	r22, r18
    1358:	73 07       	cpc	r23, r19
    135a:	31 f4       	brne	.+12     	; 0x1368 <xTaskIncrementTick+0x144>
    135c:	20 89       	ldd	r18, Z+16	; 0x10
    135e:	31 89       	ldd	r19, Z+17	; 0x11
    1360:	12 96       	adiw	r26, 0x02	; 2
    1362:	3c 93       	st	X, r19
    1364:	2e 93       	st	-X, r18
    1366:	11 97       	sbiw	r26, 0x01	; 1
    1368:	15 8a       	std	Z+21, r1	; 0x15
    136a:	14 8a       	std	Z+20, r1	; 0x14
    136c:	9c 91       	ld	r25, X
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	9c 93       	st	X, r25
    1372:	26 89       	ldd	r18, Z+22	; 0x16
    1374:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <uxTopReadyPriority>
    1378:	92 17       	cp	r25, r18
    137a:	10 f4       	brcc	.+4      	; 0x1380 <xTaskIncrementTick+0x15c>
    137c:	20 93 3e 07 	sts	0x073E, r18	; 0x80073e <uxTopReadyPriority>
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	d9 01       	movw	r26, r18
    1384:	aa 0f       	add	r26, r26
    1386:	bb 1f       	adc	r27, r27
    1388:	aa 0f       	add	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	aa 0f       	add	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	2a 0f       	add	r18, r26
    1392:	3b 1f       	adc	r19, r27
    1394:	d9 01       	movw	r26, r18
    1396:	a5 59       	subi	r26, 0x95	; 149
    1398:	b8 4f       	sbci	r27, 0xF8	; 248
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	0d 90       	ld	r0, X+
    139e:	bc 91       	ld	r27, X
    13a0:	a0 2d       	mov	r26, r0
    13a2:	b5 83       	std	Z+5, r27	; 0x05
    13a4:	a4 83       	std	Z+4, r26	; 0x04
    13a6:	14 96       	adiw	r26, 0x04	; 4
    13a8:	2d 91       	ld	r18, X+
    13aa:	3c 91       	ld	r19, X
    13ac:	15 97       	sbiw	r26, 0x05	; 5
    13ae:	37 83       	std	Z+7, r19	; 0x07
    13b0:	26 83       	std	Z+6, r18	; 0x06
    13b2:	14 96       	adiw	r26, 0x04	; 4
    13b4:	2d 91       	ld	r18, X+
    13b6:	3c 91       	ld	r19, X
    13b8:	15 97       	sbiw	r26, 0x05	; 5
    13ba:	e9 01       	movw	r28, r18
    13bc:	5b 83       	std	Y+3, r21	; 0x03
    13be:	4a 83       	std	Y+2, r20	; 0x02
    13c0:	15 96       	adiw	r26, 0x05	; 5
    13c2:	5c 93       	st	X, r21
    13c4:	4e 93       	st	-X, r20
    13c6:	14 97       	sbiw	r26, 0x04	; 4
    13c8:	a6 89       	ldd	r26, Z+22	; 0x16
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	9d 01       	movw	r18, r26
    13ce:	22 0f       	add	r18, r18
    13d0:	33 1f       	adc	r19, r19
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	a2 0f       	add	r26, r18
    13dc:	b3 1f       	adc	r27, r19
    13de:	a5 59       	subi	r26, 0x95	; 149
    13e0:	b8 4f       	sbci	r27, 0xF8	; 248
    13e2:	b3 87       	std	Z+11, r27	; 0x0b
    13e4:	a2 87       	std	Z+10, r26	; 0x0a
    13e6:	9c 91       	ld	r25, X
    13e8:	9f 5f       	subi	r25, 0xFF	; 255
    13ea:	9c 93       	st	X, r25
    13ec:	26 89       	ldd	r18, Z+22	; 0x16
    13ee:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <pxCurrentTCB>
    13f2:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    13f6:	96 89       	ldd	r25, Z+22	; 0x16
    13f8:	29 17       	cp	r18, r25
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <xTaskIncrementTick+0x1da>
    13fc:	49 cf       	rjmp	.-366    	; 0x1290 <xTaskIncrementTick+0x6c>
    13fe:	4b cf       	rjmp	.-362    	; 0x1296 <xTaskIncrementTick+0x72>
    1400:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <pxCurrentTCB>
    1404:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    1408:	26 89       	ldd	r18, Z+22	; 0x16
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	f9 01       	movw	r30, r18
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	2e 0f       	add	r18, r30
    141c:	3f 1f       	adc	r19, r31
    141e:	f9 01       	movw	r30, r18
    1420:	e5 59       	subi	r30, 0x95	; 149
    1422:	f8 4f       	sbci	r31, 0xF8	; 248
    1424:	90 81       	ld	r25, Z
    1426:	92 30       	cpi	r25, 0x02	; 2
    1428:	08 f0       	brcs	.+2      	; 0x142c <xTaskIncrementTick+0x208>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <xYieldPending>
    1430:	91 11       	cpse	r25, r1
    1432:	0c c0       	rjmp	.+24     	; 0x144c <xTaskIncrementTick+0x228>
    1434:	0c c0       	rjmp	.+24     	; 0x144e <xTaskIncrementTick+0x22a>
    1436:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xPendedTicks>
    143a:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <xPendedTicks+0x1>
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <xPendedTicks+0x1>
    1444:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <xPendedTicks>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	01 c0       	rjmp	.+2      	; 0x144e <xTaskIncrementTick+0x22a>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <xTaskResumeAll>:
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	0f 92       	push	r0
    1462:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxSchedulerSuspended>
    1466:	81 50       	subi	r24, 0x01	; 1
    1468:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <uxSchedulerSuspended>
    146c:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxSchedulerSuspended>
    1470:	81 11       	cpse	r24, r1
    1472:	bf c0       	rjmp	.+382    	; 0x15f2 <xTaskResumeAll+0x19a>
    1474:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <uxCurrentNumberOfTasks>
    1478:	81 11       	cpse	r24, r1
    147a:	96 c0       	rjmp	.+300    	; 0x15a8 <xTaskResumeAll+0x150>
    147c:	bd c0       	rjmp	.+378    	; 0x15f8 <xTaskResumeAll+0x1a0>
    147e:	e0 91 51 07 	lds	r30, 0x0751	; 0x800751 <xPendingReadyList+0x5>
    1482:	f0 91 52 07 	lds	r31, 0x0752	; 0x800752 <xPendingReadyList+0x6>
    1486:	06 80       	ldd	r0, Z+6	; 0x06
    1488:	f7 81       	ldd	r31, Z+7	; 0x07
    148a:	e0 2d       	mov	r30, r0
    148c:	a4 89       	ldd	r26, Z+20	; 0x14
    148e:	b5 89       	ldd	r27, Z+21	; 0x15
    1490:	c6 85       	ldd	r28, Z+14	; 0x0e
    1492:	d7 85       	ldd	r29, Z+15	; 0x0f
    1494:	80 89       	ldd	r24, Z+16	; 0x10
    1496:	91 89       	ldd	r25, Z+17	; 0x11
    1498:	9d 83       	std	Y+5, r25	; 0x05
    149a:	8c 83       	std	Y+4, r24	; 0x04
    149c:	c0 89       	ldd	r28, Z+16	; 0x10
    149e:	d1 89       	ldd	r29, Z+17	; 0x11
    14a0:	86 85       	ldd	r24, Z+14	; 0x0e
    14a2:	97 85       	ldd	r25, Z+15	; 0x0f
    14a4:	9b 83       	std	Y+3, r25	; 0x03
    14a6:	8a 83       	std	Y+2, r24	; 0x02
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	2d 91       	ld	r18, X+
    14ac:	3c 91       	ld	r19, X
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	cf 01       	movw	r24, r30
    14b2:	0c 96       	adiw	r24, 0x0c	; 12
    14b4:	28 17       	cp	r18, r24
    14b6:	39 07       	cpc	r19, r25
    14b8:	31 f4       	brne	.+12     	; 0x14c6 <xTaskResumeAll+0x6e>
    14ba:	80 89       	ldd	r24, Z+16	; 0x10
    14bc:	91 89       	ldd	r25, Z+17	; 0x11
    14be:	12 96       	adiw	r26, 0x02	; 2
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	11 97       	sbiw	r26, 0x01	; 1
    14c6:	15 8a       	std	Z+21, r1	; 0x15
    14c8:	14 8a       	std	Z+20, r1	; 0x14
    14ca:	8c 91       	ld	r24, X
    14cc:	81 50       	subi	r24, 0x01	; 1
    14ce:	8c 93       	st	X, r24
    14d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    14d2:	b3 85       	ldd	r27, Z+11	; 0x0b
    14d4:	c4 81       	ldd	r28, Z+4	; 0x04
    14d6:	d5 81       	ldd	r29, Z+5	; 0x05
    14d8:	86 81       	ldd	r24, Z+6	; 0x06
    14da:	97 81       	ldd	r25, Z+7	; 0x07
    14dc:	9d 83       	std	Y+5, r25	; 0x05
    14de:	8c 83       	std	Y+4, r24	; 0x04
    14e0:	c6 81       	ldd	r28, Z+6	; 0x06
    14e2:	d7 81       	ldd	r29, Z+7	; 0x07
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	95 81       	ldd	r25, Z+5	; 0x05
    14e8:	9b 83       	std	Y+3, r25	; 0x03
    14ea:	8a 83       	std	Y+2, r24	; 0x02
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	8d 91       	ld	r24, X+
    14f0:	9c 91       	ld	r25, X
    14f2:	12 97       	sbiw	r26, 0x02	; 2
    14f4:	9f 01       	movw	r18, r30
    14f6:	2e 5f       	subi	r18, 0xFE	; 254
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	31 f4       	brne	.+12     	; 0x150c <xTaskResumeAll+0xb4>
    1500:	86 81       	ldd	r24, Z+6	; 0x06
    1502:	97 81       	ldd	r25, Z+7	; 0x07
    1504:	12 96       	adiw	r26, 0x02	; 2
    1506:	9c 93       	st	X, r25
    1508:	8e 93       	st	-X, r24
    150a:	11 97       	sbiw	r26, 0x01	; 1
    150c:	13 86       	std	Z+11, r1	; 0x0b
    150e:	12 86       	std	Z+10, r1	; 0x0a
    1510:	8c 91       	ld	r24, X
    1512:	81 50       	subi	r24, 0x01	; 1
    1514:	8c 93       	st	X, r24
    1516:	86 89       	ldd	r24, Z+22	; 0x16
    1518:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <uxTopReadyPriority>
    151c:	98 17       	cp	r25, r24
    151e:	10 f4       	brcc	.+4      	; 0x1524 <xTaskResumeAll+0xcc>
    1520:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxTopReadyPriority>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	dc 01       	movw	r26, r24
    1528:	aa 0f       	add	r26, r26
    152a:	bb 1f       	adc	r27, r27
    152c:	aa 0f       	add	r26, r26
    152e:	bb 1f       	adc	r27, r27
    1530:	aa 0f       	add	r26, r26
    1532:	bb 1f       	adc	r27, r27
    1534:	8a 0f       	add	r24, r26
    1536:	9b 1f       	adc	r25, r27
    1538:	dc 01       	movw	r26, r24
    153a:	a5 59       	subi	r26, 0x95	; 149
    153c:	b8 4f       	sbci	r27, 0xF8	; 248
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	0d 90       	ld	r0, X+
    1542:	bc 91       	ld	r27, X
    1544:	a0 2d       	mov	r26, r0
    1546:	b5 83       	std	Z+5, r27	; 0x05
    1548:	a4 83       	std	Z+4, r26	; 0x04
    154a:	14 96       	adiw	r26, 0x04	; 4
    154c:	8d 91       	ld	r24, X+
    154e:	9c 91       	ld	r25, X
    1550:	15 97       	sbiw	r26, 0x05	; 5
    1552:	97 83       	std	Z+7, r25	; 0x07
    1554:	86 83       	std	Z+6, r24	; 0x06
    1556:	14 96       	adiw	r26, 0x04	; 4
    1558:	cd 91       	ld	r28, X+
    155a:	dc 91       	ld	r29, X
    155c:	15 97       	sbiw	r26, 0x05	; 5
    155e:	3b 83       	std	Y+3, r19	; 0x03
    1560:	2a 83       	std	Y+2, r18	; 0x02
    1562:	15 96       	adiw	r26, 0x05	; 5
    1564:	3c 93       	st	X, r19
    1566:	2e 93       	st	-X, r18
    1568:	14 97       	sbiw	r26, 0x04	; 4
    156a:	a6 89       	ldd	r26, Z+22	; 0x16
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	cd 01       	movw	r24, r26
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	a8 0f       	add	r26, r24
    157e:	b9 1f       	adc	r27, r25
    1580:	a5 59       	subi	r26, 0x95	; 149
    1582:	b8 4f       	sbci	r27, 0xF8	; 248
    1584:	b3 87       	std	Z+11, r27	; 0x0b
    1586:	a2 87       	std	Z+10, r26	; 0x0a
    1588:	8c 91       	ld	r24, X
    158a:	8f 5f       	subi	r24, 0xFF	; 255
    158c:	8c 93       	st	X, r24
    158e:	96 89       	ldd	r25, Z+22	; 0x16
    1590:	a0 91 8f 07 	lds	r26, 0x078F	; 0x80078f <pxCurrentTCB>
    1594:	b0 91 90 07 	lds	r27, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    1598:	56 96       	adiw	r26, 0x16	; 22
    159a:	8c 91       	ld	r24, X
    159c:	98 17       	cp	r25, r24
    159e:	30 f0       	brcs	.+12     	; 0x15ac <xTaskResumeAll+0x154>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xYieldPending>
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <xTaskResumeAll+0x154>
    15a8:	e0 e0       	ldi	r30, 0x00	; 0
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <xPendingReadyList>
    15b0:	81 11       	cpse	r24, r1
    15b2:	65 cf       	rjmp	.-310    	; 0x147e <xTaskResumeAll+0x26>
    15b4:	ef 2b       	or	r30, r31
    15b6:	11 f0       	breq	.+4      	; 0x15bc <xTaskResumeAll+0x164>
    15b8:	0e 94 c2 06 	call	0xd84	; 0xd84 <prvResetNextTaskUnblockTime>
    15bc:	c0 91 3b 07 	lds	r28, 0x073B	; 0x80073b <xPendedTicks>
    15c0:	d0 91 3c 07 	lds	r29, 0x073C	; 0x80073c <xPendedTicks+0x1>
    15c4:	20 97       	sbiw	r28, 0x00	; 0
    15c6:	69 f0       	breq	.+26     	; 0x15e2 <xTaskResumeAll+0x18a>
    15c8:	0e 94 12 09 	call	0x1224	; 0x1224 <xTaskIncrementTick>
    15cc:	88 23       	and	r24, r24
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <xTaskResumeAll+0x17e>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xYieldPending>
    15d6:	21 97       	sbiw	r28, 0x01	; 1
    15d8:	b9 f7       	brne	.-18     	; 0x15c8 <xTaskResumeAll+0x170>
    15da:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <xPendedTicks+0x1>
    15de:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <xPendedTicks>
    15e2:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xYieldPending>
    15e6:	88 23       	and	r24, r24
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <xTaskResumeAll+0x19e>
    15ea:	0e 94 36 02 	call	0x46c	; 0x46c <vPortYield>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <xTaskResumeAll+0x1a0>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <xTaskResumeAll+0x1a0>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <vTaskSwitchContext>:
    1602:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxSchedulerSuspended>
    1606:	88 23       	and	r24, r24
    1608:	21 f0       	breq	.+8      	; 0x1612 <vTaskSwitchContext+0x10>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xYieldPending>
    1610:	08 95       	ret
    1612:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <xYieldPending>
    1616:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <uxTopReadyPriority>
    161a:	01 c0       	rjmp	.+2      	; 0x161e <vTaskSwitchContext+0x1c>
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	82 2f       	mov	r24, r18
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	fc 01       	movw	r30, r24
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	e5 59       	subi	r30, 0x95	; 149
    1636:	f8 4f       	sbci	r31, 0xF8	; 248
    1638:	30 81       	ld	r19, Z
    163a:	33 23       	and	r19, r19
    163c:	79 f3       	breq	.-34     	; 0x161c <vTaskSwitchContext+0x1a>
    163e:	ac 01       	movw	r20, r24
    1640:	44 0f       	add	r20, r20
    1642:	55 1f       	adc	r21, r21
    1644:	44 0f       	add	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	44 0f       	add	r20, r20
    164a:	55 1f       	adc	r21, r21
    164c:	48 0f       	add	r20, r24
    164e:	59 1f       	adc	r21, r25
    1650:	df 01       	movw	r26, r30
    1652:	01 80       	ldd	r0, Z+1	; 0x01
    1654:	f2 81       	ldd	r31, Z+2	; 0x02
    1656:	e0 2d       	mov	r30, r0
    1658:	02 80       	ldd	r0, Z+2	; 0x02
    165a:	f3 81       	ldd	r31, Z+3	; 0x03
    165c:	e0 2d       	mov	r30, r0
    165e:	12 96       	adiw	r26, 0x02	; 2
    1660:	fc 93       	st	X, r31
    1662:	ee 93       	st	-X, r30
    1664:	11 97       	sbiw	r26, 0x01	; 1
    1666:	42 59       	subi	r20, 0x92	; 146
    1668:	58 4f       	sbci	r21, 0xF8	; 248
    166a:	e4 17       	cp	r30, r20
    166c:	f5 07       	cpc	r31, r21
    166e:	29 f4       	brne	.+10     	; 0x167a <vTaskSwitchContext+0x78>
    1670:	42 81       	ldd	r20, Z+2	; 0x02
    1672:	53 81       	ldd	r21, Z+3	; 0x03
    1674:	fd 01       	movw	r30, r26
    1676:	52 83       	std	Z+2, r21	; 0x02
    1678:	41 83       	std	Z+1, r20	; 0x01
    167a:	fc 01       	movw	r30, r24
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ee 0f       	add	r30, r30
    1686:	ff 1f       	adc	r31, r31
    1688:	8e 0f       	add	r24, r30
    168a:	9f 1f       	adc	r25, r31
    168c:	fc 01       	movw	r30, r24
    168e:	e5 59       	subi	r30, 0x95	; 149
    1690:	f8 4f       	sbci	r31, 0xF8	; 248
    1692:	01 80       	ldd	r0, Z+1	; 0x01
    1694:	f2 81       	ldd	r31, Z+2	; 0x02
    1696:	e0 2d       	mov	r30, r0
    1698:	86 81       	ldd	r24, Z+6	; 0x06
    169a:	97 81       	ldd	r25, Z+7	; 0x07
    169c:	90 93 90 07 	sts	0x0790, r25	; 0x800790 <pxCurrentTCB+0x1>
    16a0:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <pxCurrentTCB>
    16a4:	20 93 3e 07 	sts	0x073E, r18	; 0x80073e <uxTopReadyPriority>
    16a8:	08 95       	ret

000016aa <vTaskPlaceOnEventList>:
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	eb 01       	movw	r28, r22
    16b0:	60 91 8f 07 	lds	r22, 0x078F	; 0x80078f <pxCurrentTCB>
    16b4:	70 91 90 07 	lds	r23, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    16b8:	64 5f       	subi	r22, 0xF4	; 244
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <vListInsert>
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	ce 01       	movw	r24, r28
    16c4:	0e 94 48 08 	call	0x1090	; 0x1090 <prvAddCurrentTaskToDelayedList>
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <xTaskRemoveFromEventList>:
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	dc 01       	movw	r26, r24
    16d4:	15 96       	adiw	r26, 0x05	; 5
    16d6:	ed 91       	ld	r30, X+
    16d8:	fc 91       	ld	r31, X
    16da:	16 97       	sbiw	r26, 0x06	; 6
    16dc:	06 80       	ldd	r0, Z+6	; 0x06
    16de:	f7 81       	ldd	r31, Z+7	; 0x07
    16e0:	e0 2d       	mov	r30, r0
    16e2:	a4 89       	ldd	r26, Z+20	; 0x14
    16e4:	b5 89       	ldd	r27, Z+21	; 0x15
    16e6:	c6 85       	ldd	r28, Z+14	; 0x0e
    16e8:	d7 85       	ldd	r29, Z+15	; 0x0f
    16ea:	80 89       	ldd	r24, Z+16	; 0x10
    16ec:	91 89       	ldd	r25, Z+17	; 0x11
    16ee:	9d 83       	std	Y+5, r25	; 0x05
    16f0:	8c 83       	std	Y+4, r24	; 0x04
    16f2:	c0 89       	ldd	r28, Z+16	; 0x10
    16f4:	d1 89       	ldd	r29, Z+17	; 0x11
    16f6:	86 85       	ldd	r24, Z+14	; 0x0e
    16f8:	97 85       	ldd	r25, Z+15	; 0x0f
    16fa:	9b 83       	std	Y+3, r25	; 0x03
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	11 96       	adiw	r26, 0x01	; 1
    1700:	8d 91       	ld	r24, X+
    1702:	9c 91       	ld	r25, X
    1704:	12 97       	sbiw	r26, 0x02	; 2
    1706:	9f 01       	movw	r18, r30
    1708:	24 5f       	subi	r18, 0xF4	; 244
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	31 f4       	brne	.+12     	; 0x171e <xTaskRemoveFromEventList+0x50>
    1712:	80 89       	ldd	r24, Z+16	; 0x10
    1714:	91 89       	ldd	r25, Z+17	; 0x11
    1716:	12 96       	adiw	r26, 0x02	; 2
    1718:	9c 93       	st	X, r25
    171a:	8e 93       	st	-X, r24
    171c:	11 97       	sbiw	r26, 0x01	; 1
    171e:	15 8a       	std	Z+21, r1	; 0x15
    1720:	14 8a       	std	Z+20, r1	; 0x14
    1722:	8c 91       	ld	r24, X
    1724:	81 50       	subi	r24, 0x01	; 1
    1726:	8c 93       	st	X, r24
    1728:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <uxSchedulerSuspended>
    172c:	81 11       	cpse	r24, r1
    172e:	60 c0       	rjmp	.+192    	; 0x17f0 <xTaskRemoveFromEventList+0x122>
    1730:	a2 85       	ldd	r26, Z+10	; 0x0a
    1732:	b3 85       	ldd	r27, Z+11	; 0x0b
    1734:	c4 81       	ldd	r28, Z+4	; 0x04
    1736:	d5 81       	ldd	r29, Z+5	; 0x05
    1738:	86 81       	ldd	r24, Z+6	; 0x06
    173a:	97 81       	ldd	r25, Z+7	; 0x07
    173c:	9d 83       	std	Y+5, r25	; 0x05
    173e:	8c 83       	std	Y+4, r24	; 0x04
    1740:	c6 81       	ldd	r28, Z+6	; 0x06
    1742:	d7 81       	ldd	r29, Z+7	; 0x07
    1744:	84 81       	ldd	r24, Z+4	; 0x04
    1746:	95 81       	ldd	r25, Z+5	; 0x05
    1748:	9b 83       	std	Y+3, r25	; 0x03
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	8d 91       	ld	r24, X+
    1750:	9c 91       	ld	r25, X
    1752:	12 97       	sbiw	r26, 0x02	; 2
    1754:	9f 01       	movw	r18, r30
    1756:	2e 5f       	subi	r18, 0xFE	; 254
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	82 17       	cp	r24, r18
    175c:	93 07       	cpc	r25, r19
    175e:	31 f4       	brne	.+12     	; 0x176c <xTaskRemoveFromEventList+0x9e>
    1760:	86 81       	ldd	r24, Z+6	; 0x06
    1762:	97 81       	ldd	r25, Z+7	; 0x07
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	9c 93       	st	X, r25
    1768:	8e 93       	st	-X, r24
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	13 86       	std	Z+11, r1	; 0x0b
    176e:	12 86       	std	Z+10, r1	; 0x0a
    1770:	8c 91       	ld	r24, X
    1772:	81 50       	subi	r24, 0x01	; 1
    1774:	8c 93       	st	X, r24
    1776:	86 89       	ldd	r24, Z+22	; 0x16
    1778:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <uxTopReadyPriority>
    177c:	98 17       	cp	r25, r24
    177e:	10 f4       	brcc	.+4      	; 0x1784 <xTaskRemoveFromEventList+0xb6>
    1780:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <uxTopReadyPriority>
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	dc 01       	movw	r26, r24
    1788:	aa 0f       	add	r26, r26
    178a:	bb 1f       	adc	r27, r27
    178c:	aa 0f       	add	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	aa 0f       	add	r26, r26
    1792:	bb 1f       	adc	r27, r27
    1794:	8a 0f       	add	r24, r26
    1796:	9b 1f       	adc	r25, r27
    1798:	dc 01       	movw	r26, r24
    179a:	a5 59       	subi	r26, 0x95	; 149
    179c:	b8 4f       	sbci	r27, 0xF8	; 248
    179e:	11 96       	adiw	r26, 0x01	; 1
    17a0:	0d 90       	ld	r0, X+
    17a2:	bc 91       	ld	r27, X
    17a4:	a0 2d       	mov	r26, r0
    17a6:	b5 83       	std	Z+5, r27	; 0x05
    17a8:	a4 83       	std	Z+4, r26	; 0x04
    17aa:	14 96       	adiw	r26, 0x04	; 4
    17ac:	8d 91       	ld	r24, X+
    17ae:	9c 91       	ld	r25, X
    17b0:	15 97       	sbiw	r26, 0x05	; 5
    17b2:	97 83       	std	Z+7, r25	; 0x07
    17b4:	86 83       	std	Z+6, r24	; 0x06
    17b6:	14 96       	adiw	r26, 0x04	; 4
    17b8:	cd 91       	ld	r28, X+
    17ba:	dc 91       	ld	r29, X
    17bc:	15 97       	sbiw	r26, 0x05	; 5
    17be:	3b 83       	std	Y+3, r19	; 0x03
    17c0:	2a 83       	std	Y+2, r18	; 0x02
    17c2:	15 96       	adiw	r26, 0x05	; 5
    17c4:	3c 93       	st	X, r19
    17c6:	2e 93       	st	-X, r18
    17c8:	14 97       	sbiw	r26, 0x04	; 4
    17ca:	a6 89       	ldd	r26, Z+22	; 0x16
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	cd 01       	movw	r24, r26
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	a8 0f       	add	r26, r24
    17de:	b9 1f       	adc	r27, r25
    17e0:	a5 59       	subi	r26, 0x95	; 149
    17e2:	b8 4f       	sbci	r27, 0xF8	; 248
    17e4:	b3 87       	std	Z+11, r27	; 0x0b
    17e6:	a2 87       	std	Z+10, r26	; 0x0a
    17e8:	8c 91       	ld	r24, X
    17ea:	8f 5f       	subi	r24, 0xFF	; 255
    17ec:	8c 93       	st	X, r24
    17ee:	1c c0       	rjmp	.+56     	; 0x1828 <xTaskRemoveFromEventList+0x15a>
    17f0:	4c e4       	ldi	r20, 0x4C	; 76
    17f2:	57 e0       	ldi	r21, 0x07	; 7
    17f4:	da 01       	movw	r26, r20
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	cd 91       	ld	r28, X+
    17fa:	dc 91       	ld	r29, X
    17fc:	12 97       	sbiw	r26, 0x02	; 2
    17fe:	d7 87       	std	Z+15, r29	; 0x0f
    1800:	c6 87       	std	Z+14, r28	; 0x0e
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	91 8b       	std	Z+17, r25	; 0x11
    1808:	80 8b       	std	Z+16, r24	; 0x10
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	dc 01       	movw	r26, r24
    1810:	13 96       	adiw	r26, 0x03	; 3
    1812:	3c 93       	st	X, r19
    1814:	2e 93       	st	-X, r18
    1816:	12 97       	sbiw	r26, 0x02	; 2
    1818:	3d 83       	std	Y+5, r19	; 0x05
    181a:	2c 83       	std	Y+4, r18	; 0x04
    181c:	55 8b       	std	Z+21, r21	; 0x15
    181e:	44 8b       	std	Z+20, r20	; 0x14
    1820:	da 01       	movw	r26, r20
    1822:	8c 91       	ld	r24, X
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	8c 93       	st	X, r24
    1828:	96 89       	ldd	r25, Z+22	; 0x16
    182a:	e0 91 8f 07 	lds	r30, 0x078F	; 0x80078f <pxCurrentTCB>
    182e:	f0 91 90 07 	lds	r31, 0x0790	; 0x800790 <pxCurrentTCB+0x1>
    1832:	86 89       	ldd	r24, Z+22	; 0x16
    1834:	89 17       	cp	r24, r25
    1836:	20 f4       	brcc	.+8      	; 0x1840 <xTaskRemoveFromEventList+0x172>
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xYieldPending>
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <xTaskRemoveFromEventList+0x174>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	08 95       	ret

00001848 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1848:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <xNumOfOverflows>
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1850:	20 91 3f 07 	lds	r18, 0x073F	; 0x80073f <xTickCount>
    1854:	30 91 40 07 	lds	r19, 0x0740	; 0x800740 <xTickCount+0x1>
    1858:	32 83       	std	Z+2, r19	; 0x02
    185a:	21 83       	std	Z+1, r18	; 0x01
    185c:	08 95       	ret

0000185e <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1868:	40 91 3f 07 	lds	r20, 0x073F	; 0x80073f <xTickCount>
    186c:	50 91 40 07 	lds	r21, 0x0740	; 0x800740 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1870:	ec 01       	movw	r28, r24
    1872:	29 81       	ldd	r18, Y+1	; 0x01
    1874:	3a 81       	ldd	r19, Y+2	; 0x02
    1876:	da 01       	movw	r26, r20
    1878:	a2 1b       	sub	r26, r18
    187a:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    187c:	f8 81       	ld	r31, Y
    187e:	e0 91 39 07 	lds	r30, 0x0739	; 0x800739 <xNumOfOverflows>
    1882:	fe 17       	cp	r31, r30
    1884:	41 f0       	breq	.+16     	; 0x1896 <xTaskCheckForTimeOut+0x38>
    1886:	42 17       	cp	r20, r18
    1888:	53 07       	cpc	r21, r19
    188a:	28 f0       	brcs	.+10     	; 0x1896 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    188c:	fb 01       	movw	r30, r22
    188e:	11 82       	std	Z+1, r1	; 0x01
    1890:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1892:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1894:	11 c0       	rjmp	.+34     	; 0x18b8 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1896:	eb 01       	movw	r28, r22
    1898:	28 81       	ld	r18, Y
    189a:	39 81       	ldd	r19, Y+1	; 0x01
    189c:	a2 17       	cp	r26, r18
    189e:	b3 07       	cpc	r27, r19
    18a0:	40 f4       	brcc	.+16     	; 0x18b2 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    18a2:	2a 1b       	sub	r18, r26
    18a4:	3b 0b       	sbc	r19, r27
    18a6:	39 83       	std	Y+1, r19	; 0x01
    18a8:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    18aa:	0e 94 24 0c 	call	0x1848	; 0x1848 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xYieldPending>
    18c8:	08 95       	ret

000018ca <task2>:
	 
	 
 }

void task2(void)
{
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	62 97       	sbiw	r28, 0x12	; 18
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
	leds  pnlds[] ={green1,white,red,blue,green2,yellow};
    18de:	86 e0       	ldi	r24, 0x06	; 6
    18e0:	e3 e0       	ldi	r30, 0x03	; 3
    18e2:	f1 e0       	ldi	r31, 0x01	; 1
    18e4:	de 01       	movw	r26, r28
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	01 90       	ld	r0, Z+
    18ea:	0d 92       	st	X+, r0
    18ec:	8a 95       	dec	r24
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <task2+0x1e>
	char* strld[] ={"green1","white","red","blue","green2","yellow"};
    18f0:	8c e0       	ldi	r24, 0x0C	; 12
    18f2:	e9 e0       	ldi	r30, 0x09	; 9
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	de 01       	movw	r26, r28
    18f8:	17 96       	adiw	r26, 0x07	; 7
    18fa:	01 90       	ld	r0, Z+
    18fc:	0d 92       	st	X+, r0
    18fe:	8a 95       	dec	r24
    1900:	e1 f7       	brne	.-8      	; 0x18fa <task2+0x30>
	uint8_t x=0;
    1902:	f1 2c       	mov	r15, r1
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <task2+0x3e>
		xQueueSend(Qledstr,&strld[x],(TickType_t )1000);
		xQueueSend(Qledpin,&pnlds[x],(TickType_t )1000);
		x++;
		if (x>5)
		{
			x=0;
    1906:	f1 2c       	mov	r15, r1
	char* strld[] ={"green1","white","red","blue","green2","yellow"};
	uint8_t x=0;

  while (1)
  {
	if (read(BUTTON)==1)
    1908:	84 e1       	ldi	r24, 0x14	; 20
    190a:	0e 94 17 01 	call	0x22e	; 0x22e <read>
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	d9 f7       	brne	.-10     	; 0x1908 <task2+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	82 e5       	ldi	r24, 0x52	; 82
    1916:	97 e0       	ldi	r25, 0x07	; 7
    1918:	21 50       	subi	r18, 0x01	; 1
    191a:	80 40       	sbci	r24, 0x00	; 0
    191c:	90 40       	sbci	r25, 0x00	; 0
    191e:	e1 f7       	brne	.-8      	; 0x1918 <task2+0x4e>
    1920:	00 c0       	rjmp	.+0      	; 0x1922 <task2+0x58>
    1922:	00 00       	nop
	{
		_delay_ms(150);
		
		xQueueSend(Qledstr,&strld[x],(TickType_t )1000);
    1924:	0f 2d       	mov	r16, r15
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	b8 01       	movw	r22, r16
    192a:	66 0f       	add	r22, r22
    192c:	77 1f       	adc	r23, r23
    192e:	87 e0       	ldi	r24, 0x07	; 7
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	8c 0f       	add	r24, r28
    1934:	9d 1f       	adc	r25, r29
    1936:	68 0f       	add	r22, r24
    1938:	79 1f       	adc	r23, r25
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	48 ee       	ldi	r20, 0xE8	; 232
    193e:	53 e0       	ldi	r21, 0x03	; 3
    1940:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <Qledstr>
    1944:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <Qledstr+0x1>
    1948:	0e 94 a1 05 	call	0xb42	; 0xb42 <xQueueGenericSend>
		xQueueSend(Qledpin,&pnlds[x],(TickType_t )1000);
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	6c 0f       	add	r22, r28
    1952:	7d 1f       	adc	r23, r29
    1954:	60 0f       	add	r22, r16
    1956:	71 1f       	adc	r23, r17
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	48 ee       	ldi	r20, 0xE8	; 232
    195c:	53 e0       	ldi	r21, 0x03	; 3
    195e:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <Qledpin>
    1962:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <Qledpin+0x1>
    1966:	0e 94 a1 05 	call	0xb42	; 0xb42 <xQueueGenericSend>
		x++;
    196a:	f3 94       	inc	r15
		if (x>5)
    196c:	95 e0       	ldi	r25, 0x05	; 5
    196e:	9f 15       	cp	r25, r15
    1970:	50 f2       	brcs	.-108    	; 0x1906 <task2+0x3c>
    1972:	ca cf       	rjmp	.-108    	; 0x1908 <task2+0x3e>

00001974 <prints>:
}leds;

xQueueHandle Qledstr,Qledpin;

void prints(char* msg)
{
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	8c 01       	movw	r16, r24
	int i = 0 ;
    197e:	c0 e0       	ldi	r28, 0x00	; 0
    1980:	d0 e0       	ldi	r29, 0x00	; 0
	while(msg[i]!='\0')
    1982:	03 c0       	rjmp	.+6      	; 0x198a <prints+0x16>
	{
		UATR_SEND(msg[i]);
    1984:	0e 94 86 01 	call	0x30c	; 0x30c <UATR_SEND>
		i++;
    1988:	21 96       	adiw	r28, 0x01	; 1
xQueueHandle Qledstr,Qledpin;

void prints(char* msg)
{
	int i = 0 ;
	while(msg[i]!='\0')
    198a:	f8 01       	movw	r30, r16
    198c:	ec 0f       	add	r30, r28
    198e:	fd 1f       	adc	r31, r29
    1990:	80 81       	ld	r24, Z
    1992:	81 11       	cpse	r24, r1
    1994:	f7 cf       	rjmp	.-18     	; 0x1984 <prints+0x10>
	{
		UATR_SEND(msg[i]);
		i++;
	}
	UATR_SEND('\n');
    1996:	8a e0       	ldi	r24, 0x0A	; 10
    1998:	0e 94 86 01 	call	0x30c	; 0x30c <UATR_SEND>
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <task1>:

	}
  
}
void task1(void)
{
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <task1+0x6>
    19ac:	1f 92       	push	r1
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	 leds ll; char* ls ; 
	
	
	while(1)
	{
	   xQueueReceive(Qledpin,&ll,(TickType_t)1);
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	be 01       	movw	r22, r28
    19b8:	6f 5f       	subi	r22, 0xFF	; 255
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <Qledpin>
    19c0:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <Qledpin+0x1>
    19c4:	0e 94 33 06 	call	0xc66	; 0xc66 <xQueueReceive>
	if (xQueueReceive(Qledstr,&ls,(TickType_t)1))
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	be 01       	movw	r22, r28
    19ce:	6e 5f       	subi	r22, 0xFE	; 254
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <Qledstr>
    19d6:	90 91 94 07 	lds	r25, 0x0794	; 0x800794 <Qledstr+0x1>
    19da:	0e 94 33 06 	call	0xc66	; 0xc66 <xQueueReceive>
    19de:	88 23       	and	r24, r24
    19e0:	21 f0       	breq	.+8      	; 0x19ea <task1+0x44>
	{	
		prints(ls);
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <prints>
	}
	 
	   PORTD = 0 ;
    19ea:	1b b8       	out	0x0b, r1	; 11
	   out(ll,'h');
    19ec:	68 e6       	ldi	r22, 0x68	; 104
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
    19f4:	2f ef       	ldi	r18, 0xFF	; 255
    19f6:	89 e6       	ldi	r24, 0x69	; 105
    19f8:	98 e1       	ldi	r25, 0x18	; 24
    19fa:	21 50       	subi	r18, 0x01	; 1
    19fc:	80 40       	sbci	r24, 0x00	; 0
    19fe:	90 40       	sbci	r25, 0x00	; 0
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <task1+0x54>
    1a02:	00 c0       	rjmp	.+0      	; 0x1a04 <task1+0x5e>
    1a04:	00 00       	nop
	   _delay_ms(500);
	   out(ll,'l');
    1a06:	6c e6       	ldi	r22, 0x6C	; 108
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
    1a0e:	2f ef       	ldi	r18, 0xFF	; 255
    1a10:	89 e6       	ldi	r24, 0x69	; 105
    1a12:	98 e1       	ldi	r25, 0x18	; 24
    1a14:	21 50       	subi	r18, 0x01	; 1
    1a16:	80 40       	sbci	r24, 0x00	; 0
    1a18:	90 40       	sbci	r25, 0x00	; 0
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <task1+0x6e>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <task1+0x78>
    1a1e:	00 00       	nop
    1a20:	c8 cf       	rjmp	.-112    	; 0x19b2 <task1+0xc>

00001a22 <init>:
}

 
 void init()
  {
	 inp(B0);
    1a22:	84 e1       	ldi	r24, 0x14	; 20
    1a24:	0e 94 c5 00 	call	0x18a	; 0x18a <inp>
	UART_init();
    1a28:	0e 94 76 01 	call	0x2ec	; 0x2ec <UART_init>
    1a2c:	08 95       	ret

00001a2e <main>:
	   _delay_ms(500);
	}
}

int main(void)
{
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <main+0xc>
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <main+0xe>
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    init();
    1a40:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <init>
			
	Qledstr =xQueueCreate(5,sizeof(char*));
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	85 e0       	ldi	r24, 0x05	; 5
    1a4a:	0e 94 60 05 	call	0xac0	; 0xac0 <xQueueGenericCreate>
    1a4e:	90 93 94 07 	sts	0x0794, r25	; 0x800794 <Qledstr+0x1>
    1a52:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <Qledstr>
    Qledpin =xQueueCreate(5,sizeof(uint8_t));
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	85 e0       	ldi	r24, 0x05	; 5
    1a5c:	0e 94 60 05 	call	0xac0	; 0xac0 <xQueueGenericCreate>
    1a60:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <Qledpin+0x1>
    1a64:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <Qledpin>
	TaskHandle_t task1_h,task2_h;
	
	xTaskCreate(task1,"process",150,NULL,1,&task1_h);
    1a68:	ce 01       	movw	r24, r28
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	46 e9       	ldi	r20, 0x96	; 150
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	6e e3       	ldi	r22, 0x3E	; 62
    1a7a:	71 e0       	ldi	r23, 0x01	; 1
    1a7c:	83 ed       	ldi	r24, 0xD3	; 211
    1a7e:	9c e0       	ldi	r25, 0x0C	; 12
    1a80:	0e 94 8c 08 	call	0x1118	; 0x1118 <xTaskCreate>
	xTaskCreate(task2,"handler",150,NULL,1,&task2_h);
    1a84:	ce 01       	movw	r24, r28
    1a86:	03 96       	adiw	r24, 0x03	; 3
    1a88:	7c 01       	movw	r14, r24
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	46 e9       	ldi	r20, 0x96	; 150
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	66 e4       	ldi	r22, 0x46	; 70
    1a94:	71 e0       	ldi	r23, 0x01	; 1
    1a96:	85 e6       	ldi	r24, 0x65	; 101
    1a98:	9c e0       	ldi	r25, 0x0C	; 12
    1a9a:	0e 94 8c 08 	call	0x1118	; 0x1118 <xTaskCreate>
	
	
	vTaskStartScheduler();
    1a9e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vTaskStartScheduler>
	
	
	
   
}
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	08 95       	ret

00001aba <__udivmodhi4>:
    1aba:	aa 1b       	sub	r26, r26
    1abc:	bb 1b       	sub	r27, r27
    1abe:	51 e1       	ldi	r21, 0x11	; 17
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <__udivmodhi4_ep>

00001ac2 <__udivmodhi4_loop>:
    1ac2:	aa 1f       	adc	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	a6 17       	cp	r26, r22
    1ac8:	b7 07       	cpc	r27, r23
    1aca:	10 f0       	brcs	.+4      	; 0x1ad0 <__udivmodhi4_ep>
    1acc:	a6 1b       	sub	r26, r22
    1ace:	b7 0b       	sbc	r27, r23

00001ad0 <__udivmodhi4_ep>:
    1ad0:	88 1f       	adc	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	5a 95       	dec	r21
    1ad6:	a9 f7       	brne	.-22     	; 0x1ac2 <__udivmodhi4_loop>
    1ad8:	80 95       	com	r24
    1ada:	90 95       	com	r25
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	08 95       	ret

00001ae2 <memcpy>:
    1ae2:	fb 01       	movw	r30, r22
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <memcpy+0xa>
    1ae8:	01 90       	ld	r0, Z+
    1aea:	0d 92       	st	X+, r0
    1aec:	41 50       	subi	r20, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	d8 f7       	brcc	.-10     	; 0x1ae8 <memcpy+0x6>
    1af2:	08 95       	ret

00001af4 <_exit>:
    1af4:	f8 94       	cli

00001af6 <__stop_program>:
    1af6:	ff cf       	rjmp	.-2      	; 0x1af6 <__stop_program>
