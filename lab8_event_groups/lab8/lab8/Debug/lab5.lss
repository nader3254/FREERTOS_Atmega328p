
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001d3e  00001dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064e  00800134  00800134  00001e06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000540e  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120d  00000000  00000000  000076e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033d6  00000000  00000000  000088f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000df0  00000000  00000000  0000bccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001911  00000000  00000000  0000cabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059a5  00000000  00000000  0000e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00013d72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e3       	ldi	r30, 0x3E	; 62
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 33       	cpi	r26, 0x34	; 52
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a4 e3       	ldi	r26, 0x34	; 52
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 38       	cpi	r26, 0x82	; 130
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <main>
      9e:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <inp>:
		if (i>=28&&i<38)//for port C
		{if (i==a1){uint8_t tmp =i-30;DDRC &=~(1<<tmp);PORTC |=(1<<tmp);}}
		if (i>=38&&i<48)//for port D
		{if (i==a1){uint8_t tmp =i-40;DDRD &=~(1<<tmp);PORTD |=(1<<tmp);}}
	}
}
      a6:	2a e0       	ldi	r18, 0x0A	; 10
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	4a c0       	rjmp	.+148    	; 0x140 <inp+0x9a>
      ac:	a9 01       	movw	r20, r18
      ae:	b9 01       	movw	r22, r18
      b0:	62 51       	subi	r22, 0x12	; 18
      b2:	71 09       	sbc	r23, r1
      b4:	6a 30       	cpi	r22, 0x0A	; 10
      b6:	71 05       	cpc	r23, r1
      b8:	90 f4       	brcc	.+36     	; 0xde <inp+0x38>
      ba:	68 2f       	mov	r22, r24
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	26 17       	cp	r18, r22
      c0:	37 07       	cpc	r19, r23
      c2:	69 f4       	brne	.+26     	; 0xde <inp+0x38>
      c4:	ec ee       	ldi	r30, 0xEC	; 236
      c6:	e2 0f       	add	r30, r18
      c8:	94 b1       	in	r25, 0x04	; 4
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <inp+0x2e>
      d0:	66 0f       	add	r22, r22
      d2:	77 1f       	adc	r23, r23
      d4:	ea 95       	dec	r30
      d6:	e2 f7       	brpl	.-8      	; 0xd0 <inp+0x2a>
      d8:	60 95       	com	r22
      da:	69 23       	and	r22, r25
      dc:	64 b9       	out	0x04, r22	; 4
      de:	ba 01       	movw	r22, r20
      e0:	6c 51       	subi	r22, 0x1C	; 28
      e2:	71 09       	sbc	r23, r1
      e4:	6a 30       	cpi	r22, 0x0A	; 10
      e6:	71 05       	cpc	r23, r1
      e8:	90 f4       	brcc	.+36     	; 0x10e <inp+0x68>
      ea:	68 2f       	mov	r22, r24
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	26 17       	cp	r18, r22
      f0:	37 07       	cpc	r19, r23
      f2:	69 f4       	brne	.+26     	; 0x10e <inp+0x68>
      f4:	e2 ee       	ldi	r30, 0xE2	; 226
      f6:	e2 0f       	add	r30, r18
      f8:	97 b1       	in	r25, 0x07	; 7
      fa:	61 e0       	ldi	r22, 0x01	; 1
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <inp+0x5e>
     100:	66 0f       	add	r22, r22
     102:	77 1f       	adc	r23, r23
     104:	ea 95       	dec	r30
     106:	e2 f7       	brpl	.-8      	; 0x100 <inp+0x5a>
     108:	60 95       	com	r22
     10a:	69 23       	and	r22, r25
     10c:	67 b9       	out	0x07, r22	; 7
     10e:	46 52       	subi	r20, 0x26	; 38
     110:	51 09       	sbc	r21, r1
     112:	4a 30       	cpi	r20, 0x0A	; 10
     114:	51 05       	cpc	r21, r1
     116:	90 f4       	brcc	.+36     	; 0x13c <inp+0x96>
     118:	48 2f       	mov	r20, r24
     11a:	50 e0       	ldi	r21, 0x00	; 0
     11c:	24 17       	cp	r18, r20
     11e:	35 07       	cpc	r19, r21
     120:	69 f4       	brne	.+26     	; 0x13c <inp+0x96>
     122:	68 ed       	ldi	r22, 0xD8	; 216
     124:	62 0f       	add	r22, r18
     126:	9a b1       	in	r25, 0x0a	; 10
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	50 e0       	ldi	r21, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <inp+0x8c>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <inp+0x88>
     136:	40 95       	com	r20
     138:	49 23       	and	r20, r25
     13a:	4a b9       	out	0x0a, r20	; 10
     13c:	2f 5f       	subi	r18, 0xFF	; 255
     13e:	3f 4f       	sbci	r19, 0xFF	; 255
     140:	20 33       	cpi	r18, 0x30	; 48
     142:	31 05       	cpc	r19, r1
     144:	0c f4       	brge	.+2      	; 0x148 <inp+0xa2>
     146:	b2 cf       	rjmp	.-156    	; 0xac <inp+0x6>
     148:	08 95       	ret

0000014a <read>:
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
     14a:	2a e0       	ldi	r18, 0x0A	; 10
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	54 c0       	rjmp	.+168    	; 0x1f8 <read+0xae>
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a2){uint8_t tmp =i-10;if ((PINA & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=18&&i<28)//for port B
     150:	a9 01       	movw	r20, r18
     152:	b9 01       	movw	r22, r18
     154:	62 51       	subi	r22, 0x12	; 18
     156:	71 09       	sbc	r23, r1
     158:	6a 30       	cpi	r22, 0x0A	; 10
     15a:	71 05       	cpc	r23, r1
     15c:	a0 f4       	brcc	.+40     	; 0x186 <read+0x3c>
		{if (i==a2){uint8_t tmp =i-20;if ((PINB & (1<<tmp))){return 1;} else{return 0;}}}
     15e:	68 2f       	mov	r22, r24
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	26 17       	cp	r18, r22
     164:	37 07       	cpc	r19, r23
     166:	79 f4       	brne	.+30     	; 0x186 <read+0x3c>
     168:	24 51       	subi	r18, 0x14	; 20
     16a:	83 b1       	in	r24, 0x03	; 3
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	ac 01       	movw	r20, r24
     170:	02 c0       	rjmp	.+4      	; 0x176 <read+0x2c>
     172:	55 95       	asr	r21
     174:	47 95       	ror	r20
     176:	2a 95       	dec	r18
     178:	e2 f7       	brpl	.-8      	; 0x172 <read+0x28>
     17a:	ca 01       	movw	r24, r20
     17c:	81 70       	andi	r24, 0x01	; 1
     17e:	99 27       	eor	r25, r25
     180:	40 fd       	sbrc	r20, 0
     182:	3f c0       	rjmp	.+126    	; 0x202 <read+0xb8>
     184:	08 95       	ret
		if (i>=28&&i<38)//for port C
     186:	ba 01       	movw	r22, r20
     188:	6c 51       	subi	r22, 0x1C	; 28
     18a:	71 09       	sbc	r23, r1
     18c:	6a 30       	cpi	r22, 0x0A	; 10
     18e:	71 05       	cpc	r23, r1
     190:	b0 f4       	brcc	.+44     	; 0x1be <read+0x74>
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
     192:	68 2f       	mov	r22, r24
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	26 17       	cp	r18, r22
     198:	37 07       	cpc	r19, r23
     19a:	89 f4       	brne	.+34     	; 0x1be <read+0x74>
     19c:	2e 51       	subi	r18, 0x1E	; 30
     19e:	86 b1       	in	r24, 0x06	; 6
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	ac 01       	movw	r20, r24
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <read+0x60>
     1a6:	55 95       	asr	r21
     1a8:	47 95       	ror	r20
     1aa:	2a 95       	dec	r18
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <read+0x5c>
     1ae:	ca 01       	movw	r24, r20
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	99 27       	eor	r25, r25
     1b4:	40 ff       	sbrs	r20, 0
     1b6:	27 c0       	rjmp	.+78     	; 0x206 <read+0xbc>
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	08 95       	ret
		if (i>=38&&i<48)//for port D
     1be:	46 52       	subi	r20, 0x26	; 38
     1c0:	51 09       	sbc	r21, r1
     1c2:	4a 30       	cpi	r20, 0x0A	; 10
     1c4:	51 05       	cpc	r21, r1
     1c6:	b0 f4       	brcc	.+44     	; 0x1f4 <read+0xaa>
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
     1c8:	48 2f       	mov	r20, r24
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	24 17       	cp	r18, r20
     1ce:	35 07       	cpc	r19, r21
     1d0:	89 f4       	brne	.+34     	; 0x1f4 <read+0xaa>
     1d2:	28 52       	subi	r18, 0x28	; 40
     1d4:	89 b1       	in	r24, 0x09	; 9
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	ac 01       	movw	r20, r24
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <read+0x96>
     1dc:	55 95       	asr	r21
     1de:	47 95       	ror	r20
     1e0:	2a 95       	dec	r18
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <read+0x92>
     1e4:	ca 01       	movw	r24, r20
     1e6:	81 70       	andi	r24, 0x01	; 1
     1e8:	99 27       	eor	r25, r25
     1ea:	40 ff       	sbrs	r20, 0
     1ec:	0c c0       	rjmp	.+24     	; 0x206 <read+0xbc>
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 95       	ret
		{if (i==a1){uint8_t tmp =i-40;DDRD &=~(1<<tmp);PORTD |=(1<<tmp);}}
	}
}
int read(uint8_t a2)
{
	for (int i=10;i<48;i++)
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	3f 4f       	sbci	r19, 0xFF	; 255
     1f8:	20 33       	cpi	r18, 0x30	; 48
     1fa:	31 05       	cpc	r19, r1
     1fc:	0c f4       	brge	.+2      	; 0x200 <read+0xb6>
     1fe:	a8 cf       	rjmp	.-176    	; 0x150 <read+0x6>
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
     200:	08 95       	ret
	for (int i=10;i<48;i++)
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a2){uint8_t tmp =i-10;if ((PINA & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=18&&i<28)//for port B
		{if (i==a2){uint8_t tmp =i-20;if ((PINB & (1<<tmp))){return 1;} else{return 0;}}}
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
     206:	08 95       	ret

00000208 <UART_init>:


void UART_init()
{
	  uint16_t baud_config = 103;                             //for 16 MHZ => 115200 Baud Rate   
	  UCSR0C |= (1<<UCSZ01)   |  (1<<UCSZ00) ;               //data size 8 bit       
     208:	e2 ec       	ldi	r30, 0xC2	; 194
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	86 60       	ori	r24, 0x06	; 6
     210:	80 83       	st	Z, r24
	  UBRR0L  = (uint8_t) baud_config;
     212:	87 e6       	ldi	r24, 0x67	; 103
     214:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	  UBRR0H  = (uint8_t) (baud_config>>8);
     218:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	  UCSR0B |= (1<<TXEN0) |  (1<<RXEN0) ;	
     21c:	e1 ec       	ldi	r30, 0xC1	; 193
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 61       	ori	r24, 0x18	; 24
     224:	80 83       	st	Z, r24
     226:	08 95       	ret

00000228 <UATR_SEND>:
void UATR_SEND(char x )
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
     228:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     22c:	95 ff       	sbrs	r25, 5
     22e:	fc cf       	rjmp	.-8      	; 0x228 <UATR_SEND>
	UDR0 = x;
     230:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     234:	08 95       	ret

00000236 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     236:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     23a:	8c e7       	ldi	r24, 0x7C	; 124
     23c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     240:	8b e0       	ldi	r24, 0x0B	; 11
     242:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     246:	ef e6       	ldi	r30, 0x6F	; 111
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	82 60       	ori	r24, 0x02	; 2
     24e:	80 83       	st	Z, r24
     250:	08 95       	ret

00000252 <pxPortInitialiseStack>:
     252:	31 e1       	ldi	r19, 0x11	; 17
     254:	fc 01       	movw	r30, r24
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	22 e2       	ldi	r18, 0x22	; 34
     25c:	20 83       	st	Z, r18
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	a3 e3       	ldi	r26, 0x33	; 51
     262:	a0 83       	st	Z, r26
     264:	31 97       	sbiw	r30, 0x01	; 1
     266:	60 83       	st	Z, r22
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	70 83       	st	Z, r23
     26c:	31 97       	sbiw	r30, 0x01	; 1
     26e:	10 82       	st	Z, r1
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	60 e8       	ldi	r22, 0x80	; 128
     274:	60 83       	st	Z, r22
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	10 82       	st	Z, r1
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	60 83       	st	Z, r22
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	63 e0       	ldi	r22, 0x03	; 3
     284:	60 83       	st	Z, r22
     286:	31 97       	sbiw	r30, 0x01	; 1
     288:	64 e0       	ldi	r22, 0x04	; 4
     28a:	60 83       	st	Z, r22
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	65 e0       	ldi	r22, 0x05	; 5
     290:	60 83       	st	Z, r22
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	66 e0       	ldi	r22, 0x06	; 6
     296:	60 83       	st	Z, r22
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	67 e0       	ldi	r22, 0x07	; 7
     29c:	60 83       	st	Z, r22
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	68 e0       	ldi	r22, 0x08	; 8
     2a2:	60 83       	st	Z, r22
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	69 e0       	ldi	r22, 0x09	; 9
     2a8:	60 83       	st	Z, r22
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	60 e1       	ldi	r22, 0x10	; 16
     2ae:	60 83       	st	Z, r22
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	30 83       	st	Z, r19
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	32 e1       	ldi	r19, 0x12	; 18
     2b8:	30 83       	st	Z, r19
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	33 e1       	ldi	r19, 0x13	; 19
     2be:	30 83       	st	Z, r19
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	34 e1       	ldi	r19, 0x14	; 20
     2c4:	30 83       	st	Z, r19
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	35 e1       	ldi	r19, 0x15	; 21
     2ca:	30 83       	st	Z, r19
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	36 e1       	ldi	r19, 0x16	; 22
     2d0:	30 83       	st	Z, r19
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	37 e1       	ldi	r19, 0x17	; 23
     2d6:	30 83       	st	Z, r19
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	38 e1       	ldi	r19, 0x18	; 24
     2dc:	30 83       	st	Z, r19
     2de:	31 97       	sbiw	r30, 0x01	; 1
     2e0:	39 e1       	ldi	r19, 0x19	; 25
     2e2:	30 83       	st	Z, r19
     2e4:	31 97       	sbiw	r30, 0x01	; 1
     2e6:	30 e2       	ldi	r19, 0x20	; 32
     2e8:	30 83       	st	Z, r19
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	31 e2       	ldi	r19, 0x21	; 33
     2ee:	30 83       	st	Z, r19
     2f0:	31 97       	sbiw	r30, 0x01	; 1
     2f2:	20 83       	st	Z, r18
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	23 e2       	ldi	r18, 0x23	; 35
     2f8:	20 83       	st	Z, r18
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	40 83       	st	Z, r20
     2fe:	31 97       	sbiw	r30, 0x01	; 1
     300:	50 83       	st	Z, r21
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	26 e2       	ldi	r18, 0x26	; 38
     306:	20 83       	st	Z, r18
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	27 e2       	ldi	r18, 0x27	; 39
     30c:	20 83       	st	Z, r18
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	28 e2       	ldi	r18, 0x28	; 40
     312:	20 83       	st	Z, r18
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	29 e2       	ldi	r18, 0x29	; 41
     318:	20 83       	st	Z, r18
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	20 e3       	ldi	r18, 0x30	; 48
     31e:	20 83       	st	Z, r18
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	21 e3       	ldi	r18, 0x31	; 49
     324:	20 83       	st	Z, r18
     326:	86 97       	sbiw	r24, 0x26	; 38
     328:	08 95       	ret

0000032a <xPortStartScheduler>:
     32a:	0e 94 1b 01 	call	0x236	; 0x236 <prvSetupTimerInterrupt>
     32e:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
     332:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     336:	cd 91       	ld	r28, X+
     338:	cd bf       	out	0x3d, r28	; 61
     33a:	dd 91       	ld	r29, X+
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	df 90       	pop	r13
     364:	cf 90       	pop	r12
     366:	bf 90       	pop	r11
     368:	af 90       	pop	r10
     36a:	9f 90       	pop	r9
     36c:	8f 90       	pop	r8
     36e:	7f 90       	pop	r7
     370:	6f 90       	pop	r6
     372:	5f 90       	pop	r5
     374:	4f 90       	pop	r4
     376:	3f 90       	pop	r3
     378:	2f 90       	pop	r2
     37a:	1f 90       	pop	r1
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	08 95       	ret
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	08 95       	ret

00000388 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     388:	0f 92       	push	r0
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	0f 92       	push	r0
     390:	1f 92       	push	r1
     392:	11 24       	eor	r1, r1
     394:	2f 92       	push	r2
     396:	3f 92       	push	r3
     398:	4f 92       	push	r4
     39a:	5f 92       	push	r5
     39c:	6f 92       	push	r6
     39e:	7f 92       	push	r7
     3a0:	8f 92       	push	r8
     3a2:	9f 92       	push	r9
     3a4:	af 92       	push	r10
     3a6:	bf 92       	push	r11
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	2f 93       	push	r18
     3b6:	3f 93       	push	r19
     3b8:	4f 93       	push	r20
     3ba:	5f 93       	push	r21
     3bc:	6f 93       	push	r22
     3be:	7f 93       	push	r23
     3c0:	8f 93       	push	r24
     3c2:	9f 93       	push	r25
     3c4:	af 93       	push	r26
     3c6:	bf 93       	push	r27
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
     3d0:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
     3d4:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     3d8:	0d b6       	in	r0, 0x3d	; 61
     3da:	0d 92       	st	X+, r0
     3dc:	0e b6       	in	r0, 0x3e	; 62
     3de:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     3e0:	0e 94 00 0b 	call	0x1600	; 0x1600 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     3e4:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
     3e8:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     3ec:	cd 91       	ld	r28, X+
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	dd 91       	ld	r29, X+
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	7f 91       	pop	r23
     406:	6f 91       	pop	r22
     408:	5f 91       	pop	r21
     40a:	4f 91       	pop	r20
     40c:	3f 91       	pop	r19
     40e:	2f 91       	pop	r18
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	7f 90       	pop	r7
     426:	6f 90       	pop	r6
     428:	5f 90       	pop	r5
     42a:	4f 90       	pop	r4
     42c:	3f 90       	pop	r3
     42e:	2f 90       	pop	r2
     430:	1f 90       	pop	r1
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0

	asm volatile ( "ret" );
     438:	08 95       	ret

0000043a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	0f 92       	push	r0
     442:	1f 92       	push	r1
     444:	11 24       	eor	r1, r1
     446:	2f 92       	push	r2
     448:	3f 92       	push	r3
     44a:	4f 92       	push	r4
     44c:	5f 92       	push	r5
     44e:	6f 92       	push	r6
     450:	7f 92       	push	r7
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	2f 93       	push	r18
     468:	3f 93       	push	r19
     46a:	4f 93       	push	r20
     46c:	5f 93       	push	r21
     46e:	6f 93       	push	r22
     470:	7f 93       	push	r23
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
     482:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
     486:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     48a:	0d b6       	in	r0, 0x3d	; 61
     48c:	0d 92       	st	X+, r0
     48e:	0e b6       	in	r0, 0x3e	; 62
     490:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     492:	0e 94 11 09 	call	0x1222	; 0x1222 <xTaskIncrementTick>
     496:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     498:	0e 94 00 0b 	call	0x1600	; 0x1600 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     49c:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
     4a0:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     4a4:	cd 91       	ld	r28, X+
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	dd 91       	ld	r29, X+
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	ff 91       	pop	r31
     4ae:	ef 91       	pop	r30
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	bf 91       	pop	r27
     4b6:	af 91       	pop	r26
     4b8:	9f 91       	pop	r25
     4ba:	8f 91       	pop	r24
     4bc:	7f 91       	pop	r23
     4be:	6f 91       	pop	r22
     4c0:	5f 91       	pop	r21
     4c2:	4f 91       	pop	r20
     4c4:	3f 91       	pop	r19
     4c6:	2f 91       	pop	r18
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	bf 90       	pop	r11
     4d6:	af 90       	pop	r10
     4d8:	9f 90       	pop	r9
     4da:	8f 90       	pop	r8
     4dc:	7f 90       	pop	r7
     4de:	6f 90       	pop	r6
     4e0:	5f 90       	pop	r5
     4e2:	4f 90       	pop	r4
     4e4:	3f 90       	pop	r3
     4e6:	2f 90       	pop	r2
     4e8:	1f 90       	pop	r1
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4f0:	08 95       	ret

000004f2 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     4f2:	0e 94 1d 02 	call	0x43a	; 0x43a <vPortYieldFromTick>
		asm volatile ( "reti" );
     4f6:	18 95       	reti

000004f8 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4f8:	a9 e3       	ldi	r26, 0x39	; 57
     4fa:	b1 e0       	ldi	r27, 0x01	; 1
     4fc:	ed e3       	ldi	r30, 0x3D	; 61
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	fc 93       	st	X, r31
     504:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     506:	13 96       	adiw	r26, 0x03	; 3
     508:	1c 92       	st	X, r1
     50a:	1e 92       	st	-X, r1
     50c:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     50e:	a5 e3       	ldi	r26, 0x35	; 53
     510:	b1 e0       	ldi	r27, 0x01	; 1
     512:	8b ed       	ldi	r24, 0xDB	; 219
     514:	95 e0       	ldi	r25, 0x05	; 5
     516:	13 96       	adiw	r26, 0x03	; 3
     518:	9c 93       	st	X, r25
     51a:	8e 93       	st	-X, r24
     51c:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	1c 92       	st	X, r1
     522:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     524:	93 83       	std	Z+3, r25	; 0x03
     526:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     528:	b1 83       	std	Z+1, r27	; 0x01
     52a:	a0 83       	st	Z, r26
     52c:	08 95       	ret

0000052e <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     53c:	0e 94 0b 09 	call	0x1216	; 0x1216 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     540:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     544:	81 11       	cpse	r24, r1
     546:	05 c0       	rjmp	.+10     	; 0x552 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     548:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     552:	20 97       	sbiw	r28, 0x00	; 0
     554:	71 f0       	breq	.+28     	; 0x572 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     556:	ce 01       	movw	r24, r28
     558:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     55a:	c8 17       	cp	r28, r24
     55c:	d9 07       	cpc	r29, r25
     55e:	38 f4       	brcc	.+14     	; 0x56e <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     560:	25 96       	adiw	r28, 0x05	; 5
     562:	8c 17       	cp	r24, r28
     564:	9d 07       	cpc	r25, r29
     566:	28 f0       	brcs	.+10     	; 0x572 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     568:	c0 e0       	ldi	r28, 0x00	; 0
     56a:	d0 e0       	ldi	r29, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     56e:	c0 e0       	ldi	r28, 0x00	; 0
     570:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     572:	20 97       	sbiw	r28, 0x00	; 0
     574:	09 f4       	brne	.+2      	; 0x578 <pvPortMalloc+0x4a>
     576:	5e c0       	rjmp	.+188    	; 0x634 <pvPortMalloc+0x106>
     578:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     57c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     580:	2c 17       	cp	r18, r28
     582:	3d 07       	cpc	r19, r29
     584:	08 f4       	brcc	.+2      	; 0x588 <pvPortMalloc+0x5a>
     586:	59 c0       	rjmp	.+178    	; 0x63a <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     588:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <xStart>
     58c:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     590:	a9 e3       	ldi	r26, 0x39	; 57
     592:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     594:	02 c0       	rjmp	.+4      	; 0x59a <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     596:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     598:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     59a:	82 81       	ldd	r24, Z+2	; 0x02
     59c:	93 81       	ldd	r25, Z+3	; 0x03
     59e:	8c 17       	cp	r24, r28
     5a0:	9d 07       	cpc	r25, r29
     5a2:	20 f4       	brcc	.+8      	; 0x5ac <pvPortMalloc+0x7e>
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	a9 f7       	brne	.-22     	; 0x596 <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	e5 33       	cpi	r30, 0x35	; 53
     5b0:	f8 07       	cpc	r31, r24
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <pvPortMalloc+0x88>
     5b4:	45 c0       	rjmp	.+138    	; 0x640 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5b6:	0d 91       	ld	r16, X+
     5b8:	1c 91       	ld	r17, X
     5ba:	11 97       	sbiw	r26, 0x01	; 1
     5bc:	0c 5f       	subi	r16, 0xFC	; 252
     5be:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	8d 93       	st	X+, r24
     5c6:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	93 81       	ldd	r25, Z+3	; 0x03
     5cc:	8c 1b       	sub	r24, r28
     5ce:	9d 0b       	sbc	r25, r29
     5d0:	89 30       	cpi	r24, 0x09	; 9
     5d2:	91 05       	cpc	r25, r1
     5d4:	30 f1       	brcs	.+76     	; 0x622 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5d6:	bf 01       	movw	r22, r30
     5d8:	6c 0f       	add	r22, r28
     5da:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5dc:	db 01       	movw	r26, r22
     5de:	13 96       	adiw	r26, 0x03	; 3
     5e0:	9c 93       	st	X, r25
     5e2:	8e 93       	st	-X, r24
     5e4:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     5e6:	d3 83       	std	Z+3, r29	; 0x03
     5e8:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     5ea:	12 96       	adiw	r26, 0x02	; 2
     5ec:	4d 91       	ld	r20, X+
     5ee:	5c 91       	ld	r21, X
     5f0:	13 97       	sbiw	r26, 0x03	; 3
     5f2:	0f 2e       	mov	r0, r31
     5f4:	f9 e3       	ldi	r31, 0x39	; 57
     5f6:	ef 2e       	mov	r14, r31
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	ff 2e       	mov	r15, r31
     5fc:	f0 2d       	mov	r31, r0
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <pvPortMalloc+0xd4>
     600:	7d 01       	movw	r14, r26
     602:	e7 01       	movw	r28, r14
     604:	a8 81       	ld	r26, Y
     606:	b9 81       	ldd	r27, Y+1	; 0x01
     608:	12 96       	adiw	r26, 0x02	; 2
     60a:	8d 91       	ld	r24, X+
     60c:	9c 91       	ld	r25, X
     60e:	13 97       	sbiw	r26, 0x03	; 3
     610:	84 17       	cp	r24, r20
     612:	95 07       	cpc	r25, r21
     614:	a8 f3       	brcs	.-22     	; 0x600 <pvPortMalloc+0xd2>
     616:	eb 01       	movw	r28, r22
     618:	b9 83       	std	Y+1, r27	; 0x01
     61a:	a8 83       	st	Y, r26
     61c:	d7 01       	movw	r26, r14
     61e:	6d 93       	st	X+, r22
     620:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	28 1b       	sub	r18, r24
     628:	39 0b       	sbc	r19, r25
     62a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
     62e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
     632:	08 c0       	rjmp	.+16     	; 0x644 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	05 c0       	rjmp	.+10     	; 0x644 <pvPortMalloc+0x116>
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	02 c0       	rjmp	.+4      	; 0x644 <pvPortMalloc+0x116>
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     644:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     648:	c8 01       	movw	r24, r16
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	08 95       	ret

00000658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	41 f1       	breq	.+80     	; 0x6b4 <vPortFree+0x5c>
     664:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     666:	8c 01       	movw	r16, r24
     668:	04 50       	subi	r16, 0x04	; 4
     66a:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     66c:	0e 94 0b 09 	call	0x1216	; 0x1216 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     670:	f8 01       	movw	r30, r16
     672:	42 81       	ldd	r20, Z+2	; 0x02
     674:	53 81       	ldd	r21, Z+3	; 0x03
     676:	a9 e3       	ldi	r26, 0x39	; 57
     678:	b1 e0       	ldi	r27, 0x01	; 1
     67a:	01 c0       	rjmp	.+2      	; 0x67e <vPortFree+0x26>
     67c:	df 01       	movw	r26, r30
     67e:	ed 91       	ld	r30, X+
     680:	fc 91       	ld	r31, X
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	22 81       	ldd	r18, Z+2	; 0x02
     686:	33 81       	ldd	r19, Z+3	; 0x03
     688:	24 17       	cp	r18, r20
     68a:	35 07       	cpc	r19, r21
     68c:	b8 f3       	brcs	.-18     	; 0x67c <vPortFree+0x24>
     68e:	24 97       	sbiw	r28, 0x04	; 4
     690:	f9 83       	std	Y+1, r31	; 0x01
     692:	e8 83       	st	Y, r30
     694:	0d 93       	st	X+, r16
     696:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     698:	8a 81       	ldd	r24, Y+2	; 0x02
     69a:	9b 81       	ldd	r25, Y+3	; 0x03
     69c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     6a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     6ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     6b0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
    }
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6be:	fc 01       	movw	r30, r24
     6c0:	03 96       	adiw	r24, 0x03	; 3
     6c2:	92 83       	std	Z+2, r25	; 0x02
     6c4:	81 83       	std	Z+1, r24	; 0x01
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	3f ef       	ldi	r19, 0xFF	; 255
     6ca:	34 83       	std	Z+4, r19	; 0x04
     6cc:	23 83       	std	Z+3, r18	; 0x03
     6ce:	96 83       	std	Z+6, r25	; 0x06
     6d0:	85 83       	std	Z+5, r24	; 0x05
     6d2:	90 87       	std	Z+8, r25	; 0x08
     6d4:	87 83       	std	Z+7, r24	; 0x07
     6d6:	10 82       	st	Z, r1
     6d8:	08 95       	ret

000006da <vListInitialiseItem>:
     6da:	fc 01       	movw	r30, r24
     6dc:	11 86       	std	Z+9, r1	; 0x09
     6de:	10 86       	std	Z+8, r1	; 0x08
     6e0:	08 95       	ret

000006e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6e8:	48 81       	ld	r20, Y
     6ea:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6ec:	4f 3f       	cpi	r20, 0xFF	; 255
     6ee:	2f ef       	ldi	r18, 0xFF	; 255
     6f0:	52 07       	cpc	r21, r18
     6f2:	21 f4       	brne	.+8      	; 0x6fc <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6f4:	fc 01       	movw	r30, r24
     6f6:	a7 81       	ldd	r26, Z+7	; 0x07
     6f8:	b0 85       	ldd	r27, Z+8	; 0x08
     6fa:	0d c0       	rjmp	.+26     	; 0x716 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6fc:	dc 01       	movw	r26, r24
     6fe:	13 96       	adiw	r26, 0x03	; 3
     700:	01 c0       	rjmp	.+2      	; 0x704 <vListInsert+0x22>
     702:	df 01       	movw	r26, r30
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	ed 91       	ld	r30, X+
     708:	fc 91       	ld	r31, X
     70a:	13 97       	sbiw	r26, 0x03	; 3
     70c:	20 81       	ld	r18, Z
     70e:	31 81       	ldd	r19, Z+1	; 0x01
     710:	42 17       	cp	r20, r18
     712:	53 07       	cpc	r21, r19
     714:	b0 f7       	brcc	.-20     	; 0x702 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
     71c:	13 97       	sbiw	r26, 0x03	; 3
     71e:	fb 83       	std	Y+3, r31	; 0x03
     720:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     722:	d5 83       	std	Z+5, r29	; 0x05
     724:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     726:	bd 83       	std	Y+5, r27	; 0x05
     728:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     72a:	13 96       	adiw	r26, 0x03	; 3
     72c:	dc 93       	st	X, r29
     72e:	ce 93       	st	-X, r28
     730:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     732:	99 87       	std	Y+9, r25	; 0x09
     734:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     736:	fc 01       	movw	r30, r24
     738:	20 81       	ld	r18, Z
     73a:	2f 5f       	subi	r18, 0xFF	; 255
     73c:	20 83       	st	Z, r18
}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	08 95       	ret

00000744 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     74a:	a0 85       	ldd	r26, Z+8	; 0x08
     74c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     74e:	c2 81       	ldd	r28, Z+2	; 0x02
     750:	d3 81       	ldd	r29, Z+3	; 0x03
     752:	84 81       	ldd	r24, Z+4	; 0x04
     754:	95 81       	ldd	r25, Z+5	; 0x05
     756:	9d 83       	std	Y+5, r25	; 0x05
     758:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     75a:	c4 81       	ldd	r28, Z+4	; 0x04
     75c:	d5 81       	ldd	r29, Z+5	; 0x05
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	93 81       	ldd	r25, Z+3	; 0x03
     762:	9b 83       	std	Y+3, r25	; 0x03
     764:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	8d 91       	ld	r24, X+
     76a:	9c 91       	ld	r25, X
     76c:	12 97       	sbiw	r26, 0x02	; 2
     76e:	e8 17       	cp	r30, r24
     770:	f9 07       	cpc	r31, r25
     772:	31 f4       	brne	.+12     	; 0x780 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     774:	84 81       	ldd	r24, Z+4	; 0x04
     776:	95 81       	ldd	r25, Z+5	; 0x05
     778:	12 96       	adiw	r26, 0x02	; 2
     77a:	9c 93       	st	X, r25
     77c:	8e 93       	st	-X, r24
     77e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     780:	11 86       	std	Z+9, r1	; 0x09
     782:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     784:	8c 91       	ld	r24, X
     786:	81 50       	subi	r24, 0x01	; 1
     788:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     78a:	8c 91       	ld	r24, X
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     792:	dc 01       	movw	r26, r24
     794:	51 96       	adiw	r26, 0x11	; 17
     796:	2c 91       	ld	r18, X
     798:	51 97       	sbiw	r26, 0x11	; 17
     79a:	22 23       	and	r18, r18
     79c:	41 f0       	breq	.+16     	; 0x7ae <prvGetDisinheritPriorityAfterTimeout+0x1c>
     79e:	56 96       	adiw	r26, 0x16	; 22
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	57 97       	sbiw	r26, 0x17	; 23
     7a6:	90 81       	ld	r25, Z
     7a8:	84 e0       	ldi	r24, 0x04	; 4
     7aa:	89 1b       	sub	r24, r25
     7ac:	08 95       	ret
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	08 95       	ret

000007b2 <prvIsQueueEmpty>:
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	0f 92       	push	r0
     7b8:	fc 01       	movw	r30, r24
     7ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     7bc:	81 11       	cpse	r24, r1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <prvIsQueueEmpty+0x12>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <prvIsQueueEmpty+0x14>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	08 95       	ret

000007cc <prvIsQueueFull>:
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	0f 92       	push	r0
     7d2:	fc 01       	movw	r30, r24
     7d4:	22 8d       	ldd	r18, Z+26	; 0x1a
     7d6:	83 8d       	ldd	r24, Z+27	; 0x1b
     7d8:	28 13       	cpse	r18, r24
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <prvIsQueueFull+0x14>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <prvIsQueueFull+0x16>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	08 95       	ret

000007e8 <prvCopyDataToQueue>:
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	04 2f       	mov	r16, r20
     7f4:	1a 8d       	ldd	r17, Y+26	; 0x1a
     7f6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     7f8:	41 11       	cpse	r20, r1
     7fa:	0c c0       	rjmp	.+24     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7fc:	88 81       	ld	r24, Y
     7fe:	99 81       	ldd	r25, Y+1	; 0x01
     800:	89 2b       	or	r24, r25
     802:	09 f0       	breq	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	42 c0       	rjmp	.+132    	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	9d 81       	ldd	r25, Y+5	; 0x05
     80a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <xTaskPriorityDisinherit>
     80e:	1d 82       	std	Y+5, r1	; 0x05
     810:	1c 82       	std	Y+4, r1	; 0x04
     812:	42 c0       	rjmp	.+132    	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     814:	01 11       	cpse	r16, r1
     816:	17 c0       	rjmp	.+46     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <memcpy>
     822:	2c 8d       	ldd	r18, Y+28	; 0x1c
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	9b 81       	ldd	r25, Y+3	; 0x03
     828:	82 0f       	add	r24, r18
     82a:	91 1d       	adc	r25, r1
     82c:	9b 83       	std	Y+3, r25	; 0x03
     82e:	8a 83       	std	Y+2, r24	; 0x02
     830:	2c 81       	ldd	r18, Y+4	; 0x04
     832:	3d 81       	ldd	r19, Y+5	; 0x05
     834:	82 17       	cp	r24, r18
     836:	93 07       	cpc	r25, r19
     838:	50 f1       	brcs	.+84     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     83a:	88 81       	ld	r24, Y
     83c:	99 81       	ldd	r25, Y+1	; 0x01
     83e:	9b 83       	std	Y+3, r25	; 0x03
     840:	8a 83       	std	Y+2, r24	; 0x02
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	29 c0       	rjmp	.+82     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	8e 81       	ldd	r24, Y+6	; 0x06
     84a:	9f 81       	ldd	r25, Y+7	; 0x07
     84c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <memcpy>
     850:	8c 8d       	ldd	r24, Y+28	; 0x1c
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	91 95       	neg	r25
     856:	81 95       	neg	r24
     858:	91 09       	sbc	r25, r1
     85a:	2e 81       	ldd	r18, Y+6	; 0x06
     85c:	3f 81       	ldd	r19, Y+7	; 0x07
     85e:	28 0f       	add	r18, r24
     860:	39 1f       	adc	r19, r25
     862:	3f 83       	std	Y+7, r19	; 0x07
     864:	2e 83       	std	Y+6, r18	; 0x06
     866:	48 81       	ld	r20, Y
     868:	59 81       	ldd	r21, Y+1	; 0x01
     86a:	24 17       	cp	r18, r20
     86c:	35 07       	cpc	r19, r21
     86e:	30 f4       	brcc	.+12     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     870:	2c 81       	ldd	r18, Y+4	; 0x04
     872:	3d 81       	ldd	r19, Y+5	; 0x05
     874:	82 0f       	add	r24, r18
     876:	93 1f       	adc	r25, r19
     878:	9f 83       	std	Y+7, r25	; 0x07
     87a:	8e 83       	std	Y+6, r24	; 0x06
     87c:	02 30       	cpi	r16, 0x02	; 2
     87e:	49 f4       	brne	.+18     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     880:	11 23       	and	r17, r17
     882:	49 f0       	breq	.+18     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
     884:	11 50       	subi	r17, 0x01	; 1
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	07 c0       	rjmp	.+14     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	05 c0       	rjmp	.+10     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	03 c0       	rjmp	.+6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	01 c0       	rjmp	.+2      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	1f 5f       	subi	r17, 0xFF	; 255
     89a:	1a 8f       	std	Y+26, r17	; 0x1a
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	08 95       	ret

000008a6 <prvUnlockQueue>:
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	0f 92       	push	r0
     8b4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8b6:	0b c0       	rjmp	.+22     	; 0x8ce <prvUnlockQueue+0x28>
     8b8:	89 89       	ldd	r24, Y+17	; 0x11
     8ba:	88 23       	and	r24, r24
     8bc:	51 f0       	breq	.+20     	; 0x8d2 <prvUnlockQueue+0x2c>
     8be:	ce 01       	movw	r24, r28
     8c0:	41 96       	adiw	r24, 0x11	; 17
     8c2:	0e 94 66 0b 	call	0x16cc	; 0x16cc <xTaskRemoveFromEventList>
     8c6:	81 11       	cpse	r24, r1
     8c8:	0e 94 6d 0c 	call	0x18da	; 0x18da <vTaskMissedYield>
     8cc:	11 50       	subi	r17, 0x01	; 1
     8ce:	11 16       	cp	r1, r17
     8d0:	9c f3       	brlt	.-26     	; 0x8b8 <prvUnlockQueue+0x12>
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	8e 8f       	std	Y+30, r24	; 0x1e
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	0f 92       	push	r0
     8e0:	1d 8d       	ldd	r17, Y+29	; 0x1d
     8e2:	0b c0       	rjmp	.+22     	; 0x8fa <prvUnlockQueue+0x54>
     8e4:	88 85       	ldd	r24, Y+8	; 0x08
     8e6:	88 23       	and	r24, r24
     8e8:	51 f0       	breq	.+20     	; 0x8fe <prvUnlockQueue+0x58>
     8ea:	ce 01       	movw	r24, r28
     8ec:	08 96       	adiw	r24, 0x08	; 8
     8ee:	0e 94 66 0b 	call	0x16cc	; 0x16cc <xTaskRemoveFromEventList>
     8f2:	81 11       	cpse	r24, r1
     8f4:	0e 94 6d 0c 	call	0x18da	; 0x18da <vTaskMissedYield>
     8f8:	11 50       	subi	r17, 0x01	; 1
     8fa:	11 16       	cp	r1, r17
     8fc:	9c f3       	brlt	.-26     	; 0x8e4 <prvUnlockQueue+0x3e>
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	8d 8f       	std	Y+29, r24	; 0x1d
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	08 95       	ret

0000090e <xQueueGenericReset>:
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	fc 01       	movw	r30, r24
     918:	36 2f       	mov	r19, r22
     91a:	89 2b       	or	r24, r25
     91c:	09 f4       	brne	.+2      	; 0x920 <xQueueGenericReset+0x12>
     91e:	4d c0       	rjmp	.+154    	; 0x9ba <xQueueGenericReset+0xac>
     920:	23 8d       	ldd	r18, Z+27	; 0x1b
     922:	22 23       	and	r18, r18
     924:	09 f4       	brne	.+2      	; 0x928 <xQueueGenericReset+0x1a>
     926:	4b c0       	rjmp	.+150    	; 0x9be <xQueueGenericReset+0xb0>
     928:	02 2f       	mov	r16, r18
     92a:	10 e0       	ldi	r17, 0x00	; 0
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	b8 01       	movw	r22, r16
     932:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__udivmodhi4>
     936:	44 8d       	ldd	r20, Z+28	; 0x1c
     938:	84 2f       	mov	r24, r20
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	68 17       	cp	r22, r24
     93e:	79 07       	cpc	r23, r25
     940:	08 f4       	brcc	.+2      	; 0x944 <xQueueGenericReset+0x36>
     942:	3f c0       	rjmp	.+126    	; 0x9c2 <xQueueGenericReset+0xb4>
     944:	ef 01       	movw	r28, r30
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	0f 92       	push	r0
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	fb 01       	movw	r30, r22
     952:	24 9f       	mul	r18, r20
     954:	e0 0d       	add	r30, r0
     956:	f1 1d       	adc	r31, r1
     958:	11 24       	eor	r1, r1
     95a:	fd 83       	std	Y+5, r31	; 0x05
     95c:	ec 83       	std	Y+4, r30	; 0x04
     95e:	1a 8e       	std	Y+26, r1	; 0x1a
     960:	7b 83       	std	Y+3, r23	; 0x03
     962:	6a 83       	std	Y+2, r22	; 0x02
     964:	01 50       	subi	r16, 0x01	; 1
     966:	11 09       	sbc	r17, r1
     968:	80 9f       	mul	r24, r16
     96a:	a0 01       	movw	r20, r0
     96c:	81 9f       	mul	r24, r17
     96e:	50 0d       	add	r21, r0
     970:	90 9f       	mul	r25, r16
     972:	50 0d       	add	r21, r0
     974:	11 24       	eor	r1, r1
     976:	cb 01       	movw	r24, r22
     978:	84 0f       	add	r24, r20
     97a:	95 1f       	adc	r25, r21
     97c:	9f 83       	std	Y+7, r25	; 0x07
     97e:	8e 83       	std	Y+6, r24	; 0x06
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	8d 8f       	std	Y+29, r24	; 0x1d
     984:	8e 8f       	std	Y+30, r24	; 0x1e
     986:	31 11       	cpse	r19, r1
     988:	0c c0       	rjmp	.+24     	; 0x9a2 <xQueueGenericReset+0x94>
     98a:	88 85       	ldd	r24, Y+8	; 0x08
     98c:	88 23       	and	r24, r24
     98e:	89 f0       	breq	.+34     	; 0x9b2 <xQueueGenericReset+0xa4>
     990:	ce 01       	movw	r24, r28
     992:	08 96       	adiw	r24, 0x08	; 8
     994:	0e 94 66 0b 	call	0x16cc	; 0x16cc <xTaskRemoveFromEventList>
     998:	88 23       	and	r24, r24
     99a:	59 f0       	breq	.+22     	; 0x9b2 <xQueueGenericReset+0xa4>
     99c:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <xQueueGenericReset+0xa4>
     9a2:	ce 01       	movw	r24, r28
     9a4:	08 96       	adiw	r24, 0x08	; 8
     9a6:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     9aa:	ce 01       	movw	r24, r28
     9ac:	41 96       	adiw	r24, 0x11	; 17
     9ae:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <xQueueGenericReset+0xb6>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <xQueueGenericReset+0xb6>
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <xQueueGenericReset+0xb6>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <prvInitialiseNewQueue>:
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	f8 01       	movw	r30, r16
     9d4:	61 11       	cpse	r22, r1
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <prvInitialiseNewQueue+0x10>
     9d8:	11 83       	std	Z+1, r17	; 0x01
     9da:	00 83       	st	Z, r16
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <prvInitialiseNewQueue+0x14>
     9de:	51 83       	std	Z+1, r21	; 0x01
     9e0:	40 83       	st	Z, r20
     9e2:	83 8f       	std	Z+27, r24	; 0x1b
     9e4:	64 8f       	std	Z+28, r22	; 0x1c
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	cf 01       	movw	r24, r30
     9ea:	0e 94 87 04 	call	0x90e	; 0x90e <xQueueGenericReset>
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <xQueueGenericCreate>:
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	38 2f       	mov	r19, r24
     a04:	e6 2f       	mov	r30, r22
     a06:	88 23       	and	r24, r24
     a08:	29 f1       	breq	.+74     	; 0xa54 <xQueueGenericCreate+0x60>
     a0a:	68 2f       	mov	r22, r24
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	9f ef       	ldi	r25, 0xFF	; 255
     a12:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__udivmodhi4>
     a16:	8e 2f       	mov	r24, r30
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	68 17       	cp	r22, r24
     a1c:	79 07       	cpc	r23, r25
     a1e:	e8 f0       	brcs	.+58     	; 0xa5a <xQueueGenericCreate+0x66>
     a20:	3e 9f       	mul	r19, r30
     a22:	c0 01       	movw	r24, r0
     a24:	11 24       	eor	r1, r1
     a26:	81 3e       	cpi	r24, 0xE1	; 225
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	92 07       	cpc	r25, r18
     a2c:	c8 f4       	brcc	.+50     	; 0xa60 <xQueueGenericCreate+0x6c>
     a2e:	d4 2e       	mov	r13, r20
     a30:	de 2f       	mov	r29, r30
     a32:	c3 2f       	mov	r28, r19
     a34:	4f 96       	adiw	r24, 0x1f	; 31
     a36:	0e 94 97 02 	call	0x52e	; 0x52e <pvPortMalloc>
     a3a:	7c 01       	movw	r14, r24
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	91 f0       	breq	.+36     	; 0xa64 <xQueueGenericCreate+0x70>
     a40:	8c 01       	movw	r16, r24
     a42:	2d 2d       	mov	r18, r13
     a44:	ac 01       	movw	r20, r24
     a46:	41 5e       	subi	r20, 0xE1	; 225
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	6d 2f       	mov	r22, r29
     a4c:	8c 2f       	mov	r24, r28
     a4e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <prvInitialiseNewQueue>
     a52:	08 c0       	rjmp	.+16     	; 0xa64 <xQueueGenericCreate+0x70>
     a54:	e1 2c       	mov	r14, r1
     a56:	f1 2c       	mov	r15, r1
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <xQueueGenericCreate+0x70>
     a5a:	e1 2c       	mov	r14, r1
     a5c:	f1 2c       	mov	r15, r1
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <xQueueGenericCreate+0x70>
     a60:	e1 2c       	mov	r14, r1
     a62:	f1 2c       	mov	r15, r1
     a64:	c7 01       	movw	r24, r14
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	08 95       	ret

00000a76 <xQueueGenericSend>:
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	00 d0       	rcall	.+0      	; 0xa88 <xQueueGenericSend+0x12>
     a88:	00 d0       	rcall	.+0      	; 0xa8a <xQueueGenericSend+0x14>
     a8a:	1f 92       	push	r1
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	8c 01       	movw	r16, r24
     a92:	7b 01       	movw	r14, r22
     a94:	5d 83       	std	Y+5, r21	; 0x05
     a96:	4c 83       	std	Y+4, r20	; 0x04
     a98:	c2 2e       	mov	r12, r18
     a9a:	d1 2c       	mov	r13, r1
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	0f 92       	push	r0
     aa2:	f8 01       	movw	r30, r16
     aa4:	92 8d       	ldd	r25, Z+26	; 0x1a
     aa6:	83 8d       	ldd	r24, Z+27	; 0x1b
     aa8:	98 17       	cp	r25, r24
     aaa:	18 f0       	brcs	.+6      	; 0xab2 <xQueueGenericSend+0x3c>
     aac:	f2 e0       	ldi	r31, 0x02	; 2
     aae:	cf 12       	cpse	r12, r31
     ab0:	19 c0       	rjmp	.+50     	; 0xae4 <xQueueGenericSend+0x6e>
     ab2:	4c 2d       	mov	r20, r12
     ab4:	b7 01       	movw	r22, r14
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvCopyDataToQueue>
     abc:	f8 01       	movw	r30, r16
     abe:	91 89       	ldd	r25, Z+17	; 0x11
     ac0:	99 23       	and	r25, r25
     ac2:	49 f0       	breq	.+18     	; 0xad6 <xQueueGenericSend+0x60>
     ac4:	c8 01       	movw	r24, r16
     ac6:	41 96       	adiw	r24, 0x11	; 17
     ac8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <xTaskRemoveFromEventList>
     acc:	88 23       	and	r24, r24
     ace:	31 f0       	breq	.+12     	; 0xadc <xQueueGenericSend+0x66>
     ad0:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <xQueueGenericSend+0x66>
     ad6:	81 11       	cpse	r24, r1
     ad8:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	4d c0       	rjmp	.+154    	; 0xb7e <xQueueGenericSend+0x108>
     ae4:	8c 81       	ldd	r24, Y+4	; 0x04
     ae6:	9d 81       	ldd	r25, Y+5	; 0x05
     ae8:	89 2b       	or	r24, r25
     aea:	21 f4       	brne	.+8      	; 0xaf4 <xQueueGenericSend+0x7e>
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	45 c0       	rjmp	.+138    	; 0xb7e <xQueueGenericSend+0x108>
     af4:	d1 10       	cpse	r13, r1
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <xQueueGenericSend+0x8e>
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 23 0c 	call	0x1846	; 0x1846 <vTaskInternalSetTimeOutState>
     b00:	dd 24       	eor	r13, r13
     b02:	d3 94       	inc	r13
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0e 94 0b 09 	call	0x1216	; 0x1216 <vTaskSuspendAll>
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	0f 92       	push	r0
     b12:	f8 01       	movw	r30, r16
     b14:	85 8d       	ldd	r24, Z+29	; 0x1d
     b16:	8f 3f       	cpi	r24, 0xFF	; 255
     b18:	09 f4       	brne	.+2      	; 0xb1c <xQueueGenericSend+0xa6>
     b1a:	15 8e       	std	Z+29, r1	; 0x1d
     b1c:	f8 01       	movw	r30, r16
     b1e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b20:	8f 3f       	cpi	r24, 0xFF	; 255
     b22:	09 f4       	brne	.+2      	; 0xb26 <xQueueGenericSend+0xb0>
     b24:	16 8e       	std	Z+30, r1	; 0x1e
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	be 01       	movw	r22, r28
     b2c:	6c 5f       	subi	r22, 0xFC	; 252
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	0e 94 2e 0c 	call	0x185c	; 0x185c <xTaskCheckForTimeOut>
     b38:	81 11       	cpse	r24, r1
     b3a:	1b c0       	rjmp	.+54     	; 0xb72 <xQueueGenericSend+0xfc>
     b3c:	c8 01       	movw	r24, r16
     b3e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <prvIsQueueFull>
     b42:	88 23       	and	r24, r24
     b44:	81 f0       	breq	.+32     	; 0xb66 <xQueueGenericSend+0xf0>
     b46:	6c 81       	ldd	r22, Y+4	; 0x04
     b48:	7d 81       	ldd	r23, Y+5	; 0x05
     b4a:	c8 01       	movw	r24, r16
     b4c:	08 96       	adiw	r24, 0x08	; 8
     b4e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <vTaskPlaceOnEventList>
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvUnlockQueue>
     b58:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
     b5c:	81 11       	cpse	r24, r1
     b5e:	9e cf       	rjmp	.-196    	; 0xa9c <xQueueGenericSend+0x26>
     b60:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
     b64:	9b cf       	rjmp	.-202    	; 0xa9c <xQueueGenericSend+0x26>
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvUnlockQueue>
     b6c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
     b70:	95 cf       	rjmp	.-214    	; 0xa9c <xQueueGenericSend+0x26>
     b72:	c8 01       	movw	r24, r16
     b74:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvUnlockQueue>
     b78:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	08 95       	ret

00000b9a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <xQueueSemaphoreTake+0xe>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <xQueueSemaphoreTake+0x10>
     baa:	1f 92       	push	r1
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	8c 01       	movw	r16, r24
     bb2:	7d 83       	std	Y+5, r23	; 0x05
     bb4:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     bb6:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     bb8:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     bc0:	f8 01       	movw	r30, r16
     bc2:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     bc4:	88 23       	and	r24, r24
     bc6:	d1 f0       	breq	.+52     	; 0xbfc <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     bc8:	81 50       	subi	r24, 0x01	; 1
     bca:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     bcc:	80 81       	ld	r24, Z
     bce:	91 81       	ldd	r25, Z+1	; 0x01
     bd0:	89 2b       	or	r24, r25
     bd2:	29 f4       	brne	.+10     	; 0xbde <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     bd4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <pvTaskIncrementMutexHeldCount>
     bd8:	f8 01       	movw	r30, r16
     bda:	95 83       	std	Z+5, r25	; 0x05
     bdc:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     bde:	f8 01       	movw	r30, r16
     be0:	80 85       	ldd	r24, Z+8	; 0x08
     be2:	88 23       	and	r24, r24
     be4:	39 f0       	breq	.+14     	; 0xbf4 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     be6:	c8 01       	movw	r24, r16
     be8:	08 96       	adiw	r24, 0x08	; 8
     bea:	0e 94 66 0b 	call	0x16cc	; 0x16cc <xTaskRemoveFromEventList>
     bee:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     bf0:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	74 c0       	rjmp	.+232    	; 0xce4 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	9d 81       	ldd	r25, Y+5	; 0x05
     c00:	89 2b       	or	r24, r25
     c02:	21 f4       	brne	.+8      	; 0xc0c <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	6c c0       	rjmp	.+216    	; 0xce4 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     c0c:	f1 10       	cpse	r15, r1
     c0e:	06 c0       	rjmp	.+12     	; 0xc1c <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	0e 94 23 0c 	call	0x1846	; 0x1846 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     c18:	ff 24       	eor	r15, r15
     c1a:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     c20:	0e 94 0b 09 	call	0x1216	; 0x1216 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	0f 92       	push	r0
     c2a:	f8 01       	movw	r30, r16
     c2c:	85 8d       	ldd	r24, Z+29	; 0x1d
     c2e:	8f 3f       	cpi	r24, 0xFF	; 255
     c30:	09 f4       	brne	.+2      	; 0xc34 <xQueueSemaphoreTake+0x9a>
     c32:	15 8e       	std	Z+29, r1	; 0x1d
     c34:	f8 01       	movw	r30, r16
     c36:	86 8d       	ldd	r24, Z+30	; 0x1e
     c38:	8f 3f       	cpi	r24, 0xFF	; 255
     c3a:	09 f4       	brne	.+2      	; 0xc3e <xQueueSemaphoreTake+0xa4>
     c3c:	16 8e       	std	Z+30, r1	; 0x1e
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     c42:	be 01       	movw	r22, r28
     c44:	6c 5f       	subi	r22, 0xFC	; 252
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 2e 0c 	call	0x185c	; 0x185c <xTaskCheckForTimeOut>
     c50:	81 11       	cpse	r24, r1
     c52:	2a c0       	rjmp	.+84     	; 0xca8 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     c54:	c8 01       	movw	r24, r16
     c56:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <prvIsQueueEmpty>
     c5a:	88 23       	and	r24, r24
     c5c:	f9 f0       	breq	.+62     	; 0xc9c <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     c5e:	f8 01       	movw	r30, r16
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	89 2b       	or	r24, r25
     c66:	51 f4       	brne	.+20     	; 0xc7c <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     c6e:	84 81       	ldd	r24, Z+4	; 0x04
     c70:	95 81       	ldd	r25, Z+5	; 0x05
     c72:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <xTaskPriorityInherit>
     c76:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c7c:	6c 81       	ldd	r22, Y+4	; 0x04
     c7e:	7d 81       	ldd	r23, Y+5	; 0x05
     c80:	c8 01       	movw	r24, r16
     c82:	41 96       	adiw	r24, 0x11	; 17
     c84:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     c88:	c8 01       	movw	r24, r16
     c8a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     c8e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
     c92:	81 11       	cpse	r24, r1
     c94:	92 cf       	rjmp	.-220    	; 0xbba <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     c96:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
     c9a:	8f cf       	rjmp	.-226    	; 0xbba <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     c9c:	c8 01       	movw	r24, r16
     c9e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     ca2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>
     ca6:	89 cf       	rjmp	.-238    	; 0xbba <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     ca8:	c8 01       	movw	r24, r16
     caa:	0e 94 53 04 	call	0x8a6	; 0x8a6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     cae:	0e 94 2b 0a 	call	0x1456	; 0x1456 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     cb2:	c8 01       	movw	r24, r16
     cb4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <prvIsQueueEmpty>
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <xQueueSemaphoreTake+0x124>
     cbc:	7e cf       	rjmp	.-260    	; 0xbba <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     cbe:	ee 20       	and	r14, r14
     cc0:	81 f0       	breq	.+32     	; 0xce2 <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     cc8:	c8 01       	movw	r24, r16
     cca:	0e 94 c9 03 	call	0x792	; 0x792 <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     cce:	68 2f       	mov	r22, r24
     cd0:	f8 01       	movw	r30, r16
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <xQueueSemaphoreTake+0x14a>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     cfc:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxDelayedTaskList>
     d00:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxDelayedTaskList+0x1>
     d04:	80 81       	ld	r24, Z
     d06:	81 11       	cpse	r24, r1
     d08:	07 c0       	rjmp	.+14     	; 0xd18 <prvResetNextTaskUnblockTime+0x1c>
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	9f ef       	ldi	r25, 0xFF	; 255
     d0e:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xNextTaskUnblockTime+0x1>
     d12:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xNextTaskUnblockTime>
     d16:	08 95       	ret
     d18:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxDelayedTaskList>
     d1c:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxDelayedTaskList+0x1>
     d20:	05 80       	ldd	r0, Z+5	; 0x05
     d22:	f6 81       	ldd	r31, Z+6	; 0x06
     d24:	e0 2d       	mov	r30, r0
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xNextTaskUnblockTime+0x1>
     d2e:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xNextTaskUnblockTime>
     d32:	08 95       	ret

00000d34 <prvDeleteTCB>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	8f 89       	ldd	r24, Y+23	; 0x17
     d3c:	98 8d       	ldd	r25, Y+24	; 0x18
     d3e:	0e 94 2c 03 	call	0x658	; 0x658 <vPortFree>
     d42:	ce 01       	movw	r24, r28
     d44:	0e 94 2c 03 	call	0x658	; 0x658 <vPortFree>
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <prvInitialiseNewTask>:
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	4c 01       	movw	r8, r24
     d6e:	d5 01       	movw	r26, r10
     d70:	57 96       	adiw	r26, 0x17	; 23
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	58 97       	sbiw	r26, 0x18	; 24
     d78:	21 50       	subi	r18, 0x01	; 1
     d7a:	31 09       	sbc	r19, r1
     d7c:	3c 01       	movw	r6, r24
     d7e:	62 0e       	add	r6, r18
     d80:	73 1e       	adc	r7, r19
     d82:	61 15       	cp	r22, r1
     d84:	71 05       	cpc	r23, r1
     d86:	89 f4       	brne	.+34     	; 0xdaa <prvInitialiseNewTask+0x5c>
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <prvInitialiseNewTask+0x68>
     d8a:	82 2f       	mov	r24, r18
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fb 01       	movw	r30, r22
     d90:	e8 0f       	add	r30, r24
     d92:	f9 1f       	adc	r31, r25
     d94:	30 81       	ld	r19, Z
     d96:	d5 01       	movw	r26, r10
     d98:	a8 0f       	add	r26, r24
     d9a:	b9 1f       	adc	r27, r25
     d9c:	59 96       	adiw	r26, 0x19	; 25
     d9e:	3c 93       	st	X, r19
     da0:	80 81       	ld	r24, Z
     da2:	88 23       	and	r24, r24
     da4:	29 f0       	breq	.+10     	; 0xdb0 <prvInitialiseNewTask+0x62>
     da6:	2f 5f       	subi	r18, 0xFF	; 255
     da8:	01 c0       	rjmp	.+2      	; 0xdac <prvInitialiseNewTask+0x5e>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	28 30       	cpi	r18, 0x08	; 8
     dae:	68 f3       	brcs	.-38     	; 0xd8a <prvInitialiseNewTask+0x3c>
     db0:	f5 01       	movw	r30, r10
     db2:	10 a2       	std	Z+32, r1	; 0x20
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <prvInitialiseNewTask+0x6e>
     db6:	d5 01       	movw	r26, r10
     db8:	59 96       	adiw	r26, 0x19	; 25
     dba:	1c 92       	st	X, r1
     dbc:	b3 e0       	ldi	r27, 0x03	; 3
     dbe:	be 15       	cp	r27, r14
     dc0:	20 f4       	brcc	.+8      	; 0xdca <prvInitialiseNewTask+0x7c>
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f3 e0       	ldi	r31, 0x03	; 3
     dc6:	ef 2e       	mov	r14, r31
     dc8:	f0 2d       	mov	r31, r0
     dca:	f5 01       	movw	r30, r10
     dcc:	e6 8a       	std	Z+22, r14	; 0x16
     dce:	e1 a2       	std	Z+33, r14	; 0x21
     dd0:	12 a2       	std	Z+34, r1	; 0x22
     dd2:	c5 01       	movw	r24, r10
     dd4:	02 96       	adiw	r24, 0x02	; 2
     dd6:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInitialiseItem>
     dda:	c5 01       	movw	r24, r10
     ddc:	0c 96       	adiw	r24, 0x0c	; 12
     dde:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInitialiseItem>
     de2:	d5 01       	movw	r26, r10
     de4:	19 96       	adiw	r26, 0x09	; 9
     de6:	bc 92       	st	X, r11
     de8:	ae 92       	st	-X, r10
     dea:	18 97       	sbiw	r26, 0x08	; 8
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	8e 19       	sub	r24, r14
     df2:	91 09       	sbc	r25, r1
     df4:	1d 96       	adiw	r26, 0x0d	; 13
     df6:	9c 93       	st	X, r25
     df8:	8e 93       	st	-X, r24
     dfa:	1c 97       	sbiw	r26, 0x0c	; 12
     dfc:	53 96       	adiw	r26, 0x13	; 19
     dfe:	bc 92       	st	X, r11
     e00:	ae 92       	st	-X, r10
     e02:	52 97       	sbiw	r26, 0x12	; 18
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	f5 01       	movw	r30, r10
     e08:	b3 96       	adiw	r30, 0x23	; 35
     e0a:	df 01       	movw	r26, r30
     e0c:	1d 92       	st	X+, r1
     e0e:	8a 95       	dec	r24
     e10:	e9 f7       	brne	.-6      	; 0xe0c <prvInitialiseNewTask+0xbe>
     e12:	f5 01       	movw	r30, r10
     e14:	17 a2       	std	Z+39, r1	; 0x27
     e16:	a8 01       	movw	r20, r16
     e18:	b4 01       	movw	r22, r8
     e1a:	c3 01       	movw	r24, r6
     e1c:	0e 94 29 01 	call	0x252	; 0x252 <pxPortInitialiseStack>
     e20:	d5 01       	movw	r26, r10
     e22:	8d 93       	st	X+, r24
     e24:	9c 93       	st	X, r25
     e26:	c1 14       	cp	r12, r1
     e28:	d1 04       	cpc	r13, r1
     e2a:	19 f0       	breq	.+6      	; 0xe32 <prvInitialiseNewTask+0xe4>
     e2c:	f6 01       	movw	r30, r12
     e2e:	b1 82       	std	Z+1, r11	; 0x01
     e30:	a0 82       	st	Z, r10
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	7f 90       	pop	r7
     e4a:	6f 90       	pop	r6
     e4c:	08 95       	ret

00000e4e <prvInitialiseTaskLists>:
     e4e:	cf 93       	push	r28
     e50:	c0 e0       	ldi	r28, 0x00	; 0
     e52:	10 c0       	rjmp	.+32     	; 0xe74 <prvInitialiseTaskLists+0x26>
     e54:	8c 2f       	mov	r24, r28
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	9c 01       	movw	r18, r24
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	82 0f       	add	r24, r18
     e68:	93 1f       	adc	r25, r19
     e6a:	86 5a       	subi	r24, 0xA6	; 166
     e6c:	98 4f       	sbci	r25, 0xF8	; 248
     e6e:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     e72:	cf 5f       	subi	r28, 0xFF	; 255
     e74:	c4 30       	cpi	r28, 0x04	; 4
     e76:	70 f3       	brcs	.-36     	; 0xe54 <prvInitialiseTaskLists+0x6>
     e78:	81 e5       	ldi	r24, 0x51	; 81
     e7a:	97 e0       	ldi	r25, 0x07	; 7
     e7c:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     e80:	88 e4       	ldi	r24, 0x48	; 72
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     e88:	8b e3       	ldi	r24, 0x3B	; 59
     e8a:	97 e0       	ldi	r25, 0x07	; 7
     e8c:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     e90:	82 e3       	ldi	r24, 0x32	; 50
     e92:	97 e0       	ldi	r25, 0x07	; 7
     e94:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     e98:	88 e2       	ldi	r24, 0x28	; 40
     e9a:	97 e0       	ldi	r25, 0x07	; 7
     e9c:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
     ea0:	81 e5       	ldi	r24, 0x51	; 81
     ea2:	97 e0       	ldi	r25, 0x07	; 7
     ea4:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <pxDelayedTaskList+0x1>
     ea8:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <pxDelayedTaskList>
     eac:	88 e4       	ldi	r24, 0x48	; 72
     eae:	97 e0       	ldi	r25, 0x07	; 7
     eb0:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <pxOverflowDelayedTaskList+0x1>
     eb4:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <pxOverflowDelayedTaskList>
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <prvAddNewTaskToReadyList>:
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxCurrentNumberOfTasks>
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxCurrentNumberOfTasks>
     ed2:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <pxCurrentTCB>
     ed6:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     eda:	89 2b       	or	r24, r25
     edc:	59 f4       	brne	.+22     	; 0xef4 <prvAddNewTaskToReadyList+0x38>
     ede:	d0 93 7f 07 	sts	0x077F, r29	; 0x80077f <pxCurrentTCB+0x1>
     ee2:	c0 93 7e 07 	sts	0x077E, r28	; 0x80077e <pxCurrentTCB>
     ee6:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxCurrentNumberOfTasks>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	99 f4       	brne	.+38     	; 0xf14 <prvAddNewTaskToReadyList+0x58>
     eee:	0e 94 27 07 	call	0xe4e	; 0xe4e <prvInitialiseTaskLists>
     ef2:	10 c0       	rjmp	.+32     	; 0xf14 <prvAddNewTaskToReadyList+0x58>
     ef4:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xSchedulerRunning>
     ef8:	81 11       	cpse	r24, r1
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <prvAddNewTaskToReadyList+0x58>
     efc:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
     f00:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     f04:	96 89       	ldd	r25, Z+22	; 0x16
     f06:	8e 89       	ldd	r24, Y+22	; 0x16
     f08:	89 17       	cp	r24, r25
     f0a:	20 f0       	brcs	.+8      	; 0xf14 <prvAddNewTaskToReadyList+0x58>
     f0c:	d0 93 7f 07 	sts	0x077F, r29	; 0x80077f <pxCurrentTCB+0x1>
     f10:	c0 93 7e 07 	sts	0x077E, r28	; 0x80077e <pxCurrentTCB>
     f14:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <uxTaskNumber>
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <uxTaskNumber>
     f1e:	8e 89       	ldd	r24, Y+22	; 0x16
     f20:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
     f24:	98 17       	cp	r25, r24
     f26:	10 f4       	brcc	.+4      	; 0xf2c <prvAddNewTaskToReadyList+0x70>
     f28:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTopReadyPriority>
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	fc 01       	movw	r30, r24
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	8e 0f       	add	r24, r30
     f3e:	9f 1f       	adc	r25, r31
     f40:	fc 01       	movw	r30, r24
     f42:	e6 5a       	subi	r30, 0xA6	; 166
     f44:	f8 4f       	sbci	r31, 0xF8	; 248
     f46:	01 80       	ldd	r0, Z+1	; 0x01
     f48:	f2 81       	ldd	r31, Z+2	; 0x02
     f4a:	e0 2d       	mov	r30, r0
     f4c:	fd 83       	std	Y+5, r31	; 0x05
     f4e:	ec 83       	std	Y+4, r30	; 0x04
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	95 81       	ldd	r25, Z+5	; 0x05
     f54:	9f 83       	std	Y+7, r25	; 0x07
     f56:	8e 83       	std	Y+6, r24	; 0x06
     f58:	a4 81       	ldd	r26, Z+4	; 0x04
     f5a:	b5 81       	ldd	r27, Z+5	; 0x05
     f5c:	ce 01       	movw	r24, r28
     f5e:	02 96       	adiw	r24, 0x02	; 2
     f60:	13 96       	adiw	r26, 0x03	; 3
     f62:	9c 93       	st	X, r25
     f64:	8e 93       	st	-X, r24
     f66:	12 97       	sbiw	r26, 0x02	; 2
     f68:	95 83       	std	Z+5, r25	; 0x05
     f6a:	84 83       	std	Z+4, r24	; 0x04
     f6c:	ee 89       	ldd	r30, Y+22	; 0x16
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	cf 01       	movw	r24, r30
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	e8 0f       	add	r30, r24
     f80:	f9 1f       	adc	r31, r25
     f82:	e6 5a       	subi	r30, 0xA6	; 166
     f84:	f8 4f       	sbci	r31, 0xF8	; 248
     f86:	fb 87       	std	Y+11, r31	; 0x0b
     f88:	ea 87       	std	Y+10, r30	; 0x0a
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 83       	st	Z, r24
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <xSchedulerRunning>
     f98:	88 23       	and	r24, r24
     f9a:	51 f0       	breq	.+20     	; 0xfb0 <prvAddNewTaskToReadyList+0xf4>
     f9c:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
     fa0:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
     fa4:	96 89       	ldd	r25, Z+22	; 0x16
     fa6:	8e 89       	ldd	r24, Y+22	; 0x16
     fa8:	98 17       	cp	r25, r24
     faa:	10 f4       	brcc	.+4      	; 0xfb0 <prvAddNewTaskToReadyList+0xf4>
     fac:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <prvCheckTasksWaitingTermination>:
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1c c0       	rjmp	.+56     	; 0xff4 <prvCheckTasksWaitingTermination+0x3e>
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	0f 92       	push	r0
     fc2:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <xTasksWaitingTermination+0x5>
     fc6:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <xTasksWaitingTermination+0x6>
     fca:	c6 81       	ldd	r28, Z+6	; 0x06
     fcc:	d7 81       	ldd	r29, Z+7	; 0x07
     fce:	ce 01       	movw	r24, r28
     fd0:	02 96       	adiw	r24, 0x02	; 2
     fd2:	0e 94 a2 03 	call	0x744	; 0x744 <uxListRemove>
     fd6:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxCurrentNumberOfTasks>
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <uxCurrentNumberOfTasks>
     fe0:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxDeletedTasksWaitingCleanUp>
     fe4:	81 50       	subi	r24, 0x01	; 1
     fe6:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <uxDeletedTasksWaitingCleanUp>
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 9a 06 	call	0xd34	; 0xd34 <prvDeleteTCB>
     ff4:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <uxDeletedTasksWaitingCleanUp>
     ff8:	81 11       	cpse	r24, r1
     ffa:	e0 cf       	rjmp	.-64     	; 0xfbc <prvCheckTasksWaitingTermination+0x6>
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <prvIdleTask>:
    1002:	0e 94 db 07 	call	0xfb6	; 0xfb6 <prvCheckTasksWaitingTermination>
    1006:	80 91 5a 07 	lds	r24, 0x075A	; 0x80075a <pxReadyTasksLists>
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	d0 f3       	brcs	.-12     	; 0x1002 <prvIdleTask>
    100e:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
    1012:	f7 cf       	rjmp	.-18     	; 0x1002 <prvIdleTask>

00001014 <prvAddCurrentTaskToDelayedList>:
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	ec 01       	movw	r28, r24
    1020:	f6 2e       	mov	r15, r22
    1022:	00 91 25 07 	lds	r16, 0x0725	; 0x800725 <xTickCount>
    1026:	10 91 26 07 	lds	r17, 0x0726	; 0x800726 <xTickCount+0x1>
    102a:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <pxCurrentTCB>
    102e:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1032:	02 96       	adiw	r24, 0x02	; 2
    1034:	0e 94 a2 03 	call	0x744	; 0x744 <uxListRemove>
    1038:	cf 3f       	cpi	r28, 0xFF	; 255
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	d8 07       	cpc	r29, r24
    103e:	b1 f5       	brne	.+108    	; 0x10ac <prvAddCurrentTaskToDelayedList+0x98>
    1040:	ff 20       	and	r15, r15
    1042:	a1 f1       	breq	.+104    	; 0x10ac <prvAddCurrentTaskToDelayedList+0x98>
    1044:	e8 e2       	ldi	r30, 0x28	; 40
    1046:	f7 e0       	ldi	r31, 0x07	; 7
    1048:	a1 81       	ldd	r26, Z+1	; 0x01
    104a:	b2 81       	ldd	r27, Z+2	; 0x02
    104c:	c0 91 7e 07 	lds	r28, 0x077E	; 0x80077e <pxCurrentTCB>
    1050:	d0 91 7f 07 	lds	r29, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1054:	bd 83       	std	Y+5, r27	; 0x05
    1056:	ac 83       	std	Y+4, r26	; 0x04
    1058:	c0 91 7e 07 	lds	r28, 0x077E	; 0x80077e <pxCurrentTCB>
    105c:	d0 91 7f 07 	lds	r29, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1060:	14 96       	adiw	r26, 0x04	; 4
    1062:	8d 91       	ld	r24, X+
    1064:	9c 91       	ld	r25, X
    1066:	15 97       	sbiw	r26, 0x05	; 5
    1068:	9f 83       	std	Y+7, r25	; 0x07
    106a:	8e 83       	std	Y+6, r24	; 0x06
    106c:	14 96       	adiw	r26, 0x04	; 4
    106e:	cd 91       	ld	r28, X+
    1070:	dc 91       	ld	r29, X
    1072:	15 97       	sbiw	r26, 0x05	; 5
    1074:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <pxCurrentTCB>
    1078:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    107c:	02 96       	adiw	r24, 0x02	; 2
    107e:	9b 83       	std	Y+3, r25	; 0x03
    1080:	8a 83       	std	Y+2, r24	; 0x02
    1082:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <pxCurrentTCB>
    1086:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    108a:	02 96       	adiw	r24, 0x02	; 2
    108c:	15 96       	adiw	r26, 0x05	; 5
    108e:	9c 93       	st	X, r25
    1090:	8e 93       	st	-X, r24
    1092:	14 97       	sbiw	r26, 0x04	; 4
    1094:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
    1098:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    109c:	1b 96       	adiw	r26, 0x0b	; 11
    109e:	fc 93       	st	X, r31
    10a0:	ee 93       	st	-X, r30
    10a2:	1a 97       	sbiw	r26, 0x0a	; 10
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	80 83       	st	Z, r24
    10aa:	2f c0       	rjmp	.+94     	; 0x110a <prvAddCurrentTaskToDelayedList+0xf6>
    10ac:	c0 0f       	add	r28, r16
    10ae:	d1 1f       	adc	r29, r17
    10b0:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    10b4:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    10b8:	d3 83       	std	Z+3, r29	; 0x03
    10ba:	c2 83       	std	Z+2, r28	; 0x02
    10bc:	c0 17       	cp	r28, r16
    10be:	d1 07       	cpc	r29, r17
    10c0:	68 f4       	brcc	.+26     	; 0x10dc <prvAddCurrentTaskToDelayedList+0xc8>
    10c2:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <pxCurrentTCB>
    10c6:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    10ca:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <pxOverflowDelayedTaskList>
    10ce:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <pxOverflowDelayedTaskList+0x1>
    10d2:	6e 5f       	subi	r22, 0xFE	; 254
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInsert>
    10da:	17 c0       	rjmp	.+46     	; 0x110a <prvAddCurrentTaskToDelayedList+0xf6>
    10dc:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <pxCurrentTCB>
    10e0:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    10e4:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <pxDelayedTaskList>
    10e8:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <pxDelayedTaskList+0x1>
    10ec:	6e 5f       	subi	r22, 0xFE	; 254
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInsert>
    10f4:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xNextTaskUnblockTime>
    10f8:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xNextTaskUnblockTime+0x1>
    10fc:	c8 17       	cp	r28, r24
    10fe:	d9 07       	cpc	r29, r25
    1100:	20 f4       	brcc	.+8      	; 0x110a <prvAddCurrentTaskToDelayedList+0xf6>
    1102:	d0 93 1d 07 	sts	0x071D, r29	; 0x80071d <xNextTaskUnblockTime+0x1>
    1106:	c0 93 1c 07 	sts	0x071C, r28	; 0x80071c <xNextTaskUnblockTime>
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	08 95       	ret

00001116 <xTaskCreate>:
    1116:	2f 92       	push	r2
    1118:	3f 92       	push	r3
    111a:	4f 92       	push	r4
    111c:	5f 92       	push	r5
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	3c 01       	movw	r6, r24
    113c:	1b 01       	movw	r2, r22
    113e:	5a 01       	movw	r10, r20
    1140:	29 01       	movw	r4, r18
    1142:	ca 01       	movw	r24, r20
    1144:	0e 94 97 02 	call	0x52e	; 0x52e <pvPortMalloc>
    1148:	6c 01       	movw	r12, r24
    114a:	89 2b       	or	r24, r25
    114c:	71 f0       	breq	.+28     	; 0x116a <xTaskCreate+0x54>
    114e:	88 e2       	ldi	r24, 0x28	; 40
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 97 02 	call	0x52e	; 0x52e <pvPortMalloc>
    1156:	ec 01       	movw	r28, r24
    1158:	89 2b       	or	r24, r25
    115a:	19 f0       	breq	.+6      	; 0x1162 <xTaskCreate+0x4c>
    115c:	d8 8e       	std	Y+24, r13	; 0x18
    115e:	cf 8a       	std	Y+23, r12	; 0x17
    1160:	06 c0       	rjmp	.+12     	; 0x116e <xTaskCreate+0x58>
    1162:	c6 01       	movw	r24, r12
    1164:	0e 94 2c 03 	call	0x658	; 0x658 <vPortFree>
    1168:	02 c0       	rjmp	.+4      	; 0x116e <xTaskCreate+0x58>
    116a:	c0 e0       	ldi	r28, 0x00	; 0
    116c:	d0 e0       	ldi	r29, 0x00	; 0
    116e:	20 97       	sbiw	r28, 0x00	; 0
    1170:	91 f0       	breq	.+36     	; 0x1196 <xTaskCreate+0x80>
    1172:	95 01       	movw	r18, r10
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	81 2c       	mov	r8, r1
    117a:	91 2c       	mov	r9, r1
    117c:	5e 01       	movw	r10, r28
    117e:	67 01       	movw	r12, r14
    1180:	e0 2e       	mov	r14, r16
    1182:	82 01       	movw	r16, r4
    1184:	b1 01       	movw	r22, r2
    1186:	c3 01       	movw	r24, r6
    1188:	0e 94 a7 06 	call	0xd4e	; 0xd4e <prvInitialiseNewTask>
    118c:	ce 01       	movw	r24, r28
    118e:	0e 94 5e 07 	call	0xebc	; 0xebc <prvAddNewTaskToReadyList>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <xTaskCreate+0x82>
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	bf 90       	pop	r11
    11aa:	af 90       	pop	r10
    11ac:	9f 90       	pop	r9
    11ae:	8f 90       	pop	r8
    11b0:	7f 90       	pop	r7
    11b2:	6f 90       	pop	r6
    11b4:	5f 90       	pop	r5
    11b6:	4f 90       	pop	r4
    11b8:	3f 90       	pop	r3
    11ba:	2f 90       	pop	r2
    11bc:	08 95       	ret

000011be <vTaskStartScheduler>:
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	0f 2e       	mov	r0, r31
    11c6:	fa e1       	ldi	r31, 0x1A	; 26
    11c8:	ef 2e       	mov	r14, r31
    11ca:	f7 e0       	ldi	r31, 0x07	; 7
    11cc:	ff 2e       	mov	r15, r31
    11ce:	f0 2d       	mov	r31, r0
    11d0:	00 e0       	ldi	r16, 0x00	; 0
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	45 e5       	ldi	r20, 0x55	; 85
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	71 e0       	ldi	r23, 0x01	; 1
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	98 e0       	ldi	r25, 0x08	; 8
    11e2:	0e 94 8b 08 	call	0x1116	; 0x1116 <xTaskCreate>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	81 f4       	brne	.+32     	; 0x120a <vTaskStartScheduler+0x4c>
    11ea:	f8 94       	cli
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	9f ef       	ldi	r25, 0xFF	; 255
    11f0:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xNextTaskUnblockTime+0x1>
    11f4:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xNextTaskUnblockTime>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <xSchedulerRunning>
    11fe:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <xTickCount+0x1>
    1202:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <xTickCount>
    1206:	0e 94 95 01 	call	0x32a	; 0x32a <xPortStartScheduler>
    120a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	08 95       	ret

00001216 <vTaskSuspendAll>:
    1216:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxSchedulerSuspended>
    1220:	08 95       	ret

00001222 <xTaskIncrementTick>:
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
    122e:	81 11       	cpse	r24, r1
    1230:	01 c1       	rjmp	.+514    	; 0x1434 <xTaskIncrementTick+0x212>
    1232:	c0 91 25 07 	lds	r28, 0x0725	; 0x800725 <xTickCount>
    1236:	d0 91 26 07 	lds	r29, 0x0726	; 0x800726 <xTickCount+0x1>
    123a:	8e 01       	movw	r16, r28
    123c:	0f 5f       	subi	r16, 0xFF	; 255
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	10 93 26 07 	sts	0x0726, r17	; 0x800726 <xTickCount+0x1>
    1244:	00 93 25 07 	sts	0x0725, r16	; 0x800725 <xTickCount>
    1248:	01 15       	cp	r16, r1
    124a:	11 05       	cpc	r17, r1
    124c:	b9 f4       	brne	.+46     	; 0x127c <xTaskIncrementTick+0x5a>
    124e:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <pxDelayedTaskList>
    1252:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <pxDelayedTaskList+0x1>
    1256:	20 91 44 07 	lds	r18, 0x0744	; 0x800744 <pxOverflowDelayedTaskList>
    125a:	30 91 45 07 	lds	r19, 0x0745	; 0x800745 <pxOverflowDelayedTaskList+0x1>
    125e:	30 93 47 07 	sts	0x0747, r19	; 0x800747 <pxDelayedTaskList+0x1>
    1262:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <pxDelayedTaskList>
    1266:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <pxOverflowDelayedTaskList+0x1>
    126a:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <pxOverflowDelayedTaskList>
    126e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <xNumOfOverflows>
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <xNumOfOverflows>
    1278:	0e 94 7e 06 	call	0xcfc	; 0xcfc <prvResetNextTaskUnblockTime>
    127c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xNextTaskUnblockTime>
    1280:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xNextTaskUnblockTime+0x1>
    1284:	08 17       	cp	r16, r24
    1286:	19 07       	cpc	r17, r25
    1288:	20 f4       	brcc	.+8      	; 0x1292 <xTaskIncrementTick+0x70>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	b8 c0       	rjmp	.+368    	; 0x13fe <xTaskIncrementTick+0x1dc>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <xTaskIncrementTick+0x72>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxDelayedTaskList>
    1298:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxDelayedTaskList+0x1>
    129c:	90 81       	ld	r25, Z
    129e:	91 11       	cpse	r25, r1
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <xTaskIncrementTick+0x8e>
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	30 93 1d 07 	sts	0x071D, r19	; 0x80071d <xNextTaskUnblockTime+0x1>
    12aa:	20 93 1c 07 	sts	0x071C, r18	; 0x80071c <xNextTaskUnblockTime>
    12ae:	a7 c0       	rjmp	.+334    	; 0x13fe <xTaskIncrementTick+0x1dc>
    12b0:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxDelayedTaskList>
    12b4:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxDelayedTaskList+0x1>
    12b8:	05 80       	ldd	r0, Z+5	; 0x05
    12ba:	f6 81       	ldd	r31, Z+6	; 0x06
    12bc:	e0 2d       	mov	r30, r0
    12be:	06 80       	ldd	r0, Z+6	; 0x06
    12c0:	f7 81       	ldd	r31, Z+7	; 0x07
    12c2:	e0 2d       	mov	r30, r0
    12c4:	22 81       	ldd	r18, Z+2	; 0x02
    12c6:	33 81       	ldd	r19, Z+3	; 0x03
    12c8:	02 17       	cp	r16, r18
    12ca:	13 07       	cpc	r17, r19
    12cc:	28 f4       	brcc	.+10     	; 0x12d8 <xTaskIncrementTick+0xb6>
    12ce:	30 93 1d 07 	sts	0x071D, r19	; 0x80071d <xNextTaskUnblockTime+0x1>
    12d2:	20 93 1c 07 	sts	0x071C, r18	; 0x80071c <xNextTaskUnblockTime>
    12d6:	93 c0       	rjmp	.+294    	; 0x13fe <xTaskIncrementTick+0x1dc>
    12d8:	a2 85       	ldd	r26, Z+10	; 0x0a
    12da:	b3 85       	ldd	r27, Z+11	; 0x0b
    12dc:	24 81       	ldd	r18, Z+4	; 0x04
    12de:	35 81       	ldd	r19, Z+5	; 0x05
    12e0:	46 81       	ldd	r20, Z+6	; 0x06
    12e2:	57 81       	ldd	r21, Z+7	; 0x07
    12e4:	e9 01       	movw	r28, r18
    12e6:	5d 83       	std	Y+5, r21	; 0x05
    12e8:	4c 83       	std	Y+4, r20	; 0x04
    12ea:	26 81       	ldd	r18, Z+6	; 0x06
    12ec:	37 81       	ldd	r19, Z+7	; 0x07
    12ee:	44 81       	ldd	r20, Z+4	; 0x04
    12f0:	55 81       	ldd	r21, Z+5	; 0x05
    12f2:	e9 01       	movw	r28, r18
    12f4:	5b 83       	std	Y+3, r21	; 0x03
    12f6:	4a 83       	std	Y+2, r20	; 0x02
    12f8:	11 96       	adiw	r26, 0x01	; 1
    12fa:	2d 91       	ld	r18, X+
    12fc:	3c 91       	ld	r19, X
    12fe:	12 97       	sbiw	r26, 0x02	; 2
    1300:	af 01       	movw	r20, r30
    1302:	4e 5f       	subi	r20, 0xFE	; 254
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	24 17       	cp	r18, r20
    1308:	35 07       	cpc	r19, r21
    130a:	31 f4       	brne	.+12     	; 0x1318 <xTaskIncrementTick+0xf6>
    130c:	26 81       	ldd	r18, Z+6	; 0x06
    130e:	37 81       	ldd	r19, Z+7	; 0x07
    1310:	12 96       	adiw	r26, 0x02	; 2
    1312:	3c 93       	st	X, r19
    1314:	2e 93       	st	-X, r18
    1316:	11 97       	sbiw	r26, 0x01	; 1
    1318:	13 86       	std	Z+11, r1	; 0x0b
    131a:	12 86       	std	Z+10, r1	; 0x0a
    131c:	9c 91       	ld	r25, X
    131e:	91 50       	subi	r25, 0x01	; 1
    1320:	9c 93       	st	X, r25
    1322:	a4 89       	ldd	r26, Z+20	; 0x14
    1324:	b5 89       	ldd	r27, Z+21	; 0x15
    1326:	10 97       	sbiw	r26, 0x00	; 0
    1328:	19 f1       	breq	.+70     	; 0x1370 <xTaskIncrementTick+0x14e>
    132a:	26 85       	ldd	r18, Z+14	; 0x0e
    132c:	37 85       	ldd	r19, Z+15	; 0x0f
    132e:	60 89       	ldd	r22, Z+16	; 0x10
    1330:	71 89       	ldd	r23, Z+17	; 0x11
    1332:	e9 01       	movw	r28, r18
    1334:	7d 83       	std	Y+5, r23	; 0x05
    1336:	6c 83       	std	Y+4, r22	; 0x04
    1338:	20 89       	ldd	r18, Z+16	; 0x10
    133a:	31 89       	ldd	r19, Z+17	; 0x11
    133c:	66 85       	ldd	r22, Z+14	; 0x0e
    133e:	77 85       	ldd	r23, Z+15	; 0x0f
    1340:	e9 01       	movw	r28, r18
    1342:	7b 83       	std	Y+3, r23	; 0x03
    1344:	6a 83       	std	Y+2, r22	; 0x02
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	6d 91       	ld	r22, X+
    134a:	7c 91       	ld	r23, X
    134c:	12 97       	sbiw	r26, 0x02	; 2
    134e:	9f 01       	movw	r18, r30
    1350:	24 5f       	subi	r18, 0xF4	; 244
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	62 17       	cp	r22, r18
    1356:	73 07       	cpc	r23, r19
    1358:	31 f4       	brne	.+12     	; 0x1366 <xTaskIncrementTick+0x144>
    135a:	20 89       	ldd	r18, Z+16	; 0x10
    135c:	31 89       	ldd	r19, Z+17	; 0x11
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	3c 93       	st	X, r19
    1362:	2e 93       	st	-X, r18
    1364:	11 97       	sbiw	r26, 0x01	; 1
    1366:	15 8a       	std	Z+21, r1	; 0x15
    1368:	14 8a       	std	Z+20, r1	; 0x14
    136a:	9c 91       	ld	r25, X
    136c:	91 50       	subi	r25, 0x01	; 1
    136e:	9c 93       	st	X, r25
    1370:	26 89       	ldd	r18, Z+22	; 0x16
    1372:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
    1376:	92 17       	cp	r25, r18
    1378:	10 f4       	brcc	.+4      	; 0x137e <xTaskIncrementTick+0x15c>
    137a:	20 93 24 07 	sts	0x0724, r18	; 0x800724 <uxTopReadyPriority>
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	d9 01       	movw	r26, r18
    1382:	aa 0f       	add	r26, r26
    1384:	bb 1f       	adc	r27, r27
    1386:	aa 0f       	add	r26, r26
    1388:	bb 1f       	adc	r27, r27
    138a:	aa 0f       	add	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	2a 0f       	add	r18, r26
    1390:	3b 1f       	adc	r19, r27
    1392:	d9 01       	movw	r26, r18
    1394:	a6 5a       	subi	r26, 0xA6	; 166
    1396:	b8 4f       	sbci	r27, 0xF8	; 248
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	0d 90       	ld	r0, X+
    139c:	bc 91       	ld	r27, X
    139e:	a0 2d       	mov	r26, r0
    13a0:	b5 83       	std	Z+5, r27	; 0x05
    13a2:	a4 83       	std	Z+4, r26	; 0x04
    13a4:	14 96       	adiw	r26, 0x04	; 4
    13a6:	2d 91       	ld	r18, X+
    13a8:	3c 91       	ld	r19, X
    13aa:	15 97       	sbiw	r26, 0x05	; 5
    13ac:	37 83       	std	Z+7, r19	; 0x07
    13ae:	26 83       	std	Z+6, r18	; 0x06
    13b0:	14 96       	adiw	r26, 0x04	; 4
    13b2:	2d 91       	ld	r18, X+
    13b4:	3c 91       	ld	r19, X
    13b6:	15 97       	sbiw	r26, 0x05	; 5
    13b8:	e9 01       	movw	r28, r18
    13ba:	5b 83       	std	Y+3, r21	; 0x03
    13bc:	4a 83       	std	Y+2, r20	; 0x02
    13be:	15 96       	adiw	r26, 0x05	; 5
    13c0:	5c 93       	st	X, r21
    13c2:	4e 93       	st	-X, r20
    13c4:	14 97       	sbiw	r26, 0x04	; 4
    13c6:	a6 89       	ldd	r26, Z+22	; 0x16
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	9d 01       	movw	r18, r26
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	22 0f       	add	r18, r18
    13d6:	33 1f       	adc	r19, r19
    13d8:	a2 0f       	add	r26, r18
    13da:	b3 1f       	adc	r27, r19
    13dc:	a6 5a       	subi	r26, 0xA6	; 166
    13de:	b8 4f       	sbci	r27, 0xF8	; 248
    13e0:	b3 87       	std	Z+11, r27	; 0x0b
    13e2:	a2 87       	std	Z+10, r26	; 0x0a
    13e4:	9c 91       	ld	r25, X
    13e6:	9f 5f       	subi	r25, 0xFF	; 255
    13e8:	9c 93       	st	X, r25
    13ea:	26 89       	ldd	r18, Z+22	; 0x16
    13ec:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    13f0:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    13f4:	96 89       	ldd	r25, Z+22	; 0x16
    13f6:	29 17       	cp	r18, r25
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <xTaskIncrementTick+0x1da>
    13fa:	49 cf       	rjmp	.-366    	; 0x128e <xTaskIncrementTick+0x6c>
    13fc:	4b cf       	rjmp	.-362    	; 0x1294 <xTaskIncrementTick+0x72>
    13fe:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    1402:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1406:	26 89       	ldd	r18, Z+22	; 0x16
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f9 01       	movw	r30, r18
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	2e 0f       	add	r18, r30
    141a:	3f 1f       	adc	r19, r31
    141c:	f9 01       	movw	r30, r18
    141e:	e6 5a       	subi	r30, 0xA6	; 166
    1420:	f8 4f       	sbci	r31, 0xF8	; 248
    1422:	90 81       	ld	r25, Z
    1424:	92 30       	cpi	r25, 0x02	; 2
    1426:	08 f0       	brcs	.+2      	; 0x142a <xTaskIncrementTick+0x208>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xYieldPending>
    142e:	91 11       	cpse	r25, r1
    1430:	0c c0       	rjmp	.+24     	; 0x144a <xTaskIncrementTick+0x228>
    1432:	0c c0       	rjmp	.+24     	; 0x144c <xTaskIncrementTick+0x22a>
    1434:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xPendedTicks>
    1438:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <xPendedTicks+0x1>
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <xPendedTicks+0x1>
    1442:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <xPendedTicks>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	01 c0       	rjmp	.+2      	; 0x144c <xTaskIncrementTick+0x22a>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <xTaskResumeAll>:
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	0f 92       	push	r0
    1460:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
    1464:	81 50       	subi	r24, 0x01	; 1
    1466:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxSchedulerSuspended>
    146a:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
    146e:	81 11       	cpse	r24, r1
    1470:	bf c0       	rjmp	.+382    	; 0x15f0 <xTaskResumeAll+0x19a>
    1472:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <uxCurrentNumberOfTasks>
    1476:	81 11       	cpse	r24, r1
    1478:	96 c0       	rjmp	.+300    	; 0x15a6 <xTaskResumeAll+0x150>
    147a:	bd c0       	rjmp	.+378    	; 0x15f6 <xTaskResumeAll+0x1a0>
    147c:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <xPendingReadyList+0x5>
    1480:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <xPendingReadyList+0x6>
    1484:	06 80       	ldd	r0, Z+6	; 0x06
    1486:	f7 81       	ldd	r31, Z+7	; 0x07
    1488:	e0 2d       	mov	r30, r0
    148a:	a4 89       	ldd	r26, Z+20	; 0x14
    148c:	b5 89       	ldd	r27, Z+21	; 0x15
    148e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1490:	d7 85       	ldd	r29, Z+15	; 0x0f
    1492:	80 89       	ldd	r24, Z+16	; 0x10
    1494:	91 89       	ldd	r25, Z+17	; 0x11
    1496:	9d 83       	std	Y+5, r25	; 0x05
    1498:	8c 83       	std	Y+4, r24	; 0x04
    149a:	c0 89       	ldd	r28, Z+16	; 0x10
    149c:	d1 89       	ldd	r29, Z+17	; 0x11
    149e:	86 85       	ldd	r24, Z+14	; 0x0e
    14a0:	97 85       	ldd	r25, Z+15	; 0x0f
    14a2:	9b 83       	std	Y+3, r25	; 0x03
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	2d 91       	ld	r18, X+
    14aa:	3c 91       	ld	r19, X
    14ac:	12 97       	sbiw	r26, 0x02	; 2
    14ae:	cf 01       	movw	r24, r30
    14b0:	0c 96       	adiw	r24, 0x0c	; 12
    14b2:	28 17       	cp	r18, r24
    14b4:	39 07       	cpc	r19, r25
    14b6:	31 f4       	brne	.+12     	; 0x14c4 <xTaskResumeAll+0x6e>
    14b8:	80 89       	ldd	r24, Z+16	; 0x10
    14ba:	91 89       	ldd	r25, Z+17	; 0x11
    14bc:	12 96       	adiw	r26, 0x02	; 2
    14be:	9c 93       	st	X, r25
    14c0:	8e 93       	st	-X, r24
    14c2:	11 97       	sbiw	r26, 0x01	; 1
    14c4:	15 8a       	std	Z+21, r1	; 0x15
    14c6:	14 8a       	std	Z+20, r1	; 0x14
    14c8:	8c 91       	ld	r24, X
    14ca:	81 50       	subi	r24, 0x01	; 1
    14cc:	8c 93       	st	X, r24
    14ce:	a2 85       	ldd	r26, Z+10	; 0x0a
    14d0:	b3 85       	ldd	r27, Z+11	; 0x0b
    14d2:	c4 81       	ldd	r28, Z+4	; 0x04
    14d4:	d5 81       	ldd	r29, Z+5	; 0x05
    14d6:	86 81       	ldd	r24, Z+6	; 0x06
    14d8:	97 81       	ldd	r25, Z+7	; 0x07
    14da:	9d 83       	std	Y+5, r25	; 0x05
    14dc:	8c 83       	std	Y+4, r24	; 0x04
    14de:	c6 81       	ldd	r28, Z+6	; 0x06
    14e0:	d7 81       	ldd	r29, Z+7	; 0x07
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	95 81       	ldd	r25, Z+5	; 0x05
    14e6:	9b 83       	std	Y+3, r25	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	8d 91       	ld	r24, X+
    14ee:	9c 91       	ld	r25, X
    14f0:	12 97       	sbiw	r26, 0x02	; 2
    14f2:	9f 01       	movw	r18, r30
    14f4:	2e 5f       	subi	r18, 0xFE	; 254
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	82 17       	cp	r24, r18
    14fa:	93 07       	cpc	r25, r19
    14fc:	31 f4       	brne	.+12     	; 0x150a <xTaskResumeAll+0xb4>
    14fe:	86 81       	ldd	r24, Z+6	; 0x06
    1500:	97 81       	ldd	r25, Z+7	; 0x07
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
    1508:	11 97       	sbiw	r26, 0x01	; 1
    150a:	13 86       	std	Z+11, r1	; 0x0b
    150c:	12 86       	std	Z+10, r1	; 0x0a
    150e:	8c 91       	ld	r24, X
    1510:	81 50       	subi	r24, 0x01	; 1
    1512:	8c 93       	st	X, r24
    1514:	86 89       	ldd	r24, Z+22	; 0x16
    1516:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
    151a:	98 17       	cp	r25, r24
    151c:	10 f4       	brcc	.+4      	; 0x1522 <xTaskResumeAll+0xcc>
    151e:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTopReadyPriority>
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	dc 01       	movw	r26, r24
    1526:	aa 0f       	add	r26, r26
    1528:	bb 1f       	adc	r27, r27
    152a:	aa 0f       	add	r26, r26
    152c:	bb 1f       	adc	r27, r27
    152e:	aa 0f       	add	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	8a 0f       	add	r24, r26
    1534:	9b 1f       	adc	r25, r27
    1536:	dc 01       	movw	r26, r24
    1538:	a6 5a       	subi	r26, 0xA6	; 166
    153a:	b8 4f       	sbci	r27, 0xF8	; 248
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	0d 90       	ld	r0, X+
    1540:	bc 91       	ld	r27, X
    1542:	a0 2d       	mov	r26, r0
    1544:	b5 83       	std	Z+5, r27	; 0x05
    1546:	a4 83       	std	Z+4, r26	; 0x04
    1548:	14 96       	adiw	r26, 0x04	; 4
    154a:	8d 91       	ld	r24, X+
    154c:	9c 91       	ld	r25, X
    154e:	15 97       	sbiw	r26, 0x05	; 5
    1550:	97 83       	std	Z+7, r25	; 0x07
    1552:	86 83       	std	Z+6, r24	; 0x06
    1554:	14 96       	adiw	r26, 0x04	; 4
    1556:	cd 91       	ld	r28, X+
    1558:	dc 91       	ld	r29, X
    155a:	15 97       	sbiw	r26, 0x05	; 5
    155c:	3b 83       	std	Y+3, r19	; 0x03
    155e:	2a 83       	std	Y+2, r18	; 0x02
    1560:	15 96       	adiw	r26, 0x05	; 5
    1562:	3c 93       	st	X, r19
    1564:	2e 93       	st	-X, r18
    1566:	14 97       	sbiw	r26, 0x04	; 4
    1568:	a6 89       	ldd	r26, Z+22	; 0x16
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	cd 01       	movw	r24, r26
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	a8 0f       	add	r26, r24
    157c:	b9 1f       	adc	r27, r25
    157e:	a6 5a       	subi	r26, 0xA6	; 166
    1580:	b8 4f       	sbci	r27, 0xF8	; 248
    1582:	b3 87       	std	Z+11, r27	; 0x0b
    1584:	a2 87       	std	Z+10, r26	; 0x0a
    1586:	8c 91       	ld	r24, X
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	8c 93       	st	X, r24
    158c:	96 89       	ldd	r25, Z+22	; 0x16
    158e:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
    1592:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1596:	56 96       	adiw	r26, 0x16	; 22
    1598:	8c 91       	ld	r24, X
    159a:	98 17       	cp	r25, r24
    159c:	30 f0       	brcs	.+12     	; 0x15aa <xTaskResumeAll+0x154>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xYieldPending>
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <xTaskResumeAll+0x154>
    15a6:	e0 e0       	ldi	r30, 0x00	; 0
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <xPendingReadyList>
    15ae:	81 11       	cpse	r24, r1
    15b0:	65 cf       	rjmp	.-310    	; 0x147c <xTaskResumeAll+0x26>
    15b2:	ef 2b       	or	r30, r31
    15b4:	11 f0       	breq	.+4      	; 0x15ba <xTaskResumeAll+0x164>
    15b6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <prvResetNextTaskUnblockTime>
    15ba:	c0 91 21 07 	lds	r28, 0x0721	; 0x800721 <xPendedTicks>
    15be:	d0 91 22 07 	lds	r29, 0x0722	; 0x800722 <xPendedTicks+0x1>
    15c2:	20 97       	sbiw	r28, 0x00	; 0
    15c4:	69 f0       	breq	.+26     	; 0x15e0 <xTaskResumeAll+0x18a>
    15c6:	0e 94 11 09 	call	0x1222	; 0x1222 <xTaskIncrementTick>
    15ca:	88 23       	and	r24, r24
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <xTaskResumeAll+0x17e>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xYieldPending>
    15d4:	21 97       	sbiw	r28, 0x01	; 1
    15d6:	b9 f7       	brne	.-18     	; 0x15c6 <xTaskResumeAll+0x170>
    15d8:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <xPendedTicks+0x1>
    15dc:	10 92 21 07 	sts	0x0721, r1	; 0x800721 <xPendedTicks>
    15e0:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xYieldPending>
    15e4:	88 23       	and	r24, r24
    15e6:	31 f0       	breq	.+12     	; 0x15f4 <xTaskResumeAll+0x19e>
    15e8:	0e 94 c4 01 	call	0x388	; 0x388 <vPortYield>
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <xTaskResumeAll+0x1a0>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <xTaskResumeAll+0x1a0>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <vTaskSwitchContext>:
    1600:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
    1604:	88 23       	and	r24, r24
    1606:	21 f0       	breq	.+8      	; 0x1610 <vTaskSwitchContext+0x10>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xYieldPending>
    160e:	08 95       	ret
    1610:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <xYieldPending>
    1614:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <uxTopReadyPriority>
    1618:	01 c0       	rjmp	.+2      	; 0x161c <vTaskSwitchContext+0x1c>
    161a:	21 50       	subi	r18, 0x01	; 1
    161c:	82 2f       	mov	r24, r18
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	ee 0f       	add	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	e6 5a       	subi	r30, 0xA6	; 166
    1634:	f8 4f       	sbci	r31, 0xF8	; 248
    1636:	30 81       	ld	r19, Z
    1638:	33 23       	and	r19, r19
    163a:	79 f3       	breq	.-34     	; 0x161a <vTaskSwitchContext+0x1a>
    163c:	ac 01       	movw	r20, r24
    163e:	44 0f       	add	r20, r20
    1640:	55 1f       	adc	r21, r21
    1642:	44 0f       	add	r20, r20
    1644:	55 1f       	adc	r21, r21
    1646:	44 0f       	add	r20, r20
    1648:	55 1f       	adc	r21, r21
    164a:	48 0f       	add	r20, r24
    164c:	59 1f       	adc	r21, r25
    164e:	df 01       	movw	r26, r30
    1650:	01 80       	ldd	r0, Z+1	; 0x01
    1652:	f2 81       	ldd	r31, Z+2	; 0x02
    1654:	e0 2d       	mov	r30, r0
    1656:	02 80       	ldd	r0, Z+2	; 0x02
    1658:	f3 81       	ldd	r31, Z+3	; 0x03
    165a:	e0 2d       	mov	r30, r0
    165c:	12 96       	adiw	r26, 0x02	; 2
    165e:	fc 93       	st	X, r31
    1660:	ee 93       	st	-X, r30
    1662:	11 97       	sbiw	r26, 0x01	; 1
    1664:	43 5a       	subi	r20, 0xA3	; 163
    1666:	58 4f       	sbci	r21, 0xF8	; 248
    1668:	e4 17       	cp	r30, r20
    166a:	f5 07       	cpc	r31, r21
    166c:	29 f4       	brne	.+10     	; 0x1678 <vTaskSwitchContext+0x78>
    166e:	42 81       	ldd	r20, Z+2	; 0x02
    1670:	53 81       	ldd	r21, Z+3	; 0x03
    1672:	fd 01       	movw	r30, r26
    1674:	52 83       	std	Z+2, r21	; 0x02
    1676:	41 83       	std	Z+1, r20	; 0x01
    1678:	fc 01       	movw	r30, r24
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	8e 0f       	add	r24, r30
    1688:	9f 1f       	adc	r25, r31
    168a:	fc 01       	movw	r30, r24
    168c:	e6 5a       	subi	r30, 0xA6	; 166
    168e:	f8 4f       	sbci	r31, 0xF8	; 248
    1690:	01 80       	ldd	r0, Z+1	; 0x01
    1692:	f2 81       	ldd	r31, Z+2	; 0x02
    1694:	e0 2d       	mov	r30, r0
    1696:	86 81       	ldd	r24, Z+6	; 0x06
    1698:	97 81       	ldd	r25, Z+7	; 0x07
    169a:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <pxCurrentTCB+0x1>
    169e:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <pxCurrentTCB>
    16a2:	20 93 24 07 	sts	0x0724, r18	; 0x800724 <uxTopReadyPriority>
    16a6:	08 95       	ret

000016a8 <vTaskPlaceOnEventList>:
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	eb 01       	movw	r28, r22
    16ae:	60 91 7e 07 	lds	r22, 0x077E	; 0x80077e <pxCurrentTCB>
    16b2:	70 91 7f 07 	lds	r23, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    16b6:	64 5f       	subi	r22, 0xF4	; 244
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vListInsert>
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	ce 01       	movw	r24, r28
    16c2:	0e 94 0a 08 	call	0x1014	; 0x1014 <prvAddCurrentTaskToDelayedList>
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret

000016cc <xTaskRemoveFromEventList>:
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	dc 01       	movw	r26, r24
    16d2:	15 96       	adiw	r26, 0x05	; 5
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	16 97       	sbiw	r26, 0x06	; 6
    16da:	06 80       	ldd	r0, Z+6	; 0x06
    16dc:	f7 81       	ldd	r31, Z+7	; 0x07
    16de:	e0 2d       	mov	r30, r0
    16e0:	a4 89       	ldd	r26, Z+20	; 0x14
    16e2:	b5 89       	ldd	r27, Z+21	; 0x15
    16e4:	c6 85       	ldd	r28, Z+14	; 0x0e
    16e6:	d7 85       	ldd	r29, Z+15	; 0x0f
    16e8:	80 89       	ldd	r24, Z+16	; 0x10
    16ea:	91 89       	ldd	r25, Z+17	; 0x11
    16ec:	9d 83       	std	Y+5, r25	; 0x05
    16ee:	8c 83       	std	Y+4, r24	; 0x04
    16f0:	c0 89       	ldd	r28, Z+16	; 0x10
    16f2:	d1 89       	ldd	r29, Z+17	; 0x11
    16f4:	86 85       	ldd	r24, Z+14	; 0x0e
    16f6:	97 85       	ldd	r25, Z+15	; 0x0f
    16f8:	9b 83       	std	Y+3, r25	; 0x03
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	11 96       	adiw	r26, 0x01	; 1
    16fe:	8d 91       	ld	r24, X+
    1700:	9c 91       	ld	r25, X
    1702:	12 97       	sbiw	r26, 0x02	; 2
    1704:	9f 01       	movw	r18, r30
    1706:	24 5f       	subi	r18, 0xF4	; 244
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	82 17       	cp	r24, r18
    170c:	93 07       	cpc	r25, r19
    170e:	31 f4       	brne	.+12     	; 0x171c <xTaskRemoveFromEventList+0x50>
    1710:	80 89       	ldd	r24, Z+16	; 0x10
    1712:	91 89       	ldd	r25, Z+17	; 0x11
    1714:	12 96       	adiw	r26, 0x02	; 2
    1716:	9c 93       	st	X, r25
    1718:	8e 93       	st	-X, r24
    171a:	11 97       	sbiw	r26, 0x01	; 1
    171c:	15 8a       	std	Z+21, r1	; 0x15
    171e:	14 8a       	std	Z+20, r1	; 0x14
    1720:	8c 91       	ld	r24, X
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	8c 93       	st	X, r24
    1726:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxSchedulerSuspended>
    172a:	81 11       	cpse	r24, r1
    172c:	60 c0       	rjmp	.+192    	; 0x17ee <xTaskRemoveFromEventList+0x122>
    172e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1730:	b3 85       	ldd	r27, Z+11	; 0x0b
    1732:	c4 81       	ldd	r28, Z+4	; 0x04
    1734:	d5 81       	ldd	r29, Z+5	; 0x05
    1736:	86 81       	ldd	r24, Z+6	; 0x06
    1738:	97 81       	ldd	r25, Z+7	; 0x07
    173a:	9d 83       	std	Y+5, r25	; 0x05
    173c:	8c 83       	std	Y+4, r24	; 0x04
    173e:	c6 81       	ldd	r28, Z+6	; 0x06
    1740:	d7 81       	ldd	r29, Z+7	; 0x07
    1742:	84 81       	ldd	r24, Z+4	; 0x04
    1744:	95 81       	ldd	r25, Z+5	; 0x05
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	11 96       	adiw	r26, 0x01	; 1
    174c:	8d 91       	ld	r24, X+
    174e:	9c 91       	ld	r25, X
    1750:	12 97       	sbiw	r26, 0x02	; 2
    1752:	9f 01       	movw	r18, r30
    1754:	2e 5f       	subi	r18, 0xFE	; 254
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	82 17       	cp	r24, r18
    175a:	93 07       	cpc	r25, r19
    175c:	31 f4       	brne	.+12     	; 0x176a <xTaskRemoveFromEventList+0x9e>
    175e:	86 81       	ldd	r24, Z+6	; 0x06
    1760:	97 81       	ldd	r25, Z+7	; 0x07
    1762:	12 96       	adiw	r26, 0x02	; 2
    1764:	9c 93       	st	X, r25
    1766:	8e 93       	st	-X, r24
    1768:	11 97       	sbiw	r26, 0x01	; 1
    176a:	13 86       	std	Z+11, r1	; 0x0b
    176c:	12 86       	std	Z+10, r1	; 0x0a
    176e:	8c 91       	ld	r24, X
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	8c 93       	st	X, r24
    1774:	86 89       	ldd	r24, Z+22	; 0x16
    1776:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
    177a:	98 17       	cp	r25, r24
    177c:	10 f4       	brcc	.+4      	; 0x1782 <xTaskRemoveFromEventList+0xb6>
    177e:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTopReadyPriority>
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	dc 01       	movw	r26, r24
    1786:	aa 0f       	add	r26, r26
    1788:	bb 1f       	adc	r27, r27
    178a:	aa 0f       	add	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	aa 0f       	add	r26, r26
    1790:	bb 1f       	adc	r27, r27
    1792:	8a 0f       	add	r24, r26
    1794:	9b 1f       	adc	r25, r27
    1796:	dc 01       	movw	r26, r24
    1798:	a6 5a       	subi	r26, 0xA6	; 166
    179a:	b8 4f       	sbci	r27, 0xF8	; 248
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	0d 90       	ld	r0, X+
    17a0:	bc 91       	ld	r27, X
    17a2:	a0 2d       	mov	r26, r0
    17a4:	b5 83       	std	Z+5, r27	; 0x05
    17a6:	a4 83       	std	Z+4, r26	; 0x04
    17a8:	14 96       	adiw	r26, 0x04	; 4
    17aa:	8d 91       	ld	r24, X+
    17ac:	9c 91       	ld	r25, X
    17ae:	15 97       	sbiw	r26, 0x05	; 5
    17b0:	97 83       	std	Z+7, r25	; 0x07
    17b2:	86 83       	std	Z+6, r24	; 0x06
    17b4:	14 96       	adiw	r26, 0x04	; 4
    17b6:	cd 91       	ld	r28, X+
    17b8:	dc 91       	ld	r29, X
    17ba:	15 97       	sbiw	r26, 0x05	; 5
    17bc:	3b 83       	std	Y+3, r19	; 0x03
    17be:	2a 83       	std	Y+2, r18	; 0x02
    17c0:	15 96       	adiw	r26, 0x05	; 5
    17c2:	3c 93       	st	X, r19
    17c4:	2e 93       	st	-X, r18
    17c6:	14 97       	sbiw	r26, 0x04	; 4
    17c8:	a6 89       	ldd	r26, Z+22	; 0x16
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	cd 01       	movw	r24, r26
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	a8 0f       	add	r26, r24
    17dc:	b9 1f       	adc	r27, r25
    17de:	a6 5a       	subi	r26, 0xA6	; 166
    17e0:	b8 4f       	sbci	r27, 0xF8	; 248
    17e2:	b3 87       	std	Z+11, r27	; 0x0b
    17e4:	a2 87       	std	Z+10, r26	; 0x0a
    17e6:	8c 91       	ld	r24, X
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	8c 93       	st	X, r24
    17ec:	1c c0       	rjmp	.+56     	; 0x1826 <xTaskRemoveFromEventList+0x15a>
    17ee:	4b e3       	ldi	r20, 0x3B	; 59
    17f0:	57 e0       	ldi	r21, 0x07	; 7
    17f2:	da 01       	movw	r26, r20
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	cd 91       	ld	r28, X+
    17f8:	dc 91       	ld	r29, X
    17fa:	12 97       	sbiw	r26, 0x02	; 2
    17fc:	d7 87       	std	Z+15, r29	; 0x0f
    17fe:	c6 87       	std	Z+14, r28	; 0x0e
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	91 8b       	std	Z+17, r25	; 0x11
    1806:	80 8b       	std	Z+16, r24	; 0x10
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	9d 81       	ldd	r25, Y+5	; 0x05
    180c:	dc 01       	movw	r26, r24
    180e:	13 96       	adiw	r26, 0x03	; 3
    1810:	3c 93       	st	X, r19
    1812:	2e 93       	st	-X, r18
    1814:	12 97       	sbiw	r26, 0x02	; 2
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	55 8b       	std	Z+21, r21	; 0x15
    181c:	44 8b       	std	Z+20, r20	; 0x14
    181e:	da 01       	movw	r26, r20
    1820:	8c 91       	ld	r24, X
    1822:	8f 5f       	subi	r24, 0xFF	; 255
    1824:	8c 93       	st	X, r24
    1826:	96 89       	ldd	r25, Z+22	; 0x16
    1828:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    182c:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1830:	86 89       	ldd	r24, Z+22	; 0x16
    1832:	89 17       	cp	r24, r25
    1834:	20 f4       	brcc	.+8      	; 0x183e <xTaskRemoveFromEventList+0x172>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xYieldPending>
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <xTaskRemoveFromEventList+0x174>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <vTaskInternalSetTimeOutState>:
    1846:	20 91 1f 07 	lds	r18, 0x071F	; 0x80071f <xNumOfOverflows>
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
    184e:	20 91 25 07 	lds	r18, 0x0725	; 0x800725 <xTickCount>
    1852:	30 91 26 07 	lds	r19, 0x0726	; 0x800726 <xTickCount+0x1>
    1856:	32 83       	std	Z+2, r19	; 0x02
    1858:	21 83       	std	Z+1, r18	; 0x01
    185a:	08 95       	ret

0000185c <xTaskCheckForTimeOut>:
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	0f 92       	push	r0
    1868:	e0 91 25 07 	lds	r30, 0x0725	; 0x800725 <xTickCount>
    186c:	f0 91 26 07 	lds	r31, 0x0726	; 0x800726 <xTickCount+0x1>
    1870:	dc 01       	movw	r26, r24
    1872:	11 96       	adiw	r26, 0x01	; 1
    1874:	4d 91       	ld	r20, X+
    1876:	5c 91       	ld	r21, X
    1878:	12 97       	sbiw	r26, 0x02	; 2
    187a:	df 01       	movw	r26, r30
    187c:	a4 1b       	sub	r26, r20
    187e:	b5 0b       	sbc	r27, r21
    1880:	eb 01       	movw	r28, r22
    1882:	28 81       	ld	r18, Y
    1884:	39 81       	ldd	r19, Y+1	; 0x01
    1886:	2f 3f       	cpi	r18, 0xFF	; 255
    1888:	df ef       	ldi	r29, 0xFF	; 255
    188a:	3d 07       	cpc	r19, r29
    188c:	f9 f0       	breq	.+62     	; 0x18cc <xTaskCheckForTimeOut+0x70>
    188e:	ec 01       	movw	r28, r24
    1890:	18 81       	ld	r17, Y
    1892:	c0 91 1f 07 	lds	r28, 0x071F	; 0x80071f <xNumOfOverflows>
    1896:	1c 17       	cp	r17, r28
    1898:	41 f0       	breq	.+16     	; 0x18aa <xTaskCheckForTimeOut+0x4e>
    189a:	e4 17       	cp	r30, r20
    189c:	f5 07       	cpc	r31, r21
    189e:	28 f0       	brcs	.+10     	; 0x18aa <xTaskCheckForTimeOut+0x4e>
    18a0:	fb 01       	movw	r30, r22
    18a2:	11 82       	std	Z+1, r1	; 0x01
    18a4:	10 82       	st	Z, r1
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	12 c0       	rjmp	.+36     	; 0x18ce <xTaskCheckForTimeOut+0x72>
    18aa:	a2 17       	cp	r26, r18
    18ac:	b3 07       	cpc	r27, r19
    18ae:	48 f4       	brcc	.+18     	; 0x18c2 <xTaskCheckForTimeOut+0x66>
    18b0:	fb 01       	movw	r30, r22
    18b2:	2a 1b       	sub	r18, r26
    18b4:	3b 0b       	sbc	r19, r27
    18b6:	31 83       	std	Z+1, r19	; 0x01
    18b8:	20 83       	st	Z, r18
    18ba:	0e 94 23 0c 	call	0x1846	; 0x1846 <vTaskInternalSetTimeOutState>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <xTaskCheckForTimeOut+0x72>
    18c2:	db 01       	movw	r26, r22
    18c4:	1d 92       	st	X+, r1
    18c6:	1c 92       	st	X, r1
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <xTaskCheckForTimeOut+0x72>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <vTaskMissedYield>:
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xYieldPending>
    18e0:	08 95       	ret

000018e2 <xTaskPriorityInherit>:
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	fc 01       	movw	r30, r24
    18ec:	89 2b       	or	r24, r25
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <xTaskPriorityInherit+0x10>
    18f0:	84 c0       	rjmp	.+264    	; 0x19fa <xTaskPriorityInherit+0x118>
    18f2:	26 89       	ldd	r18, Z+22	; 0x16
    18f4:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
    18f8:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    18fc:	56 96       	adiw	r26, 0x16	; 22
    18fe:	8c 91       	ld	r24, X
    1900:	28 17       	cp	r18, r24
    1902:	08 f0       	brcs	.+2      	; 0x1906 <xTaskPriorityInherit+0x24>
    1904:	70 c0       	rjmp	.+224    	; 0x19e6 <xTaskPriorityInherit+0x104>
    1906:	84 85       	ldd	r24, Z+12	; 0x0c
    1908:	95 85       	ldd	r25, Z+13	; 0x0d
    190a:	99 23       	and	r25, r25
    190c:	64 f0       	brlt	.+24     	; 0x1926 <xTaskPriorityInherit+0x44>
    190e:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
    1912:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1916:	56 96       	adiw	r26, 0x16	; 22
    1918:	3c 91       	ld	r19, X
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	83 1b       	sub	r24, r19
    1920:	91 09       	sbc	r25, r1
    1922:	95 87       	std	Z+13, r25	; 0x0d
    1924:	84 87       	std	Z+12, r24	; 0x0c
    1926:	82 85       	ldd	r24, Z+10	; 0x0a
    1928:	93 85       	ldd	r25, Z+11	; 0x0b
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	44 0f       	add	r20, r20
    1930:	55 1f       	adc	r21, r21
    1932:	44 0f       	add	r20, r20
    1934:	55 1f       	adc	r21, r21
    1936:	44 0f       	add	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	24 0f       	add	r18, r20
    193c:	35 1f       	adc	r19, r21
    193e:	26 5a       	subi	r18, 0xA6	; 166
    1940:	38 4f       	sbci	r19, 0xF8	; 248
    1942:	82 17       	cp	r24, r18
    1944:	93 07       	cpc	r25, r19
    1946:	09 f0       	breq	.+2      	; 0x194a <xTaskPriorityInherit+0x68>
    1948:	45 c0       	rjmp	.+138    	; 0x19d4 <xTaskPriorityInherit+0xf2>
    194a:	ef 01       	movw	r28, r30
    194c:	8f 01       	movw	r16, r30
    194e:	0e 5f       	subi	r16, 0xFE	; 254
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 a2 03 	call	0x744	; 0x744 <uxListRemove>
    1958:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    195c:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1960:	86 89       	ldd	r24, Z+22	; 0x16
    1962:	8e 8b       	std	Y+22, r24	; 0x16
    1964:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
    1968:	98 17       	cp	r25, r24
    196a:	10 f4       	brcc	.+4      	; 0x1970 <xTaskPriorityInherit+0x8e>
    196c:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTopReadyPriority>
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	fc 01       	movw	r30, r24
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	8e 0f       	add	r24, r30
    1982:	9f 1f       	adc	r25, r31
    1984:	fc 01       	movw	r30, r24
    1986:	e6 5a       	subi	r30, 0xA6	; 166
    1988:	f8 4f       	sbci	r31, 0xF8	; 248
    198a:	01 80       	ldd	r0, Z+1	; 0x01
    198c:	f2 81       	ldd	r31, Z+2	; 0x02
    198e:	e0 2d       	mov	r30, r0
    1990:	fd 83       	std	Y+5, r31	; 0x05
    1992:	ec 83       	std	Y+4, r30	; 0x04
    1994:	84 81       	ldd	r24, Z+4	; 0x04
    1996:	95 81       	ldd	r25, Z+5	; 0x05
    1998:	9f 83       	std	Y+7, r25	; 0x07
    199a:	8e 83       	std	Y+6, r24	; 0x06
    199c:	a4 81       	ldd	r26, Z+4	; 0x04
    199e:	b5 81       	ldd	r27, Z+5	; 0x05
    19a0:	13 96       	adiw	r26, 0x03	; 3
    19a2:	1c 93       	st	X, r17
    19a4:	0e 93       	st	-X, r16
    19a6:	12 97       	sbiw	r26, 0x02	; 2
    19a8:	15 83       	std	Z+5, r17	; 0x05
    19aa:	04 83       	std	Z+4, r16	; 0x04
    19ac:	8e 89       	ldd	r24, Y+22	; 0x16
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	fc 01       	movw	r30, r24
    19b2:	ee 0f       	add	r30, r30
    19b4:	ff 1f       	adc	r31, r31
    19b6:	ee 0f       	add	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	e8 0f       	add	r30, r24
    19c0:	f9 1f       	adc	r31, r25
    19c2:	e6 5a       	subi	r30, 0xA6	; 166
    19c4:	f8 4f       	sbci	r31, 0xF8	; 248
    19c6:	fb 87       	std	Y+11, r31	; 0x0b
    19c8:	ea 87       	std	Y+10, r30	; 0x0a
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	80 83       	st	Z, r24
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	16 c0       	rjmp	.+44     	; 0x1a00 <xTaskPriorityInherit+0x11e>
    19d4:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <pxCurrentTCB>
    19d8:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    19dc:	56 96       	adiw	r26, 0x16	; 22
    19de:	8c 91       	ld	r24, X
    19e0:	86 8b       	std	Z+22, r24	; 0x16
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <xTaskPriorityInherit+0x11e>
    19e6:	91 a1       	ldd	r25, Z+33	; 0x21
    19e8:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    19ec:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    19f0:	86 89       	ldd	r24, Z+22	; 0x16
    19f2:	98 17       	cp	r25, r24
    19f4:	20 f0       	brcs	.+8      	; 0x19fe <xTaskPriorityInherit+0x11c>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <xTaskPriorityInherit+0x11e>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <xTaskPriorityInherit+0x11e>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <xTaskPriorityDisinherit>:
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	fc 01       	movw	r30, r24
    1a14:	89 2b       	or	r24, r25
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <xTaskPriorityDisinherit+0x10>
    1a18:	51 c0       	rjmp	.+162    	; 0x1abc <xTaskPriorityDisinherit+0xb2>
    1a1a:	82 a1       	ldd	r24, Z+34	; 0x22
    1a1c:	81 50       	subi	r24, 0x01	; 1
    1a1e:	82 a3       	std	Z+34, r24	; 0x22
    1a20:	26 89       	ldd	r18, Z+22	; 0x16
    1a22:	91 a1       	ldd	r25, Z+33	; 0x21
    1a24:	29 17       	cp	r18, r25
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <xTaskPriorityDisinherit+0x20>
    1a28:	4b c0       	rjmp	.+150    	; 0x1ac0 <xTaskPriorityDisinherit+0xb6>
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	4b c0       	rjmp	.+150    	; 0x1ac4 <xTaskPriorityDisinherit+0xba>
    1a2e:	ef 01       	movw	r28, r30
    1a30:	8f 01       	movw	r16, r30
    1a32:	0e 5f       	subi	r16, 0xFE	; 254
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	c8 01       	movw	r24, r16
    1a38:	0e 94 a2 03 	call	0x744	; 0x744 <uxListRemove>
    1a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3e:	8e 8b       	std	Y+22, r24	; 0x16
    1a40:	24 e0       	ldi	r18, 0x04	; 4
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	28 1b       	sub	r18, r24
    1a46:	31 09       	sbc	r19, r1
    1a48:	3d 87       	std	Y+13, r19	; 0x0d
    1a4a:	2c 87       	std	Y+12, r18	; 0x0c
    1a4c:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
    1a50:	98 17       	cp	r25, r24
    1a52:	10 f4       	brcc	.+4      	; 0x1a58 <xTaskPriorityDisinherit+0x4e>
    1a54:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTopReadyPriority>
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	8e 0f       	add	r24, r30
    1a6a:	9f 1f       	adc	r25, r31
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e6 5a       	subi	r30, 0xA6	; 166
    1a70:	f8 4f       	sbci	r31, 0xF8	; 248
    1a72:	01 80       	ldd	r0, Z+1	; 0x01
    1a74:	f2 81       	ldd	r31, Z+2	; 0x02
    1a76:	e0 2d       	mov	r30, r0
    1a78:	fd 83       	std	Y+5, r31	; 0x05
    1a7a:	ec 83       	std	Y+4, r30	; 0x04
    1a7c:	84 81       	ldd	r24, Z+4	; 0x04
    1a7e:	95 81       	ldd	r25, Z+5	; 0x05
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
    1a84:	a4 81       	ldd	r26, Z+4	; 0x04
    1a86:	b5 81       	ldd	r27, Z+5	; 0x05
    1a88:	13 96       	adiw	r26, 0x03	; 3
    1a8a:	1c 93       	st	X, r17
    1a8c:	0e 93       	st	-X, r16
    1a8e:	12 97       	sbiw	r26, 0x02	; 2
    1a90:	15 83       	std	Z+5, r17	; 0x05
    1a92:	04 83       	std	Z+4, r16	; 0x04
    1a94:	ee 89       	ldd	r30, Y+22	; 0x16
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	cf 01       	movw	r24, r30
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	e8 0f       	add	r30, r24
    1aa8:	f9 1f       	adc	r31, r25
    1aaa:	e6 5a       	subi	r30, 0xA6	; 166
    1aac:	f8 4f       	sbci	r31, 0xF8	; 248
    1aae:	fb 87       	std	Y+11, r31	; 0x0b
    1ab0:	ea 87       	std	Y+10, r30	; 0x0a
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	80 83       	st	Z, r24
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <xTaskPriorityDisinherit+0xbc>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <xTaskPriorityDisinherit+0xbc>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <xTaskPriorityDisinherit+0xbc>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret

00001ad0 <vTaskPriorityDisinheritAfterTimeout>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	fc 01       	movw	r30, r24
    1ada:	89 2b       	or	r24, r25
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1ade:	66 c0       	rjmp	.+204    	; 0x1bac <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1ae0:	91 a1       	ldd	r25, Z+33	; 0x21
    1ae2:	96 17       	cp	r25, r22
    1ae4:	08 f4       	brcc	.+2      	; 0x1ae8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ae6:	96 2f       	mov	r25, r22
    1ae8:	86 89       	ldd	r24, Z+22	; 0x16
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1aee:	5e c0       	rjmp	.+188    	; 0x1bac <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1af0:	22 a1       	ldd	r18, Z+34	; 0x22
    1af2:	21 30       	cpi	r18, 0x01	; 1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    1af6:	5a c0       	rjmp	.+180    	; 0x1bac <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1af8:	96 8b       	std	Z+22, r25	; 0x16
    1afa:	24 85       	ldd	r18, Z+12	; 0x0c
    1afc:	35 85       	ldd	r19, Z+13	; 0x0d
    1afe:	33 23       	and	r19, r19
    1b00:	34 f0       	brlt	.+12     	; 0x1b0e <vTaskPriorityDisinheritAfterTimeout+0x3e>
    1b02:	24 e0       	ldi	r18, 0x04	; 4
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	29 1b       	sub	r18, r25
    1b08:	31 09       	sbc	r19, r1
    1b0a:	35 87       	std	Z+13, r19	; 0x0d
    1b0c:	24 87       	std	Z+12, r18	; 0x0c
    1b0e:	22 85       	ldd	r18, Z+10	; 0x0a
    1b10:	33 85       	ldd	r19, Z+11	; 0x0b
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	ac 01       	movw	r20, r24
    1b16:	44 0f       	add	r20, r20
    1b18:	55 1f       	adc	r21, r21
    1b1a:	44 0f       	add	r20, r20
    1b1c:	55 1f       	adc	r21, r21
    1b1e:	44 0f       	add	r20, r20
    1b20:	55 1f       	adc	r21, r21
    1b22:	84 0f       	add	r24, r20
    1b24:	95 1f       	adc	r25, r21
    1b26:	86 5a       	subi	r24, 0xA6	; 166
    1b28:	98 4f       	sbci	r25, 0xF8	; 248
    1b2a:	28 17       	cp	r18, r24
    1b2c:	39 07       	cpc	r19, r25
    1b2e:	f1 f5       	brne	.+124    	; 0x1bac <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1b30:	ef 01       	movw	r28, r30
    1b32:	8f 01       	movw	r16, r30
    1b34:	0e 5f       	subi	r16, 0xFE	; 254
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	c8 01       	movw	r24, r16
    1b3a:	0e 94 a2 03 	call	0x744	; 0x744 <uxListRemove>
    1b3e:	8e 89       	ldd	r24, Y+22	; 0x16
    1b40:	90 91 24 07 	lds	r25, 0x0724	; 0x800724 <uxTopReadyPriority>
    1b44:	98 17       	cp	r25, r24
    1b46:	10 f4       	brcc	.+4      	; 0x1b4c <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1b48:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxTopReadyPriority>
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	fc 01       	movw	r30, r24
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	ee 0f       	add	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	8e 0f       	add	r24, r30
    1b5e:	9f 1f       	adc	r25, r31
    1b60:	fc 01       	movw	r30, r24
    1b62:	e6 5a       	subi	r30, 0xA6	; 166
    1b64:	f8 4f       	sbci	r31, 0xF8	; 248
    1b66:	01 80       	ldd	r0, Z+1	; 0x01
    1b68:	f2 81       	ldd	r31, Z+2	; 0x02
    1b6a:	e0 2d       	mov	r30, r0
    1b6c:	fd 83       	std	Y+5, r31	; 0x05
    1b6e:	ec 83       	std	Y+4, r30	; 0x04
    1b70:	84 81       	ldd	r24, Z+4	; 0x04
    1b72:	95 81       	ldd	r25, Z+5	; 0x05
    1b74:	9f 83       	std	Y+7, r25	; 0x07
    1b76:	8e 83       	std	Y+6, r24	; 0x06
    1b78:	a4 81       	ldd	r26, Z+4	; 0x04
    1b7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b7c:	13 96       	adiw	r26, 0x03	; 3
    1b7e:	1c 93       	st	X, r17
    1b80:	0e 93       	st	-X, r16
    1b82:	12 97       	sbiw	r26, 0x02	; 2
    1b84:	15 83       	std	Z+5, r17	; 0x05
    1b86:	04 83       	std	Z+4, r16	; 0x04
    1b88:	8e 89       	ldd	r24, Y+22	; 0x16
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	ee 0f       	add	r30, r30
    1b94:	ff 1f       	adc	r31, r31
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	e8 0f       	add	r30, r24
    1b9c:	f9 1f       	adc	r31, r25
    1b9e:	e6 5a       	subi	r30, 0xA6	; 166
    1ba0:	f8 4f       	sbci	r31, 0xF8	; 248
    1ba2:	fb 87       	std	Y+11, r31	; 0x0b
    1ba4:	ea 87       	std	Y+10, r30	; 0x0a
    1ba6:	80 81       	ld	r24, Z
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	80 83       	st	Z, r24
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1bb6:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <pxCurrentTCB>
    1bba:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1bbe:	89 2b       	or	r24, r25
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1bc2:	e0 91 7e 07 	lds	r30, 0x077E	; 0x80077e <pxCurrentTCB>
    1bc6:	f0 91 7f 07 	lds	r31, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    1bca:	82 a1       	ldd	r24, Z+34	; 0x22
    1bcc:	8f 5f       	subi	r24, 0xFF	; 255
    1bce:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1bd0:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <pxCurrentTCB>
    1bd4:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pxCurrentTCB+0x1>
    }
    1bd8:	08 95       	ret

00001bda <task2>:

void task2(void)//button task
{
	while (1)
	{
		if (read(BTN)==1)
    1bda:	84 e1       	ldi	r24, 0x14	; 20
    1bdc:	0e 94 a5 00 	call	0x14a	; 0x14a <read>
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	d9 f7       	brne	.-10     	; 0x1bda <task2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1be4:	2f ef       	ldi	r18, 0xFF	; 255
    1be6:	84 e3       	ldi	r24, 0x34	; 52
    1be8:	9c e0       	ldi	r25, 0x0C	; 12
    1bea:	21 50       	subi	r18, 0x01	; 1
    1bec:	80 40       	sbci	r24, 0x00	; 0
    1bee:	90 40       	sbci	r25, 0x00	; 0
    1bf0:	e1 f7       	brne	.-8      	; 0x1bea <task2+0x10>
    1bf2:	00 c0       	rjmp	.+0      	; 0x1bf4 <task2+0x1a>
    1bf4:	00 00       	nop
		{
			_delay_ms(250);
			if (xSemaphoreGive( x ) != pdTRUE)
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <x>
    1c04:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <x+0x1>
    1c08:	0e 94 3b 05 	call	0xa76	; 0xa76 <xQueueGenericSend>
    1c0c:	e6 cf       	rjmp	.-52     	; 0x1bda <task2>

00001c0e <int2str>:
	tmp[0] = asci_num[digit1];
	tmp[1] = asci_num[digit2];
	
	return tmp;
	
}
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	08 95       	ret

00001c14 <print>:
void print( char * msg)
{
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	8c 01       	movw	r16, r24
	uint8_t i =0;
    1c1c:	c0 e0       	ldi	r28, 0x00	; 0
	while(msg != '\0')
    1c1e:	07 c0       	rjmp	.+14     	; 0x1c2e <print+0x1a>
	{
		UATR_SEND(msg[i]);
    1c20:	f8 01       	movw	r30, r16
    1c22:	ec 0f       	add	r30, r28
    1c24:	f1 1d       	adc	r31, r1
    1c26:	80 81       	ld	r24, Z
    1c28:	0e 94 14 01 	call	0x228	; 0x228 <UATR_SEND>
		i++;
    1c2c:	cf 5f       	subi	r28, 0xFF	; 255
	
}
void print( char * msg)
{
	uint8_t i =0;
	while(msg != '\0')
    1c2e:	01 15       	cp	r16, r1
    1c30:	11 05       	cpc	r17, r1
    1c32:	b1 f7       	brne	.-20     	; 0x1c20 <print+0xc>
	{
		UATR_SEND(msg[i]);
		i++;
	}
	
}
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <task1>:
	
   
}
void task1(void)//serial server task
{
	   x = xSemaphoreCreateBinary();
    1c3c:	43 e0       	ldi	r20, 0x03	; 3
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <xQueueGenericCreate>
    1c46:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <x+0x1>
    1c4a:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <x>
	   xSemaphoreTake( x, (TickType_t)0 ) ;
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueSemaphoreTake>
	   uint16_t i=0;
    1c56:	c0 e0       	ldi	r28, 0x00	; 0
    1c58:	d0 e0       	ldi	r29, 0x00	; 0
	   
	while(1)
	{  
		
	     if (xSemaphoreTake( x,(TickType_t)10 )==pdTRUE)
    1c5a:	6a e0       	ldi	r22, 0x0A	; 10
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <x>
    1c62:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <x+0x1>
    1c66:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueSemaphoreTake>
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	b1 f7       	brne	.-20     	; 0x1c5a <task1+0x1e>
	     {
			   
			   print("Server Respond To Clint : ");
    1c6e:	88 e0       	ldi	r24, 0x08	; 8
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <print>
			   char* xt = int2str(x);
			   print(int2str(i));
    1c76:	ce 01       	movw	r24, r28
    1c78:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <int2str>
    1c7c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <print>
			   i++;
    1c80:	21 96       	adiw	r28, 0x01	; 1
			   print('\n');
    1c82:	8a e0       	ldi	r24, 0x0A	; 10
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <print>
    1c8a:	e7 cf       	rjmp	.-50     	; 0x1c5a <task1+0x1e>

00001c8c <init>:

 
 void init()
  {
	 
	 UART_init();
    1c8c:	0e 94 04 01 	call	0x208	; 0x208 <UART_init>
	 inp(BTN);
    1c90:	84 e1       	ldi	r24, 0x14	; 20
    1c92:	0e 94 53 00 	call	0xa6	; 0xa6 <inp>
    1c96:	08 95       	ret

00001c98 <main>:
	

}

int main(void)
{
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <main+0xc>
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <main+0xe>
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    init();
    1caa:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <init>
	
	TaskHandle_t task1_h,task2_h;
	
	xTaskCreate(task1,"process",150,NULL,1,&task1_h);
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	7c 01       	movw	r14, r24
    1cb4:	01 e0       	ldi	r16, 0x01	; 1
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	46 e9       	ldi	r20, 0x96	; 150
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	63 e2       	ldi	r22, 0x23	; 35
    1cc0:	71 e0       	ldi	r23, 0x01	; 1
    1cc2:	8e e1       	ldi	r24, 0x1E	; 30
    1cc4:	9e e0       	ldi	r25, 0x0E	; 14
    1cc6:	0e 94 8b 08 	call	0x1116	; 0x1116 <xTaskCreate>
	xTaskCreate(task2,"handler",150,NULL,1,&task2_h);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	03 96       	adiw	r24, 0x03	; 3
    1cce:	7c 01       	movw	r14, r24
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	46 e9       	ldi	r20, 0x96	; 150
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	6b e2       	ldi	r22, 0x2B	; 43
    1cda:	71 e0       	ldi	r23, 0x01	; 1
    1cdc:	8d ee       	ldi	r24, 0xED	; 237
    1cde:	9d e0       	ldi	r25, 0x0D	; 13
    1ce0:	0e 94 8b 08 	call	0x1116	; 0x1116 <xTaskCreate>
	
	
	vTaskStartScheduler();
    1ce4:	0e 94 df 08 	call	0x11be	; 0x11be <vTaskStartScheduler>
	
	
	
   
}
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	08 95       	ret

00001d00 <__udivmodhi4>:
    1d00:	aa 1b       	sub	r26, r26
    1d02:	bb 1b       	sub	r27, r27
    1d04:	51 e1       	ldi	r21, 0x11	; 17
    1d06:	07 c0       	rjmp	.+14     	; 0x1d16 <__udivmodhi4_ep>

00001d08 <__udivmodhi4_loop>:
    1d08:	aa 1f       	adc	r26, r26
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	a6 17       	cp	r26, r22
    1d0e:	b7 07       	cpc	r27, r23
    1d10:	10 f0       	brcs	.+4      	; 0x1d16 <__udivmodhi4_ep>
    1d12:	a6 1b       	sub	r26, r22
    1d14:	b7 0b       	sbc	r27, r23

00001d16 <__udivmodhi4_ep>:
    1d16:	88 1f       	adc	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	5a 95       	dec	r21
    1d1c:	a9 f7       	brne	.-22     	; 0x1d08 <__udivmodhi4_loop>
    1d1e:	80 95       	com	r24
    1d20:	90 95       	com	r25
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	08 95       	ret

00001d28 <memcpy>:
    1d28:	fb 01       	movw	r30, r22
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <memcpy+0xa>
    1d2e:	01 90       	ld	r0, Z+
    1d30:	0d 92       	st	X+, r0
    1d32:	41 50       	subi	r20, 0x01	; 1
    1d34:	50 40       	sbci	r21, 0x00	; 0
    1d36:	d8 f7       	brcc	.-10     	; 0x1d2e <memcpy+0x6>
    1d38:	08 95       	ret

00001d3a <_exit>:
    1d3a:	f8 94       	cli

00001d3c <__stop_program>:
    1d3c:	ff cf       	rjmp	.-2      	; 0x1d3c <__stop_program>
