
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000109a  0000112e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000109a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064b  00800132  00800132  00001160  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b3c  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df6  00000000  00000000  00003f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b0b  00000000  00000000  00004d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  00006898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001066  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000249f  00000000  00000000  00008066  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000a505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e9       	ldi	r30, 0x9A	; 154
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 37       	cpi	r26, 0x7D	; 125
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 16 08 	call	0x102c	; 0x102c <main>
      9e:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:


void UART_init()
{
	  uint16_t baud_config = 103;                             //for 16 MHZ => 115200 Baud Rate   
	  UCSR0C |= (1<<UCSZ01)   |  (1<<UCSZ00) ;               //data size 8 bit       
      a6:	e2 ec       	ldi	r30, 0xC2	; 194
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	86 60       	ori	r24, 0x06	; 6
      ae:	80 83       	st	Z, r24
	  UBRR0L  = (uint8_t) baud_config;
      b0:	87 e6       	ldi	r24, 0x67	; 103
      b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	  UBRR0H  = (uint8_t) (baud_config>>8);
      b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	  UCSR0B |= (1<<TXEN0) |  (1<<RXEN0) ;	
      ba:	e1 ec       	ldi	r30, 0xC1	; 193
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	88 61       	ori	r24, 0x18	; 24
      c2:	80 83       	st	Z, r24
      c4:	08 95       	ret

000000c6 <UATR_SEND>:
void UATR_SEND(char x )
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
      c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      ca:	95 ff       	sbrs	r25, 5
      cc:	fc cf       	rjmp	.-8      	; 0xc6 <UATR_SEND>
	UDR0 = x;
      ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      d2:	08 95       	ret

000000d4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      da:	87 e3       	ldi	r24, 0x37	; 55
      dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
      e0:	8b e0       	ldi	r24, 0x0B	; 11
      e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      e6:	ef e6       	ldi	r30, 0x6F	; 111
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	82 60       	ori	r24, 0x02	; 2
      ee:	80 83       	st	Z, r24
      f0:	08 95       	ret

000000f2 <pxPortInitialiseStack>:
      f2:	31 e1       	ldi	r19, 0x11	; 17
      f4:	fc 01       	movw	r30, r24
      f6:	30 83       	st	Z, r19
      f8:	31 97       	sbiw	r30, 0x01	; 1
      fa:	22 e2       	ldi	r18, 0x22	; 34
      fc:	20 83       	st	Z, r18
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	a3 e3       	ldi	r26, 0x33	; 51
     102:	a0 83       	st	Z, r26
     104:	31 97       	sbiw	r30, 0x01	; 1
     106:	60 83       	st	Z, r22
     108:	31 97       	sbiw	r30, 0x01	; 1
     10a:	70 83       	st	Z, r23
     10c:	31 97       	sbiw	r30, 0x01	; 1
     10e:	10 82       	st	Z, r1
     110:	31 97       	sbiw	r30, 0x01	; 1
     112:	60 e8       	ldi	r22, 0x80	; 128
     114:	60 83       	st	Z, r22
     116:	31 97       	sbiw	r30, 0x01	; 1
     118:	10 82       	st	Z, r1
     11a:	31 97       	sbiw	r30, 0x01	; 1
     11c:	62 e0       	ldi	r22, 0x02	; 2
     11e:	60 83       	st	Z, r22
     120:	31 97       	sbiw	r30, 0x01	; 1
     122:	63 e0       	ldi	r22, 0x03	; 3
     124:	60 83       	st	Z, r22
     126:	31 97       	sbiw	r30, 0x01	; 1
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	60 83       	st	Z, r22
     12c:	31 97       	sbiw	r30, 0x01	; 1
     12e:	65 e0       	ldi	r22, 0x05	; 5
     130:	60 83       	st	Z, r22
     132:	31 97       	sbiw	r30, 0x01	; 1
     134:	66 e0       	ldi	r22, 0x06	; 6
     136:	60 83       	st	Z, r22
     138:	31 97       	sbiw	r30, 0x01	; 1
     13a:	67 e0       	ldi	r22, 0x07	; 7
     13c:	60 83       	st	Z, r22
     13e:	31 97       	sbiw	r30, 0x01	; 1
     140:	68 e0       	ldi	r22, 0x08	; 8
     142:	60 83       	st	Z, r22
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	69 e0       	ldi	r22, 0x09	; 9
     148:	60 83       	st	Z, r22
     14a:	31 97       	sbiw	r30, 0x01	; 1
     14c:	60 e1       	ldi	r22, 0x10	; 16
     14e:	60 83       	st	Z, r22
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	30 83       	st	Z, r19
     154:	31 97       	sbiw	r30, 0x01	; 1
     156:	32 e1       	ldi	r19, 0x12	; 18
     158:	30 83       	st	Z, r19
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	33 e1       	ldi	r19, 0x13	; 19
     15e:	30 83       	st	Z, r19
     160:	31 97       	sbiw	r30, 0x01	; 1
     162:	34 e1       	ldi	r19, 0x14	; 20
     164:	30 83       	st	Z, r19
     166:	31 97       	sbiw	r30, 0x01	; 1
     168:	35 e1       	ldi	r19, 0x15	; 21
     16a:	30 83       	st	Z, r19
     16c:	31 97       	sbiw	r30, 0x01	; 1
     16e:	36 e1       	ldi	r19, 0x16	; 22
     170:	30 83       	st	Z, r19
     172:	31 97       	sbiw	r30, 0x01	; 1
     174:	37 e1       	ldi	r19, 0x17	; 23
     176:	30 83       	st	Z, r19
     178:	31 97       	sbiw	r30, 0x01	; 1
     17a:	38 e1       	ldi	r19, 0x18	; 24
     17c:	30 83       	st	Z, r19
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	39 e1       	ldi	r19, 0x19	; 25
     182:	30 83       	st	Z, r19
     184:	31 97       	sbiw	r30, 0x01	; 1
     186:	30 e2       	ldi	r19, 0x20	; 32
     188:	30 83       	st	Z, r19
     18a:	31 97       	sbiw	r30, 0x01	; 1
     18c:	31 e2       	ldi	r19, 0x21	; 33
     18e:	30 83       	st	Z, r19
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	20 83       	st	Z, r18
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	23 e2       	ldi	r18, 0x23	; 35
     198:	20 83       	st	Z, r18
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	40 83       	st	Z, r20
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	50 83       	st	Z, r21
     1a2:	31 97       	sbiw	r30, 0x01	; 1
     1a4:	26 e2       	ldi	r18, 0x26	; 38
     1a6:	20 83       	st	Z, r18
     1a8:	31 97       	sbiw	r30, 0x01	; 1
     1aa:	27 e2       	ldi	r18, 0x27	; 39
     1ac:	20 83       	st	Z, r18
     1ae:	31 97       	sbiw	r30, 0x01	; 1
     1b0:	28 e2       	ldi	r18, 0x28	; 40
     1b2:	20 83       	st	Z, r18
     1b4:	31 97       	sbiw	r30, 0x01	; 1
     1b6:	29 e2       	ldi	r18, 0x29	; 41
     1b8:	20 83       	st	Z, r18
     1ba:	31 97       	sbiw	r30, 0x01	; 1
     1bc:	20 e3       	ldi	r18, 0x30	; 48
     1be:	20 83       	st	Z, r18
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	21 e3       	ldi	r18, 0x31	; 49
     1c4:	20 83       	st	Z, r18
     1c6:	86 97       	sbiw	r24, 0x26	; 38
     1c8:	08 95       	ret

000001ca <xPortStartScheduler>:
     1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <prvSetupTimerInterrupt>
     1ce:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <pxCurrentTCB>
     1d2:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     1d6:	cd 91       	ld	r28, X+
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	dd 91       	ld	r29, X+
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	ff 91       	pop	r31
     1e0:	ef 91       	pop	r30
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	bf 91       	pop	r27
     1e8:	af 91       	pop	r26
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	7f 91       	pop	r23
     1f0:	6f 91       	pop	r22
     1f2:	5f 91       	pop	r21
     1f4:	4f 91       	pop	r20
     1f6:	3f 91       	pop	r19
     1f8:	2f 91       	pop	r18
     1fa:	1f 91       	pop	r17
     1fc:	0f 91       	pop	r16
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	df 90       	pop	r13
     204:	cf 90       	pop	r12
     206:	bf 90       	pop	r11
     208:	af 90       	pop	r10
     20a:	9f 90       	pop	r9
     20c:	8f 90       	pop	r8
     20e:	7f 90       	pop	r7
     210:	6f 90       	pop	r6
     212:	5f 90       	pop	r5
     214:	4f 90       	pop	r4
     216:	3f 90       	pop	r3
     218:	2f 90       	pop	r2
     21a:	1f 90       	pop	r1
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	08 95       	ret
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	08 95       	ret

00000228 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	0f 92       	push	r0
     230:	1f 92       	push	r1
     232:	11 24       	eor	r1, r1
     234:	2f 92       	push	r2
     236:	3f 92       	push	r3
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	8f 92       	push	r8
     242:	9f 92       	push	r9
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	af 93       	push	r26
     266:	bf 93       	push	r27
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	ef 93       	push	r30
     26e:	ff 93       	push	r31
     270:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <pxCurrentTCB>
     274:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     278:	0d b6       	in	r0, 0x3d	; 61
     27a:	0d 92       	st	X+, r0
     27c:	0e b6       	in	r0, 0x3e	; 62
     27e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     280:	0e 94 6e 07 	call	0xedc	; 0xedc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     284:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <pxCurrentTCB>
     288:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     28c:	cd 91       	ld	r28, X+
     28e:	cd bf       	out	0x3d, r28	; 61
     290:	dd 91       	ld	r29, X+
     292:	de bf       	out	0x3e, r29	; 62
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	bf 91       	pop	r27
     29e:	af 91       	pop	r26
     2a0:	9f 91       	pop	r25
     2a2:	8f 91       	pop	r24
     2a4:	7f 91       	pop	r23
     2a6:	6f 91       	pop	r22
     2a8:	5f 91       	pop	r21
     2aa:	4f 91       	pop	r20
     2ac:	3f 91       	pop	r19
     2ae:	2f 91       	pop	r18
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	df 90       	pop	r13
     2ba:	cf 90       	pop	r12
     2bc:	bf 90       	pop	r11
     2be:	af 90       	pop	r10
     2c0:	9f 90       	pop	r9
     2c2:	8f 90       	pop	r8
     2c4:	7f 90       	pop	r7
     2c6:	6f 90       	pop	r6
     2c8:	5f 90       	pop	r5
     2ca:	4f 90       	pop	r4
     2cc:	3f 90       	pop	r3
     2ce:	2f 90       	pop	r2
     2d0:	1f 90       	pop	r1
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     2d8:	08 95       	ret

000002da <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	0f 92       	push	r0
     2e2:	1f 92       	push	r1
     2e4:	11 24       	eor	r1, r1
     2e6:	2f 92       	push	r2
     2e8:	3f 92       	push	r3
     2ea:	4f 92       	push	r4
     2ec:	5f 92       	push	r5
     2ee:	6f 92       	push	r6
     2f0:	7f 92       	push	r7
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
     322:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <pxCurrentTCB>
     326:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     32a:	0d b6       	in	r0, 0x3d	; 61
     32c:	0d 92       	st	X+, r0
     32e:	0e b6       	in	r0, 0x3e	; 62
     330:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     332:	0e 94 69 05 	call	0xad2	; 0xad2 <xTaskIncrementTick>
     336:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     338:	0e 94 6e 07 	call	0xedc	; 0xedc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     33c:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <pxCurrentTCB>
     340:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     344:	cd 91       	ld	r28, X+
     346:	cd bf       	out	0x3d, r28	; 61
     348:	dd 91       	ld	r29, X+
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	ff 91       	pop	r31
     34e:	ef 91       	pop	r30
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	7f 90       	pop	r7
     37e:	6f 90       	pop	r6
     380:	5f 90       	pop	r5
     382:	4f 90       	pop	r4
     384:	3f 90       	pop	r3
     386:	2f 90       	pop	r2
     388:	1f 90       	pop	r1
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     390:	08 95       	ret

00000392 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     392:	0e 94 6d 01 	call	0x2da	; 0x2da <vPortYieldFromTick>
		asm volatile ( "reti" );
     396:	18 95       	reti

00000398 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     398:	a7 e3       	ldi	r26, 0x37	; 55
     39a:	b1 e0       	ldi	r27, 0x01	; 1
     39c:	eb e3       	ldi	r30, 0x3B	; 59
     39e:	f1 e0       	ldi	r31, 0x01	; 1
     3a0:	11 96       	adiw	r26, 0x01	; 1
     3a2:	fc 93       	st	X, r31
     3a4:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     3a6:	13 96       	adiw	r26, 0x03	; 3
     3a8:	1c 92       	st	X, r1
     3aa:	1e 92       	st	-X, r1
     3ac:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     3ae:	a3 e3       	ldi	r26, 0x33	; 51
     3b0:	b1 e0       	ldi	r27, 0x01	; 1
     3b2:	8b ed       	ldi	r24, 0xDB	; 219
     3b4:	95 e0       	ldi	r25, 0x05	; 5
     3b6:	13 96       	adiw	r26, 0x03	; 3
     3b8:	9c 93       	st	X, r25
     3ba:	8e 93       	st	-X, r24
     3bc:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	1c 92       	st	X, r1
     3c2:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     3c4:	93 83       	std	Z+3, r25	; 0x03
     3c6:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     3c8:	b1 83       	std	Z+1, r27	; 0x01
     3ca:	a0 83       	st	Z, r26
     3cc:	08 95       	ret

000003ce <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     3dc:	0e 94 63 05 	call	0xac6	; 0xac6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     3e0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
     3e4:	81 11       	cpse	r24, r1
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     3e8:	0e 94 cc 01 	call	0x398	; 0x398 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     3f2:	20 97       	sbiw	r28, 0x00	; 0
     3f4:	71 f0       	breq	.+28     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     3f6:	ce 01       	movw	r24, r28
     3f8:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     3fa:	c8 17       	cp	r28, r24
     3fc:	d9 07       	cpc	r29, r25
     3fe:	38 f4       	brcc	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     400:	25 96       	adiw	r28, 0x05	; 5
     402:	8c 17       	cp	r24, r28
     404:	9d 07       	cpc	r25, r29
     406:	28 f0       	brcs	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
            }
        }
        else
        {
            xWantedSize = 0;
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     412:	20 97       	sbiw	r28, 0x00	; 0
     414:	09 f4       	brne	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     416:	5e c0       	rjmp	.+188    	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     418:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     41c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     420:	2c 17       	cp	r18, r28
     422:	3d 07       	cpc	r19, r29
     424:	08 f4       	brcc	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     426:	59 c0       	rjmp	.+178    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     428:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <xStart>
     42c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     430:	a7 e3       	ldi	r26, 0x37	; 55
     432:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
            {
                pxPreviousBlock = pxBlock;
     436:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     438:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     43a:	82 81       	ldd	r24, Z+2	; 0x02
     43c:	93 81       	ldd	r25, Z+3	; 0x03
     43e:	8c 17       	cp	r24, r28
     440:	9d 07       	cpc	r25, r29
     442:	20 f4       	brcc	.+8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	a9 f7       	brne	.-22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	e3 33       	cpi	r30, 0x33	; 51
     450:	f8 07       	cpc	r31, r24
     452:	09 f4       	brne	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     454:	45 c0       	rjmp	.+138    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     456:	0d 91       	ld	r16, X+
     458:	1c 91       	ld	r17, X
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	0c 5f       	subi	r16, 0xFC	; 252
     45e:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     460:	80 81       	ld	r24, Z
     462:	91 81       	ldd	r25, Z+1	; 0x01
     464:	8d 93       	st	X+, r24
     466:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	93 81       	ldd	r25, Z+3	; 0x03
     46c:	8c 1b       	sub	r24, r28
     46e:	9d 0b       	sbc	r25, r29
     470:	89 30       	cpi	r24, 0x09	; 9
     472:	91 05       	cpc	r25, r1
     474:	30 f1       	brcs	.+76     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     476:	bf 01       	movw	r22, r30
     478:	6c 0f       	add	r22, r28
     47a:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     47c:	db 01       	movw	r26, r22
     47e:	13 96       	adiw	r26, 0x03	; 3
     480:	9c 93       	st	X, r25
     482:	8e 93       	st	-X, r24
     484:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     486:	d3 83       	std	Z+3, r29	; 0x03
     488:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     48a:	12 96       	adiw	r26, 0x02	; 2
     48c:	4d 91       	ld	r20, X+
     48e:	5c 91       	ld	r21, X
     490:	13 97       	sbiw	r26, 0x03	; 3
     492:	0f 2e       	mov	r0, r31
     494:	f7 e3       	ldi	r31, 0x37	; 55
     496:	ef 2e       	mov	r14, r31
     498:	f1 e0       	ldi	r31, 0x01	; 1
     49a:	ff 2e       	mov	r15, r31
     49c:	f0 2d       	mov	r31, r0
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4a0:	7d 01       	movw	r14, r26
     4a2:	e7 01       	movw	r28, r14
     4a4:	a8 81       	ld	r26, Y
     4a6:	b9 81       	ldd	r27, Y+1	; 0x01
     4a8:	12 96       	adiw	r26, 0x02	; 2
     4aa:	8d 91       	ld	r24, X+
     4ac:	9c 91       	ld	r25, X
     4ae:	13 97       	sbiw	r26, 0x03	; 3
     4b0:	84 17       	cp	r24, r20
     4b2:	95 07       	cpc	r25, r21
     4b4:	a8 f3       	brcs	.-22     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4b6:	eb 01       	movw	r28, r22
     4b8:	b9 83       	std	Y+1, r27	; 0x01
     4ba:	a8 83       	st	Y, r26
     4bc:	d7 01       	movw	r26, r14
     4be:	6d 93       	st	X+, r22
     4c0:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	93 81       	ldd	r25, Z+3	; 0x03
     4c6:	28 1b       	sub	r18, r24
     4c8:	39 0b       	sbc	r19, r25
     4ca:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4ce:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     4d4:	00 e0       	ldi	r16, 0x00	; 0
     4d6:	10 e0       	ldi	r17, 0x00	; 0
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
     4da:	00 e0       	ldi	r16, 0x00	; 0
     4dc:	10 e0       	ldi	r17, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4e4:	0e 94 83 06 	call	0xd06	; 0xd06 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     4e8:	c8 01       	movw	r24, r16
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	08 95       	ret

000004f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	41 f1       	breq	.+80     	; 0x554 <vPortFree+0x5c>
     504:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     506:	8c 01       	movw	r16, r24
     508:	04 50       	subi	r16, 0x04	; 4
     50a:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     50c:	0e 94 63 05 	call	0xac6	; 0xac6 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     510:	f8 01       	movw	r30, r16
     512:	42 81       	ldd	r20, Z+2	; 0x02
     514:	53 81       	ldd	r21, Z+3	; 0x03
     516:	a7 e3       	ldi	r26, 0x37	; 55
     518:	b1 e0       	ldi	r27, 0x01	; 1
     51a:	01 c0       	rjmp	.+2      	; 0x51e <vPortFree+0x26>
     51c:	df 01       	movw	r26, r30
     51e:	ed 91       	ld	r30, X+
     520:	fc 91       	ld	r31, X
     522:	11 97       	sbiw	r26, 0x01	; 1
     524:	22 81       	ldd	r18, Z+2	; 0x02
     526:	33 81       	ldd	r19, Z+3	; 0x03
     528:	24 17       	cp	r18, r20
     52a:	35 07       	cpc	r19, r21
     52c:	b8 f3       	brcs	.-18     	; 0x51c <vPortFree+0x24>
     52e:	24 97       	sbiw	r28, 0x04	; 4
     530:	f9 83       	std	Y+1, r31	; 0x01
     532:	e8 83       	st	Y, r30
     534:	0d 93       	st	X+, r16
     536:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	9b 81       	ldd	r25, Y+3	; 0x03
     53c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     540:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     54c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     550:	0e 94 83 06 	call	0xd06	; 0xd06 <xTaskResumeAll>
    }
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	08 95       	ret

0000055e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     55e:	fc 01       	movw	r30, r24
     560:	03 96       	adiw	r24, 0x03	; 3
     562:	92 83       	std	Z+2, r25	; 0x02
     564:	81 83       	std	Z+1, r24	; 0x01
     566:	2f ef       	ldi	r18, 0xFF	; 255
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	34 83       	std	Z+4, r19	; 0x04
     56c:	23 83       	std	Z+3, r18	; 0x03
     56e:	96 83       	std	Z+6, r25	; 0x06
     570:	85 83       	std	Z+5, r24	; 0x05
     572:	90 87       	std	Z+8, r25	; 0x08
     574:	87 83       	std	Z+7, r24	; 0x07
     576:	10 82       	st	Z, r1
     578:	08 95       	ret

0000057a <vListInitialiseItem>:
     57a:	fc 01       	movw	r30, r24
     57c:	11 86       	std	Z+9, r1	; 0x09
     57e:	10 86       	std	Z+8, r1	; 0x08
     580:	08 95       	ret

00000582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     588:	48 81       	ld	r20, Y
     58a:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     58c:	4f 3f       	cpi	r20, 0xFF	; 255
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	52 07       	cpc	r21, r18
     592:	21 f4       	brne	.+8      	; 0x59c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     594:	fc 01       	movw	r30, r24
     596:	a7 81       	ldd	r26, Z+7	; 0x07
     598:	b0 85       	ldd	r27, Z+8	; 0x08
     59a:	0d c0       	rjmp	.+26     	; 0x5b6 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     59c:	dc 01       	movw	r26, r24
     59e:	13 96       	adiw	r26, 0x03	; 3
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <vListInsert+0x22>
     5a2:	df 01       	movw	r26, r30
     5a4:	12 96       	adiw	r26, 0x02	; 2
     5a6:	ed 91       	ld	r30, X+
     5a8:	fc 91       	ld	r31, X
     5aa:	13 97       	sbiw	r26, 0x03	; 3
     5ac:	20 81       	ld	r18, Z
     5ae:	31 81       	ldd	r19, Z+1	; 0x01
     5b0:	42 17       	cp	r20, r18
     5b2:	53 07       	cpc	r21, r19
     5b4:	b0 f7       	brcc	.-20     	; 0x5a2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5b6:	12 96       	adiw	r26, 0x02	; 2
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	13 97       	sbiw	r26, 0x03	; 3
     5be:	fb 83       	std	Y+3, r31	; 0x03
     5c0:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5c2:	d5 83       	std	Z+5, r29	; 0x05
     5c4:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     5c6:	bd 83       	std	Y+5, r27	; 0x05
     5c8:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     5ca:	13 96       	adiw	r26, 0x03	; 3
     5cc:	dc 93       	st	X, r29
     5ce:	ce 93       	st	-X, r28
     5d0:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5d2:	99 87       	std	Y+9, r25	; 0x09
     5d4:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 81       	ld	r18, Z
     5da:	2f 5f       	subi	r18, 0xFF	; 255
     5dc:	20 83       	st	Z, r18
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5ea:	a0 85       	ldd	r26, Z+8	; 0x08
     5ec:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5ee:	c2 81       	ldd	r28, Z+2	; 0x02
     5f0:	d3 81       	ldd	r29, Z+3	; 0x03
     5f2:	84 81       	ldd	r24, Z+4	; 0x04
     5f4:	95 81       	ldd	r25, Z+5	; 0x05
     5f6:	9d 83       	std	Y+5, r25	; 0x05
     5f8:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5fa:	c4 81       	ldd	r28, Z+4	; 0x04
     5fc:	d5 81       	ldd	r29, Z+5	; 0x05
     5fe:	82 81       	ldd	r24, Z+2	; 0x02
     600:	93 81       	ldd	r25, Z+3	; 0x03
     602:	9b 83       	std	Y+3, r25	; 0x03
     604:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     606:	11 96       	adiw	r26, 0x01	; 1
     608:	8d 91       	ld	r24, X+
     60a:	9c 91       	ld	r25, X
     60c:	12 97       	sbiw	r26, 0x02	; 2
     60e:	e8 17       	cp	r30, r24
     610:	f9 07       	cpc	r31, r25
     612:	31 f4       	brne	.+12     	; 0x620 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     614:	84 81       	ldd	r24, Z+4	; 0x04
     616:	95 81       	ldd	r25, Z+5	; 0x05
     618:	12 96       	adiw	r26, 0x02	; 2
     61a:	9c 93       	st	X, r25
     61c:	8e 93       	st	-X, r24
     61e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     620:	11 86       	std	Z+9, r1	; 0x09
     622:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     624:	8c 91       	ld	r24, X
     626:	81 50       	subi	r24, 0x01	; 1
     628:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     62a:	8c 91       	ld	r24, X
}
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     632:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <pxDelayedTaskList>
     636:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <pxDelayedTaskList+0x1>
     63a:	80 81       	ld	r24, Z
     63c:	81 11       	cpse	r24, r1
     63e:	07 c0       	rjmp	.+14     	; 0x64e <prvResetNextTaskUnblockTime+0x1c>
     640:	8f ef       	ldi	r24, 0xFF	; 255
     642:	9f ef       	ldi	r25, 0xFF	; 255
     644:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
     648:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
     64c:	08 95       	ret
     64e:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <pxDelayedTaskList>
     652:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <pxDelayedTaskList+0x1>
     656:	05 80       	ldd	r0, Z+5	; 0x05
     658:	f6 81       	ldd	r31, Z+6	; 0x06
     65a:	e0 2d       	mov	r30, r0
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
     664:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
     668:	08 95       	ret

0000066a <prvDeleteTCB>:
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	ec 01       	movw	r28, r24
     670:	8f 89       	ldd	r24, Y+23	; 0x17
     672:	98 8d       	ldd	r25, Y+24	; 0x18
     674:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <vPortFree>
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <vPortFree>
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <prvInitialiseNewTask>:
     684:	6f 92       	push	r6
     686:	7f 92       	push	r7
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	4c 01       	movw	r8, r24
     6a4:	d5 01       	movw	r26, r10
     6a6:	57 96       	adiw	r26, 0x17	; 23
     6a8:	8d 91       	ld	r24, X+
     6aa:	9c 91       	ld	r25, X
     6ac:	58 97       	sbiw	r26, 0x18	; 24
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	31 09       	sbc	r19, r1
     6b2:	3c 01       	movw	r6, r24
     6b4:	62 0e       	add	r6, r18
     6b6:	73 1e       	adc	r7, r19
     6b8:	61 15       	cp	r22, r1
     6ba:	71 05       	cpc	r23, r1
     6bc:	89 f4       	brne	.+34     	; 0x6e0 <prvInitialiseNewTask+0x5c>
     6be:	16 c0       	rjmp	.+44     	; 0x6ec <prvInitialiseNewTask+0x68>
     6c0:	82 2f       	mov	r24, r18
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	fb 01       	movw	r30, r22
     6c6:	e8 0f       	add	r30, r24
     6c8:	f9 1f       	adc	r31, r25
     6ca:	30 81       	ld	r19, Z
     6cc:	d5 01       	movw	r26, r10
     6ce:	a8 0f       	add	r26, r24
     6d0:	b9 1f       	adc	r27, r25
     6d2:	59 96       	adiw	r26, 0x19	; 25
     6d4:	3c 93       	st	X, r19
     6d6:	80 81       	ld	r24, Z
     6d8:	88 23       	and	r24, r24
     6da:	29 f0       	breq	.+10     	; 0x6e6 <prvInitialiseNewTask+0x62>
     6dc:	2f 5f       	subi	r18, 0xFF	; 255
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <prvInitialiseNewTask+0x5e>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	28 30       	cpi	r18, 0x08	; 8
     6e4:	68 f3       	brcs	.-38     	; 0x6c0 <prvInitialiseNewTask+0x3c>
     6e6:	f5 01       	movw	r30, r10
     6e8:	10 a2       	std	Z+32, r1	; 0x20
     6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <prvInitialiseNewTask+0x6e>
     6ec:	d5 01       	movw	r26, r10
     6ee:	59 96       	adiw	r26, 0x19	; 25
     6f0:	1c 92       	st	X, r1
     6f2:	b3 e0       	ldi	r27, 0x03	; 3
     6f4:	be 15       	cp	r27, r14
     6f6:	20 f4       	brcc	.+8      	; 0x700 <prvInitialiseNewTask+0x7c>
     6f8:	0f 2e       	mov	r0, r31
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	ef 2e       	mov	r14, r31
     6fe:	f0 2d       	mov	r31, r0
     700:	f5 01       	movw	r30, r10
     702:	e6 8a       	std	Z+22, r14	; 0x16
     704:	c5 01       	movw	r24, r10
     706:	02 96       	adiw	r24, 0x02	; 2
     708:	0e 94 bd 02 	call	0x57a	; 0x57a <vListInitialiseItem>
     70c:	c5 01       	movw	r24, r10
     70e:	0c 96       	adiw	r24, 0x0c	; 12
     710:	0e 94 bd 02 	call	0x57a	; 0x57a <vListInitialiseItem>
     714:	d5 01       	movw	r26, r10
     716:	19 96       	adiw	r26, 0x09	; 9
     718:	bc 92       	st	X, r11
     71a:	ae 92       	st	-X, r10
     71c:	18 97       	sbiw	r26, 0x08	; 8
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	8e 19       	sub	r24, r14
     724:	91 09       	sbc	r25, r1
     726:	1d 96       	adiw	r26, 0x0d	; 13
     728:	9c 93       	st	X, r25
     72a:	8e 93       	st	-X, r24
     72c:	1c 97       	sbiw	r26, 0x0c	; 12
     72e:	53 96       	adiw	r26, 0x13	; 19
     730:	bc 92       	st	X, r11
     732:	ae 92       	st	-X, r10
     734:	52 97       	sbiw	r26, 0x12	; 18
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	f5 01       	movw	r30, r10
     73a:	b1 96       	adiw	r30, 0x21	; 33
     73c:	df 01       	movw	r26, r30
     73e:	1d 92       	st	X+, r1
     740:	8a 95       	dec	r24
     742:	e9 f7       	brne	.-6      	; 0x73e <prvInitialiseNewTask+0xba>
     744:	f5 01       	movw	r30, r10
     746:	15 a2       	std	Z+37, r1	; 0x25
     748:	a8 01       	movw	r20, r16
     74a:	b4 01       	movw	r22, r8
     74c:	c3 01       	movw	r24, r6
     74e:	0e 94 79 00 	call	0xf2	; 0xf2 <pxPortInitialiseStack>
     752:	d5 01       	movw	r26, r10
     754:	8d 93       	st	X+, r24
     756:	9c 93       	st	X, r25
     758:	c1 14       	cp	r12, r1
     75a:	d1 04       	cpc	r13, r1
     75c:	19 f0       	breq	.+6      	; 0x764 <prvInitialiseNewTask+0xe0>
     75e:	f6 01       	movw	r30, r12
     760:	b1 82       	std	Z+1, r11	; 0x01
     762:	a0 82       	st	Z, r10
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	08 95       	ret

00000780 <prvInitialiseTaskLists>:
     780:	cf 93       	push	r28
     782:	c0 e0       	ldi	r28, 0x00	; 0
     784:	10 c0       	rjmp	.+32     	; 0x7a6 <prvInitialiseTaskLists+0x26>
     786:	8c 2f       	mov	r24, r28
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9c 01       	movw	r18, r24
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	82 0f       	add	r24, r18
     79a:	93 1f       	adc	r25, r19
     79c:	81 5b       	subi	r24, 0xB1	; 177
     79e:	98 4f       	sbci	r25, 0xF8	; 248
     7a0:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialise>
     7a4:	cf 5f       	subi	r28, 0xFF	; 255
     7a6:	c4 30       	cpi	r28, 0x04	; 4
     7a8:	70 f3       	brcs	.-36     	; 0x786 <prvInitialiseTaskLists+0x6>
     7aa:	86 e4       	ldi	r24, 0x46	; 70
     7ac:	97 e0       	ldi	r25, 0x07	; 7
     7ae:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialise>
     7b2:	8d e3       	ldi	r24, 0x3D	; 61
     7b4:	97 e0       	ldi	r25, 0x07	; 7
     7b6:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialise>
     7ba:	80 e3       	ldi	r24, 0x30	; 48
     7bc:	97 e0       	ldi	r25, 0x07	; 7
     7be:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialise>
     7c2:	87 e2       	ldi	r24, 0x27	; 39
     7c4:	97 e0       	ldi	r25, 0x07	; 7
     7c6:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialise>
     7ca:	86 e4       	ldi	r24, 0x46	; 70
     7cc:	97 e0       	ldi	r25, 0x07	; 7
     7ce:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <pxDelayedTaskList+0x1>
     7d2:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <pxDelayedTaskList>
     7d6:	8d e3       	ldi	r24, 0x3D	; 61
     7d8:	97 e0       	ldi	r25, 0x07	; 7
     7da:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <pxOverflowDelayedTaskList+0x1>
     7de:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <pxOverflowDelayedTaskList>
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <prvAddNewTaskToReadyList>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ec 01       	movw	r28, r24
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	0f 92       	push	r0
     7f2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxCurrentNumberOfTasks>
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <uxCurrentNumberOfTasks>
     7fc:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <pxCurrentTCB>
     800:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     804:	89 2b       	or	r24, r25
     806:	59 f4       	brne	.+22     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     808:	d0 93 74 07 	sts	0x0774, r29	; 0x800774 <pxCurrentTCB+0x1>
     80c:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <pxCurrentTCB>
     810:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxCurrentNumberOfTasks>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	99 f4       	brne	.+38     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     818:	0e 94 c0 03 	call	0x780	; 0x780 <prvInitialiseTaskLists>
     81c:	10 c0       	rjmp	.+32     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     81e:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xSchedulerRunning>
     822:	81 11       	cpse	r24, r1
     824:	0c c0       	rjmp	.+24     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     826:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <pxCurrentTCB>
     82a:	f0 91 74 07 	lds	r31, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     82e:	96 89       	ldd	r25, Z+22	; 0x16
     830:	8e 89       	ldd	r24, Y+22	; 0x16
     832:	89 17       	cp	r24, r25
     834:	20 f0       	brcs	.+8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     836:	d0 93 74 07 	sts	0x0774, r29	; 0x800774 <pxCurrentTCB+0x1>
     83a:	c0 93 73 07 	sts	0x0773, r28	; 0x800773 <pxCurrentTCB>
     83e:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <uxTaskNumber>
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <uxTaskNumber>
     848:	8e 89       	ldd	r24, Y+22	; 0x16
     84a:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <uxTopReadyPriority>
     84e:	98 17       	cp	r25, r24
     850:	10 f4       	brcc	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     852:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <uxTopReadyPriority>
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	8e 0f       	add	r24, r30
     868:	9f 1f       	adc	r25, r31
     86a:	fc 01       	movw	r30, r24
     86c:	e1 5b       	subi	r30, 0xB1	; 177
     86e:	f8 4f       	sbci	r31, 0xF8	; 248
     870:	01 80       	ldd	r0, Z+1	; 0x01
     872:	f2 81       	ldd	r31, Z+2	; 0x02
     874:	e0 2d       	mov	r30, r0
     876:	fd 83       	std	Y+5, r31	; 0x05
     878:	ec 83       	std	Y+4, r30	; 0x04
     87a:	84 81       	ldd	r24, Z+4	; 0x04
     87c:	95 81       	ldd	r25, Z+5	; 0x05
     87e:	9f 83       	std	Y+7, r25	; 0x07
     880:	8e 83       	std	Y+6, r24	; 0x06
     882:	a4 81       	ldd	r26, Z+4	; 0x04
     884:	b5 81       	ldd	r27, Z+5	; 0x05
     886:	ce 01       	movw	r24, r28
     888:	02 96       	adiw	r24, 0x02	; 2
     88a:	13 96       	adiw	r26, 0x03	; 3
     88c:	9c 93       	st	X, r25
     88e:	8e 93       	st	-X, r24
     890:	12 97       	sbiw	r26, 0x02	; 2
     892:	95 83       	std	Z+5, r25	; 0x05
     894:	84 83       	std	Z+4, r24	; 0x04
     896:	ee 89       	ldd	r30, Y+22	; 0x16
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	cf 01       	movw	r24, r30
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	e8 0f       	add	r30, r24
     8aa:	f9 1f       	adc	r31, r25
     8ac:	e1 5b       	subi	r30, 0xB1	; 177
     8ae:	f8 4f       	sbci	r31, 0xF8	; 248
     8b0:	fb 87       	std	Y+11, r31	; 0x0b
     8b2:	ea 87       	std	Y+10, r30	; 0x0a
     8b4:	80 81       	ld	r24, Z
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
     8b8:	80 83       	st	Z, r24
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <xSchedulerRunning>
     8c2:	88 23       	and	r24, r24
     8c4:	51 f0       	breq	.+20     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8c6:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <pxCurrentTCB>
     8ca:	f0 91 74 07 	lds	r31, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     8ce:	96 89       	ldd	r25, Z+22	; 0x16
     8d0:	8e 89       	ldd	r24, Y+22	; 0x16
     8d2:	98 17       	cp	r25, r24
     8d4:	10 f4       	brcc	.+4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8d6:	0e 94 14 01 	call	0x228	; 0x228 <vPortYield>
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <prvCheckTasksWaitingTermination>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	1c c0       	rjmp	.+56     	; 0x91e <__stack+0x1f>
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	0f 92       	push	r0
     8ec:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <xTasksWaitingTermination+0x5>
     8f0:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <xTasksWaitingTermination+0x6>
     8f4:	c6 81       	ldd	r28, Z+6	; 0x06
     8f6:	d7 81       	ldd	r29, Z+7	; 0x07
     8f8:	ce 01       	movw	r24, r28
     8fa:	02 96       	adiw	r24, 0x02	; 2
     8fc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <uxListRemove>
     900:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxCurrentNumberOfTasks>
     904:	81 50       	subi	r24, 0x01	; 1
     906:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <uxCurrentNumberOfTasks>
     90a:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <uxDeletedTasksWaitingCleanUp>
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <uxDeletedTasksWaitingCleanUp>
     914:	0f 90       	pop	r0
     916:	0f be       	out	0x3f, r0	; 63
     918:	ce 01       	movw	r24, r28
     91a:	0e 94 35 03 	call	0x66a	; 0x66a <prvDeleteTCB>
     91e:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <uxDeletedTasksWaitingCleanUp>
     922:	81 11       	cpse	r24, r1
     924:	e0 cf       	rjmp	.-64     	; 0x8e6 <prvCheckTasksWaitingTermination+0x6>
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <prvIdleTask>:
     92c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <prvCheckTasksWaitingTermination>
     930:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxReadyTasksLists>
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	d0 f3       	brcs	.-12     	; 0x92c <prvIdleTask>
     938:	0e 94 14 01 	call	0x228	; 0x228 <vPortYield>
     93c:	f7 cf       	rjmp	.-18     	; 0x92c <prvIdleTask>

0000093e <prvAddCurrentTaskToDelayedList>:
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
     948:	00 91 23 07 	lds	r16, 0x0723	; 0x800723 <xTickCount>
     94c:	10 91 24 07 	lds	r17, 0x0724	; 0x800724 <xTickCount+0x1>
     950:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <pxCurrentTCB>
     954:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     958:	02 96       	adiw	r24, 0x02	; 2
     95a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <uxListRemove>
     95e:	c0 0f       	add	r28, r16
     960:	d1 1f       	adc	r29, r17
     962:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <pxCurrentTCB>
     966:	f0 91 74 07 	lds	r31, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     96a:	d3 83       	std	Z+3, r29	; 0x03
     96c:	c2 83       	std	Z+2, r28	; 0x02
     96e:	c0 17       	cp	r28, r16
     970:	d1 07       	cpc	r29, r17
     972:	68 f4       	brcc	.+26     	; 0x98e <prvAddCurrentTaskToDelayedList+0x50>
     974:	60 91 73 07 	lds	r22, 0x0773	; 0x800773 <pxCurrentTCB>
     978:	70 91 74 07 	lds	r23, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     97c:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <pxOverflowDelayedTaskList>
     980:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <pxOverflowDelayedTaskList+0x1>
     984:	6e 5f       	subi	r22, 0xFE	; 254
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	0e 94 c1 02 	call	0x582	; 0x582 <vListInsert>
     98c:	17 c0       	rjmp	.+46     	; 0x9bc <prvAddCurrentTaskToDelayedList+0x7e>
     98e:	60 91 73 07 	lds	r22, 0x0773	; 0x800773 <pxCurrentTCB>
     992:	70 91 74 07 	lds	r23, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     996:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <pxDelayedTaskList>
     99a:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <pxDelayedTaskList+0x1>
     99e:	6e 5f       	subi	r22, 0xFE	; 254
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	0e 94 c1 02 	call	0x582	; 0x582 <vListInsert>
     9a6:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNextTaskUnblockTime>
     9aa:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNextTaskUnblockTime+0x1>
     9ae:	c8 17       	cp	r28, r24
     9b0:	d9 07       	cpc	r29, r25
     9b2:	20 f4       	brcc	.+8      	; 0x9bc <prvAddCurrentTaskToDelayedList+0x7e>
     9b4:	d0 93 1b 07 	sts	0x071B, r29	; 0x80071b <xNextTaskUnblockTime+0x1>
     9b8:	c0 93 1a 07 	sts	0x071A, r28	; 0x80071a <xNextTaskUnblockTime>
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	08 95       	ret

000009c6 <xTaskCreate>:
     9c6:	2f 92       	push	r2
     9c8:	3f 92       	push	r3
     9ca:	4f 92       	push	r4
     9cc:	5f 92       	push	r5
     9ce:	6f 92       	push	r6
     9d0:	7f 92       	push	r7
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	3c 01       	movw	r6, r24
     9ec:	1b 01       	movw	r2, r22
     9ee:	5a 01       	movw	r10, r20
     9f0:	29 01       	movw	r4, r18
     9f2:	ca 01       	movw	r24, r20
     9f4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     9f8:	6c 01       	movw	r12, r24
     9fa:	89 2b       	or	r24, r25
     9fc:	71 f0       	breq	.+28     	; 0xa1a <xTaskCreate+0x54>
     9fe:	86 e2       	ldi	r24, 0x26	; 38
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pvPortMalloc>
     a06:	ec 01       	movw	r28, r24
     a08:	89 2b       	or	r24, r25
     a0a:	19 f0       	breq	.+6      	; 0xa12 <xTaskCreate+0x4c>
     a0c:	d8 8e       	std	Y+24, r13	; 0x18
     a0e:	cf 8a       	std	Y+23, r12	; 0x17
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <xTaskCreate+0x58>
     a12:	c6 01       	movw	r24, r12
     a14:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <vPortFree>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <xTaskCreate+0x58>
     a1a:	c0 e0       	ldi	r28, 0x00	; 0
     a1c:	d0 e0       	ldi	r29, 0x00	; 0
     a1e:	20 97       	sbiw	r28, 0x00	; 0
     a20:	91 f0       	breq	.+36     	; 0xa46 <xTaskCreate+0x80>
     a22:	95 01       	movw	r18, r10
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	81 2c       	mov	r8, r1
     a2a:	91 2c       	mov	r9, r1
     a2c:	5e 01       	movw	r10, r28
     a2e:	67 01       	movw	r12, r14
     a30:	e0 2e       	mov	r14, r16
     a32:	82 01       	movw	r16, r4
     a34:	b1 01       	movw	r22, r2
     a36:	c3 01       	movw	r24, r6
     a38:	0e 94 42 03 	call	0x684	; 0x684 <prvInitialiseNewTask>
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <prvAddNewTaskToReadyList>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <xTaskCreate+0x82>
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	7f 90       	pop	r7
     a62:	6f 90       	pop	r6
     a64:	5f 90       	pop	r5
     a66:	4f 90       	pop	r4
     a68:	3f 90       	pop	r3
     a6a:	2f 90       	pop	r2
     a6c:	08 95       	ret

00000a6e <vTaskStartScheduler>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	0f 2e       	mov	r0, r31
     a76:	f8 e1       	ldi	r31, 0x18	; 24
     a78:	ef 2e       	mov	r14, r31
     a7a:	f7 e0       	ldi	r31, 0x07	; 7
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	00 e0       	ldi	r16, 0x00	; 0
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	45 e5       	ldi	r20, 0x55	; 85
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	63 e0       	ldi	r22, 0x03	; 3
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	86 e9       	ldi	r24, 0x96	; 150
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <xTaskCreate>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	81 f4       	brne	.+32     	; 0xaba <vTaskStartScheduler+0x4c>
     a9a:	f8 94       	cli
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNextTaskUnblockTime+0x1>
     aa4:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNextTaskUnblockTime>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <xSchedulerRunning>
     aae:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <xTickCount+0x1>
     ab2:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <xTickCount>
     ab6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <xPortStartScheduler>
     aba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	08 95       	ret

00000ac6 <vTaskSuspendAll>:
     ac6:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxSchedulerSuspended>
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <uxSchedulerSuspended>
     ad0:	08 95       	ret

00000ad2 <xTaskIncrementTick>:
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxSchedulerSuspended>
     ade:	81 11       	cpse	r24, r1
     ae0:	01 c1       	rjmp	.+514    	; 0xce4 <xTaskIncrementTick+0x212>
     ae2:	c0 91 23 07 	lds	r28, 0x0723	; 0x800723 <xTickCount>
     ae6:	d0 91 24 07 	lds	r29, 0x0724	; 0x800724 <xTickCount+0x1>
     aea:	8e 01       	movw	r16, r28
     aec:	0f 5f       	subi	r16, 0xFF	; 255
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
     af0:	10 93 24 07 	sts	0x0724, r17	; 0x800724 <xTickCount+0x1>
     af4:	00 93 23 07 	sts	0x0723, r16	; 0x800723 <xTickCount>
     af8:	01 15       	cp	r16, r1
     afa:	11 05       	cpc	r17, r1
     afc:	b9 f4       	brne	.+46     	; 0xb2c <xTaskIncrementTick+0x5a>
     afe:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <pxDelayedTaskList>
     b02:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <pxDelayedTaskList+0x1>
     b06:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <pxOverflowDelayedTaskList>
     b0a:	30 91 3a 07 	lds	r19, 0x073A	; 0x80073a <pxOverflowDelayedTaskList+0x1>
     b0e:	30 93 3c 07 	sts	0x073C, r19	; 0x80073c <pxDelayedTaskList+0x1>
     b12:	20 93 3b 07 	sts	0x073B, r18	; 0x80073b <pxDelayedTaskList>
     b16:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <pxOverflowDelayedTaskList+0x1>
     b1a:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <pxOverflowDelayedTaskList>
     b1e:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xNumOfOverflows>
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xNumOfOverflows>
     b28:	0e 94 19 03 	call	0x632	; 0x632 <prvResetNextTaskUnblockTime>
     b2c:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNextTaskUnblockTime>
     b30:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNextTaskUnblockTime+0x1>
     b34:	08 17       	cp	r16, r24
     b36:	19 07       	cpc	r17, r25
     b38:	20 f4       	brcc	.+8      	; 0xb42 <xTaskIncrementTick+0x70>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	b8 c0       	rjmp	.+368    	; 0xcae <xTaskIncrementTick+0x1dc>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <xTaskIncrementTick+0x72>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <pxDelayedTaskList>
     b48:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <pxDelayedTaskList+0x1>
     b4c:	90 81       	ld	r25, Z
     b4e:	91 11       	cpse	r25, r1
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <xTaskIncrementTick+0x8e>
     b52:	2f ef       	ldi	r18, 0xFF	; 255
     b54:	3f ef       	ldi	r19, 0xFF	; 255
     b56:	30 93 1b 07 	sts	0x071B, r19	; 0x80071b <xNextTaskUnblockTime+0x1>
     b5a:	20 93 1a 07 	sts	0x071A, r18	; 0x80071a <xNextTaskUnblockTime>
     b5e:	a7 c0       	rjmp	.+334    	; 0xcae <xTaskIncrementTick+0x1dc>
     b60:	e0 91 3b 07 	lds	r30, 0x073B	; 0x80073b <pxDelayedTaskList>
     b64:	f0 91 3c 07 	lds	r31, 0x073C	; 0x80073c <pxDelayedTaskList+0x1>
     b68:	05 80       	ldd	r0, Z+5	; 0x05
     b6a:	f6 81       	ldd	r31, Z+6	; 0x06
     b6c:	e0 2d       	mov	r30, r0
     b6e:	06 80       	ldd	r0, Z+6	; 0x06
     b70:	f7 81       	ldd	r31, Z+7	; 0x07
     b72:	e0 2d       	mov	r30, r0
     b74:	22 81       	ldd	r18, Z+2	; 0x02
     b76:	33 81       	ldd	r19, Z+3	; 0x03
     b78:	02 17       	cp	r16, r18
     b7a:	13 07       	cpc	r17, r19
     b7c:	28 f4       	brcc	.+10     	; 0xb88 <xTaskIncrementTick+0xb6>
     b7e:	30 93 1b 07 	sts	0x071B, r19	; 0x80071b <xNextTaskUnblockTime+0x1>
     b82:	20 93 1a 07 	sts	0x071A, r18	; 0x80071a <xNextTaskUnblockTime>
     b86:	93 c0       	rjmp	.+294    	; 0xcae <xTaskIncrementTick+0x1dc>
     b88:	a2 85       	ldd	r26, Z+10	; 0x0a
     b8a:	b3 85       	ldd	r27, Z+11	; 0x0b
     b8c:	24 81       	ldd	r18, Z+4	; 0x04
     b8e:	35 81       	ldd	r19, Z+5	; 0x05
     b90:	46 81       	ldd	r20, Z+6	; 0x06
     b92:	57 81       	ldd	r21, Z+7	; 0x07
     b94:	e9 01       	movw	r28, r18
     b96:	5d 83       	std	Y+5, r21	; 0x05
     b98:	4c 83       	std	Y+4, r20	; 0x04
     b9a:	26 81       	ldd	r18, Z+6	; 0x06
     b9c:	37 81       	ldd	r19, Z+7	; 0x07
     b9e:	44 81       	ldd	r20, Z+4	; 0x04
     ba0:	55 81       	ldd	r21, Z+5	; 0x05
     ba2:	e9 01       	movw	r28, r18
     ba4:	5b 83       	std	Y+3, r21	; 0x03
     ba6:	4a 83       	std	Y+2, r20	; 0x02
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	2d 91       	ld	r18, X+
     bac:	3c 91       	ld	r19, X
     bae:	12 97       	sbiw	r26, 0x02	; 2
     bb0:	af 01       	movw	r20, r30
     bb2:	4e 5f       	subi	r20, 0xFE	; 254
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	24 17       	cp	r18, r20
     bb8:	35 07       	cpc	r19, r21
     bba:	31 f4       	brne	.+12     	; 0xbc8 <xTaskIncrementTick+0xf6>
     bbc:	26 81       	ldd	r18, Z+6	; 0x06
     bbe:	37 81       	ldd	r19, Z+7	; 0x07
     bc0:	12 96       	adiw	r26, 0x02	; 2
     bc2:	3c 93       	st	X, r19
     bc4:	2e 93       	st	-X, r18
     bc6:	11 97       	sbiw	r26, 0x01	; 1
     bc8:	13 86       	std	Z+11, r1	; 0x0b
     bca:	12 86       	std	Z+10, r1	; 0x0a
     bcc:	9c 91       	ld	r25, X
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	9c 93       	st	X, r25
     bd2:	a4 89       	ldd	r26, Z+20	; 0x14
     bd4:	b5 89       	ldd	r27, Z+21	; 0x15
     bd6:	10 97       	sbiw	r26, 0x00	; 0
     bd8:	19 f1       	breq	.+70     	; 0xc20 <xTaskIncrementTick+0x14e>
     bda:	26 85       	ldd	r18, Z+14	; 0x0e
     bdc:	37 85       	ldd	r19, Z+15	; 0x0f
     bde:	60 89       	ldd	r22, Z+16	; 0x10
     be0:	71 89       	ldd	r23, Z+17	; 0x11
     be2:	e9 01       	movw	r28, r18
     be4:	7d 83       	std	Y+5, r23	; 0x05
     be6:	6c 83       	std	Y+4, r22	; 0x04
     be8:	20 89       	ldd	r18, Z+16	; 0x10
     bea:	31 89       	ldd	r19, Z+17	; 0x11
     bec:	66 85       	ldd	r22, Z+14	; 0x0e
     bee:	77 85       	ldd	r23, Z+15	; 0x0f
     bf0:	e9 01       	movw	r28, r18
     bf2:	7b 83       	std	Y+3, r23	; 0x03
     bf4:	6a 83       	std	Y+2, r22	; 0x02
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	6d 91       	ld	r22, X+
     bfa:	7c 91       	ld	r23, X
     bfc:	12 97       	sbiw	r26, 0x02	; 2
     bfe:	9f 01       	movw	r18, r30
     c00:	24 5f       	subi	r18, 0xF4	; 244
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	62 17       	cp	r22, r18
     c06:	73 07       	cpc	r23, r19
     c08:	31 f4       	brne	.+12     	; 0xc16 <xTaskIncrementTick+0x144>
     c0a:	20 89       	ldd	r18, Z+16	; 0x10
     c0c:	31 89       	ldd	r19, Z+17	; 0x11
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	3c 93       	st	X, r19
     c12:	2e 93       	st	-X, r18
     c14:	11 97       	sbiw	r26, 0x01	; 1
     c16:	15 8a       	std	Z+21, r1	; 0x15
     c18:	14 8a       	std	Z+20, r1	; 0x14
     c1a:	9c 91       	ld	r25, X
     c1c:	91 50       	subi	r25, 0x01	; 1
     c1e:	9c 93       	st	X, r25
     c20:	26 89       	ldd	r18, Z+22	; 0x16
     c22:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <uxTopReadyPriority>
     c26:	92 17       	cp	r25, r18
     c28:	10 f4       	brcc	.+4      	; 0xc2e <xTaskIncrementTick+0x15c>
     c2a:	20 93 22 07 	sts	0x0722, r18	; 0x800722 <uxTopReadyPriority>
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	d9 01       	movw	r26, r18
     c32:	aa 0f       	add	r26, r26
     c34:	bb 1f       	adc	r27, r27
     c36:	aa 0f       	add	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	aa 0f       	add	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	2a 0f       	add	r18, r26
     c40:	3b 1f       	adc	r19, r27
     c42:	d9 01       	movw	r26, r18
     c44:	a1 5b       	subi	r26, 0xB1	; 177
     c46:	b8 4f       	sbci	r27, 0xF8	; 248
     c48:	11 96       	adiw	r26, 0x01	; 1
     c4a:	0d 90       	ld	r0, X+
     c4c:	bc 91       	ld	r27, X
     c4e:	a0 2d       	mov	r26, r0
     c50:	b5 83       	std	Z+5, r27	; 0x05
     c52:	a4 83       	std	Z+4, r26	; 0x04
     c54:	14 96       	adiw	r26, 0x04	; 4
     c56:	2d 91       	ld	r18, X+
     c58:	3c 91       	ld	r19, X
     c5a:	15 97       	sbiw	r26, 0x05	; 5
     c5c:	37 83       	std	Z+7, r19	; 0x07
     c5e:	26 83       	std	Z+6, r18	; 0x06
     c60:	14 96       	adiw	r26, 0x04	; 4
     c62:	2d 91       	ld	r18, X+
     c64:	3c 91       	ld	r19, X
     c66:	15 97       	sbiw	r26, 0x05	; 5
     c68:	e9 01       	movw	r28, r18
     c6a:	5b 83       	std	Y+3, r21	; 0x03
     c6c:	4a 83       	std	Y+2, r20	; 0x02
     c6e:	15 96       	adiw	r26, 0x05	; 5
     c70:	5c 93       	st	X, r21
     c72:	4e 93       	st	-X, r20
     c74:	14 97       	sbiw	r26, 0x04	; 4
     c76:	a6 89       	ldd	r26, Z+22	; 0x16
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	9d 01       	movw	r18, r26
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	a2 0f       	add	r26, r18
     c8a:	b3 1f       	adc	r27, r19
     c8c:	a1 5b       	subi	r26, 0xB1	; 177
     c8e:	b8 4f       	sbci	r27, 0xF8	; 248
     c90:	b3 87       	std	Z+11, r27	; 0x0b
     c92:	a2 87       	std	Z+10, r26	; 0x0a
     c94:	9c 91       	ld	r25, X
     c96:	9f 5f       	subi	r25, 0xFF	; 255
     c98:	9c 93       	st	X, r25
     c9a:	26 89       	ldd	r18, Z+22	; 0x16
     c9c:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <pxCurrentTCB>
     ca0:	f0 91 74 07 	lds	r31, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     ca4:	96 89       	ldd	r25, Z+22	; 0x16
     ca6:	29 17       	cp	r18, r25
     ca8:	08 f0       	brcs	.+2      	; 0xcac <xTaskIncrementTick+0x1da>
     caa:	49 cf       	rjmp	.-366    	; 0xb3e <xTaskIncrementTick+0x6c>
     cac:	4b cf       	rjmp	.-362    	; 0xb44 <xTaskIncrementTick+0x72>
     cae:	e0 91 73 07 	lds	r30, 0x0773	; 0x800773 <pxCurrentTCB>
     cb2:	f0 91 74 07 	lds	r31, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     cb6:	26 89       	ldd	r18, Z+22	; 0x16
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	f9 01       	movw	r30, r18
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	2e 0f       	add	r18, r30
     cca:	3f 1f       	adc	r19, r31
     ccc:	f9 01       	movw	r30, r18
     cce:	e1 5b       	subi	r30, 0xB1	; 177
     cd0:	f8 4f       	sbci	r31, 0xF8	; 248
     cd2:	90 81       	ld	r25, Z
     cd4:	92 30       	cpi	r25, 0x02	; 2
     cd6:	08 f0       	brcs	.+2      	; 0xcda <xTaskIncrementTick+0x208>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <xYieldPending>
     cde:	91 11       	cpse	r25, r1
     ce0:	0c c0       	rjmp	.+24     	; 0xcfa <xTaskIncrementTick+0x228>
     ce2:	0c c0       	rjmp	.+24     	; 0xcfc <xTaskIncrementTick+0x22a>
     ce4:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <xPendedTicks>
     ce8:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <xPendedTicks+0x1>
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <xPendedTicks+0x1>
     cf2:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <xPendedTicks>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <xTaskIncrementTick+0x22a>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	08 95       	ret

00000d06 <xTaskResumeAll>:
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	0f 92       	push	r0
     d10:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxSchedulerSuspended>
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <uxSchedulerSuspended>
     d1a:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxSchedulerSuspended>
     d1e:	81 11       	cpse	r24, r1
     d20:	bf c0       	rjmp	.+382    	; 0xea0 <xTaskResumeAll+0x19a>
     d22:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxCurrentNumberOfTasks>
     d26:	81 11       	cpse	r24, r1
     d28:	96 c0       	rjmp	.+300    	; 0xe56 <xTaskResumeAll+0x150>
     d2a:	bd c0       	rjmp	.+378    	; 0xea6 <xTaskResumeAll+0x1a0>
     d2c:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <xPendingReadyList+0x5>
     d30:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <xPendingReadyList+0x6>
     d34:	06 80       	ldd	r0, Z+6	; 0x06
     d36:	f7 81       	ldd	r31, Z+7	; 0x07
     d38:	e0 2d       	mov	r30, r0
     d3a:	a4 89       	ldd	r26, Z+20	; 0x14
     d3c:	b5 89       	ldd	r27, Z+21	; 0x15
     d3e:	c6 85       	ldd	r28, Z+14	; 0x0e
     d40:	d7 85       	ldd	r29, Z+15	; 0x0f
     d42:	80 89       	ldd	r24, Z+16	; 0x10
     d44:	91 89       	ldd	r25, Z+17	; 0x11
     d46:	9d 83       	std	Y+5, r25	; 0x05
     d48:	8c 83       	std	Y+4, r24	; 0x04
     d4a:	c0 89       	ldd	r28, Z+16	; 0x10
     d4c:	d1 89       	ldd	r29, Z+17	; 0x11
     d4e:	86 85       	ldd	r24, Z+14	; 0x0e
     d50:	97 85       	ldd	r25, Z+15	; 0x0f
     d52:	9b 83       	std	Y+3, r25	; 0x03
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	2d 91       	ld	r18, X+
     d5a:	3c 91       	ld	r19, X
     d5c:	12 97       	sbiw	r26, 0x02	; 2
     d5e:	cf 01       	movw	r24, r30
     d60:	0c 96       	adiw	r24, 0x0c	; 12
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	31 f4       	brne	.+12     	; 0xd74 <xTaskResumeAll+0x6e>
     d68:	80 89       	ldd	r24, Z+16	; 0x10
     d6a:	91 89       	ldd	r25, Z+17	; 0x11
     d6c:	12 96       	adiw	r26, 0x02	; 2
     d6e:	9c 93       	st	X, r25
     d70:	8e 93       	st	-X, r24
     d72:	11 97       	sbiw	r26, 0x01	; 1
     d74:	15 8a       	std	Z+21, r1	; 0x15
     d76:	14 8a       	std	Z+20, r1	; 0x14
     d78:	8c 91       	ld	r24, X
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	8c 93       	st	X, r24
     d7e:	a2 85       	ldd	r26, Z+10	; 0x0a
     d80:	b3 85       	ldd	r27, Z+11	; 0x0b
     d82:	c4 81       	ldd	r28, Z+4	; 0x04
     d84:	d5 81       	ldd	r29, Z+5	; 0x05
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	97 81       	ldd	r25, Z+7	; 0x07
     d8a:	9d 83       	std	Y+5, r25	; 0x05
     d8c:	8c 83       	std	Y+4, r24	; 0x04
     d8e:	c6 81       	ldd	r28, Z+6	; 0x06
     d90:	d7 81       	ldd	r29, Z+7	; 0x07
     d92:	84 81       	ldd	r24, Z+4	; 0x04
     d94:	95 81       	ldd	r25, Z+5	; 0x05
     d96:	9b 83       	std	Y+3, r25	; 0x03
     d98:	8a 83       	std	Y+2, r24	; 0x02
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	8d 91       	ld	r24, X+
     d9e:	9c 91       	ld	r25, X
     da0:	12 97       	sbiw	r26, 0x02	; 2
     da2:	9f 01       	movw	r18, r30
     da4:	2e 5f       	subi	r18, 0xFE	; 254
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	82 17       	cp	r24, r18
     daa:	93 07       	cpc	r25, r19
     dac:	31 f4       	brne	.+12     	; 0xdba <xTaskResumeAll+0xb4>
     dae:	86 81       	ldd	r24, Z+6	; 0x06
     db0:	97 81       	ldd	r25, Z+7	; 0x07
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	11 97       	sbiw	r26, 0x01	; 1
     dba:	13 86       	std	Z+11, r1	; 0x0b
     dbc:	12 86       	std	Z+10, r1	; 0x0a
     dbe:	8c 91       	ld	r24, X
     dc0:	81 50       	subi	r24, 0x01	; 1
     dc2:	8c 93       	st	X, r24
     dc4:	86 89       	ldd	r24, Z+22	; 0x16
     dc6:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <uxTopReadyPriority>
     dca:	98 17       	cp	r25, r24
     dcc:	10 f4       	brcc	.+4      	; 0xdd2 <xTaskResumeAll+0xcc>
     dce:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <uxTopReadyPriority>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	dc 01       	movw	r26, r24
     dd6:	aa 0f       	add	r26, r26
     dd8:	bb 1f       	adc	r27, r27
     dda:	aa 0f       	add	r26, r26
     ddc:	bb 1f       	adc	r27, r27
     dde:	aa 0f       	add	r26, r26
     de0:	bb 1f       	adc	r27, r27
     de2:	8a 0f       	add	r24, r26
     de4:	9b 1f       	adc	r25, r27
     de6:	dc 01       	movw	r26, r24
     de8:	a1 5b       	subi	r26, 0xB1	; 177
     dea:	b8 4f       	sbci	r27, 0xF8	; 248
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	0d 90       	ld	r0, X+
     df0:	bc 91       	ld	r27, X
     df2:	a0 2d       	mov	r26, r0
     df4:	b5 83       	std	Z+5, r27	; 0x05
     df6:	a4 83       	std	Z+4, r26	; 0x04
     df8:	14 96       	adiw	r26, 0x04	; 4
     dfa:	8d 91       	ld	r24, X+
     dfc:	9c 91       	ld	r25, X
     dfe:	15 97       	sbiw	r26, 0x05	; 5
     e00:	97 83       	std	Z+7, r25	; 0x07
     e02:	86 83       	std	Z+6, r24	; 0x06
     e04:	14 96       	adiw	r26, 0x04	; 4
     e06:	cd 91       	ld	r28, X+
     e08:	dc 91       	ld	r29, X
     e0a:	15 97       	sbiw	r26, 0x05	; 5
     e0c:	3b 83       	std	Y+3, r19	; 0x03
     e0e:	2a 83       	std	Y+2, r18	; 0x02
     e10:	15 96       	adiw	r26, 0x05	; 5
     e12:	3c 93       	st	X, r19
     e14:	2e 93       	st	-X, r18
     e16:	14 97       	sbiw	r26, 0x04	; 4
     e18:	a6 89       	ldd	r26, Z+22	; 0x16
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	cd 01       	movw	r24, r26
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	a8 0f       	add	r26, r24
     e2c:	b9 1f       	adc	r27, r25
     e2e:	a1 5b       	subi	r26, 0xB1	; 177
     e30:	b8 4f       	sbci	r27, 0xF8	; 248
     e32:	b3 87       	std	Z+11, r27	; 0x0b
     e34:	a2 87       	std	Z+10, r26	; 0x0a
     e36:	8c 91       	ld	r24, X
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	8c 93       	st	X, r24
     e3c:	96 89       	ldd	r25, Z+22	; 0x16
     e3e:	a0 91 73 07 	lds	r26, 0x0773	; 0x800773 <pxCurrentTCB>
     e42:	b0 91 74 07 	lds	r27, 0x0774	; 0x800774 <pxCurrentTCB+0x1>
     e46:	56 96       	adiw	r26, 0x16	; 22
     e48:	8c 91       	ld	r24, X
     e4a:	98 17       	cp	r25, r24
     e4c:	30 f0       	brcs	.+12     	; 0xe5a <xTaskResumeAll+0x154>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xYieldPending>
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <xTaskResumeAll+0x154>
     e56:	e0 e0       	ldi	r30, 0x00	; 0
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <xPendingReadyList>
     e5e:	81 11       	cpse	r24, r1
     e60:	65 cf       	rjmp	.-310    	; 0xd2c <xTaskResumeAll+0x26>
     e62:	ef 2b       	or	r30, r31
     e64:	11 f0       	breq	.+4      	; 0xe6a <xTaskResumeAll+0x164>
     e66:	0e 94 19 03 	call	0x632	; 0x632 <prvResetNextTaskUnblockTime>
     e6a:	c0 91 1f 07 	lds	r28, 0x071F	; 0x80071f <xPendedTicks>
     e6e:	d0 91 20 07 	lds	r29, 0x0720	; 0x800720 <xPendedTicks+0x1>
     e72:	20 97       	sbiw	r28, 0x00	; 0
     e74:	69 f0       	breq	.+26     	; 0xe90 <xTaskResumeAll+0x18a>
     e76:	0e 94 69 05 	call	0xad2	; 0xad2 <xTaskIncrementTick>
     e7a:	88 23       	and	r24, r24
     e7c:	19 f0       	breq	.+6      	; 0xe84 <xTaskResumeAll+0x17e>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xYieldPending>
     e84:	21 97       	sbiw	r28, 0x01	; 1
     e86:	b9 f7       	brne	.-18     	; 0xe76 <xTaskResumeAll+0x170>
     e88:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <xPendedTicks+0x1>
     e8c:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <xPendedTicks>
     e90:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <xYieldPending>
     e94:	88 23       	and	r24, r24
     e96:	31 f0       	breq	.+12     	; 0xea4 <xTaskResumeAll+0x19e>
     e98:	0e 94 14 01 	call	0x228	; 0x228 <vPortYield>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <xTaskResumeAll+0x1a0>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <xTaskResumeAll+0x1a0>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <vTaskDelay>:
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
     eb6:	89 2b       	or	r24, r25
     eb8:	49 f0       	breq	.+18     	; 0xecc <vTaskDelay+0x1c>
     eba:	0e 94 63 05 	call	0xac6	; 0xac6 <vTaskSuspendAll>
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	ce 01       	movw	r24, r28
     ec2:	0e 94 9f 04 	call	0x93e	; 0x93e <prvAddCurrentTaskToDelayedList>
     ec6:	0e 94 83 06 	call	0xd06	; 0xd06 <xTaskResumeAll>
     eca:	01 c0       	rjmp	.+2      	; 0xece <vTaskDelay+0x1e>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	81 11       	cpse	r24, r1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vTaskDelay+0x26>
     ed2:	0e 94 14 01 	call	0x228	; 0x228 <vPortYield>
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     edc:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <uxSchedulerSuspended>
     ee0:	88 23       	and	r24, r24
     ee2:	21 f0       	breq	.+8      	; 0xeec <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xYieldPending>
     eea:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     eec:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     ef0:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <uxTopReadyPriority>
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <vTaskSwitchContext+0x1c>
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	82 2f       	mov	r24, r18
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	fc 01       	movw	r30, r24
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	e8 0f       	add	r30, r24
     f0c:	f9 1f       	adc	r31, r25
     f0e:	e1 5b       	subi	r30, 0xB1	; 177
     f10:	f8 4f       	sbci	r31, 0xF8	; 248
     f12:	30 81       	ld	r19, Z
     f14:	33 23       	and	r19, r19
     f16:	79 f3       	breq	.-34     	; 0xef6 <vTaskSwitchContext+0x1a>
     f18:	ac 01       	movw	r20, r24
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	44 0f       	add	r20, r20
     f20:	55 1f       	adc	r21, r21
     f22:	44 0f       	add	r20, r20
     f24:	55 1f       	adc	r21, r21
     f26:	48 0f       	add	r20, r24
     f28:	59 1f       	adc	r21, r25
     f2a:	df 01       	movw	r26, r30
     f2c:	01 80       	ldd	r0, Z+1	; 0x01
     f2e:	f2 81       	ldd	r31, Z+2	; 0x02
     f30:	e0 2d       	mov	r30, r0
     f32:	02 80       	ldd	r0, Z+2	; 0x02
     f34:	f3 81       	ldd	r31, Z+3	; 0x03
     f36:	e0 2d       	mov	r30, r0
     f38:	12 96       	adiw	r26, 0x02	; 2
     f3a:	fc 93       	st	X, r31
     f3c:	ee 93       	st	-X, r30
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	4e 5a       	subi	r20, 0xAE	; 174
     f42:	58 4f       	sbci	r21, 0xF8	; 248
     f44:	e4 17       	cp	r30, r20
     f46:	f5 07       	cpc	r31, r21
     f48:	29 f4       	brne	.+10     	; 0xf54 <vTaskSwitchContext+0x78>
     f4a:	42 81       	ldd	r20, Z+2	; 0x02
     f4c:	53 81       	ldd	r21, Z+3	; 0x03
     f4e:	fd 01       	movw	r30, r26
     f50:	52 83       	std	Z+2, r21	; 0x02
     f52:	41 83       	std	Z+1, r20	; 0x01
     f54:	fc 01       	movw	r30, r24
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	8e 0f       	add	r24, r30
     f64:	9f 1f       	adc	r25, r31
     f66:	fc 01       	movw	r30, r24
     f68:	e1 5b       	subi	r30, 0xB1	; 177
     f6a:	f8 4f       	sbci	r31, 0xF8	; 248
     f6c:	01 80       	ldd	r0, Z+1	; 0x01
     f6e:	f2 81       	ldd	r31, Z+2	; 0x02
     f70:	e0 2d       	mov	r30, r0
     f72:	86 81       	ldd	r24, Z+6	; 0x06
     f74:	97 81       	ldd	r25, Z+7	; 0x07
     f76:	90 93 74 07 	sts	0x0774, r25	; 0x800774 <pxCurrentTCB+0x1>
     f7a:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <pxCurrentTCB>
     f7e:	20 93 22 07 	sts	0x0722, r18	; 0x800722 <uxTopReadyPriority>
     f82:	08 95       	ret

00000f84 <task1>:
	}
}
void task1(void)
{
	//taskENTER_CRITICAL();
	x++;
     f84:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <x>
     f88:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <x+0x1>
     f8c:	a0 91 7b 07 	lds	r26, 0x077B	; 0x80077b <x+0x2>
     f90:	b0 91 7c 07 	lds	r27, 0x077C	; 0x80077c <x+0x3>
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	a1 1d       	adc	r26, r1
     f98:	b1 1d       	adc	r27, r1
     f9a:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <x>
     f9e:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <x+0x1>
     fa2:	a0 93 7b 07 	sts	0x077B, r26	; 0x80077b <x+0x2>
     fa6:	b0 93 7c 07 	sts	0x077C, r27	; 0x80077c <x+0x3>
	//if task is leaved here shared data problem may occur here
	//to solve this uncomment x_critical(); 
	y++;
     faa:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <y>
     fae:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <y+0x1>
     fb2:	a0 91 77 07 	lds	r26, 0x0777	; 0x800777 <y+0x2>
     fb6:	b0 91 78 07 	lds	r27, 0x0778	; 0x800778 <y+0x3>
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	a1 1d       	adc	r26, r1
     fbe:	b1 1d       	adc	r27, r1
     fc0:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <y>
     fc4:	90 93 76 07 	sts	0x0776, r25	; 0x800776 <y+0x1>
     fc8:	a0 93 77 07 	sts	0x0777, r26	; 0x800777 <y+0x2>
     fcc:	b0 93 78 07 	sts	0x0778, r27	; 0x800778 <y+0x3>
     fd0:	08 95       	ret

00000fd2 <task2>:
    char* a= "shared data problem here " ;
	while(1)
	{

	 int i=0;
	 if (y != x)
     fd2:	40 91 75 07 	lds	r20, 0x0775	; 0x800775 <y>
     fd6:	50 91 76 07 	lds	r21, 0x0776	; 0x800776 <y+0x1>
     fda:	60 91 77 07 	lds	r22, 0x0777	; 0x800777 <y+0x2>
     fde:	70 91 78 07 	lds	r23, 0x0778	; 0x800778 <y+0x3>
     fe2:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <x>
     fe6:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <x+0x1>
     fea:	a0 91 7b 07 	lds	r26, 0x077B	; 0x80077b <x+0x2>
     fee:	b0 91 7c 07 	lds	r27, 0x077C	; 0x80077c <x+0x3>
     ff2:	48 17       	cp	r20, r24
     ff4:	59 07       	cpc	r21, r25
     ff6:	6a 07       	cpc	r22, r26
     ff8:	7b 07       	cpc	r23, r27
     ffa:	29 f4       	brne	.+10     	; 0x1006 <task2+0x34>
     ffc:	0f c0       	rjmp	.+30     	; 0x101c <task2+0x4a>
	 {
		 while(a[i] != '\0')
		 {
			 UATR_SEND(a[i]);
     ffe:	0e 94 63 00 	call	0xc6	; 0xc6 <UATR_SEND>
			 i++;
    1002:	21 96       	adiw	r28, 0x01	; 1
    1004:	02 c0       	rjmp	.+4      	; 0x100a <task2+0x38>
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	d0 e0       	ldi	r29, 0x00	; 0
	{

	 int i=0;
	 if (y != x)
	 {
		 while(a[i] != '\0')
    100a:	fe 01       	movw	r30, r28
    100c:	e8 5f       	subi	r30, 0xF8	; 248
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	80 81       	ld	r24, Z
    1012:	81 11       	cpse	r24, r1
    1014:	f4 cf       	rjmp	.-24     	; 0xffe <task2+0x2c>
		 {
			 UATR_SEND(a[i]);
			 i++;
		 }
		 UATR_SEND('\n');
    1016:	8a e0       	ldi	r24, 0x0A	; 10
    1018:	0e 94 63 00 	call	0xc6	; 0xc6 <UATR_SEND>
		 i=0;
		 
	  }
	vTaskDelay(27); 	
    101c:	8b e1       	ldi	r24, 0x1B	; 27
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 58 07 	call	0xeb0	; 0xeb0 <vTaskDelay>
	   
	}
    1024:	d6 cf       	rjmp	.-84     	; 0xfd2 <task2>

00001026 <init>:
uint32_t x=0 , y=0;
 
 void init()
  {
	 
	 UART_init();
    1026:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
    102a:	08 95       	ret

0000102c <main>:
	//taskEXIT_CRITICAL();

}

int main(void)
{
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <main+0xc>
    1038:	00 d0       	rcall	.+0      	; 0x103a <main+0xe>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    init();
    103e:	0e 94 13 08 	call	0x1026	; 0x1026 <init>
	
	TaskHandle_t task1_h,task2_h;
	
	xTaskCreate(task1,"process",150,NULL,1,&task1_h);
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	7c 01       	movw	r14, r24
    1048:	01 e0       	ldi	r16, 0x01	; 1
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	46 e9       	ldi	r20, 0x96	; 150
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	62 e2       	ldi	r22, 0x22	; 34
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	82 ec       	ldi	r24, 0xC2	; 194
    1058:	97 e0       	ldi	r25, 0x07	; 7
    105a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <xTaskCreate>
	xTaskCreate(task2,"handler",150,NULL,2,&task2_h);
    105e:	ce 01       	movw	r24, r28
    1060:	03 96       	adiw	r24, 0x03	; 3
    1062:	7c 01       	movw	r14, r24
    1064:	02 e0       	ldi	r16, 0x02	; 2
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	46 e9       	ldi	r20, 0x96	; 150
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	6a e2       	ldi	r22, 0x2A	; 42
    1070:	71 e0       	ldi	r23, 0x01	; 1
    1072:	89 ee       	ldi	r24, 0xE9	; 233
    1074:	97 e0       	ldi	r25, 0x07	; 7
    1076:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <xTaskCreate>
	
	
	vTaskStartScheduler();
    107a:	0e 94 37 05 	call	0xa6e	; 0xa6e <vTaskStartScheduler>
	
	
	
   
}
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	08 95       	ret

00001096 <_exit>:
    1096:	f8 94       	cli

00001098 <__stop_program>:
    1098:	ff cf       	rjmp	.-2      	; 0x1098 <__stop_program>
