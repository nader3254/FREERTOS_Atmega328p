
lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00002026  000020ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002026  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000650  0080011e  0080011e  000020d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ddb  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001365  00000000  00000000  000083f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003803  00000000  00000000  00009758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f74  00000000  00000000  0000cf5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b3b  00000000  00000000  0000ded0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006564  00000000  00000000  0000fa0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00015f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e2       	ldi	r30, 0x26	; 38
      7c:	f0 e2       	ldi	r31, 0x20	; 32
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 36       	cpi	r26, 0x6E	; 110
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <main>
      9e:	0c 94 11 10 	jmp	0x2022	; 0x2022 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <out>:
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
      a6:	2a e0       	ldi	r18, 0x0A	; 10
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	6a c0       	rjmp	.+212    	; 0x180 <out+0xda>
      ac:	a9 01       	movw	r20, r18
      ae:	f9 01       	movw	r30, r18
      b0:	72 97       	sbiw	r30, 0x12	; 18
      b2:	3a 97       	sbiw	r30, 0x0a	; 10
      b4:	f0 f4       	brcc	.+60     	; 0xf2 <out+0x4c>
      b6:	e8 2f       	mov	r30, r24
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	2e 17       	cp	r18, r30
      bc:	3f 07       	cpc	r19, r31
      be:	c9 f4       	brne	.+50     	; 0xf2 <out+0x4c>
      c0:	24 51       	subi	r18, 0x14	; 20
      c2:	34 b1       	in	r19, 0x04	; 4
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	02 c0       	rjmp	.+4      	; 0xce <out+0x28>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	2a 95       	dec	r18
      d0:	e2 f7       	brpl	.-8      	; 0xca <out+0x24>
      d2:	23 2f       	mov	r18, r19
      d4:	28 2b       	or	r18, r24
      d6:	24 b9       	out	0x04, r18	; 4
      d8:	68 36       	cpi	r22, 0x68	; 104
      da:	11 f0       	breq	.+4      	; 0xe0 <out+0x3a>
      dc:	68 34       	cpi	r22, 0x48	; 72
      de:	21 f4       	brne	.+8      	; 0xe8 <out+0x42>
      e0:	95 b1       	in	r25, 0x05	; 5
      e2:	89 2b       	or	r24, r25
      e4:	85 b9       	out	0x05, r24	; 5
      e6:	08 95       	ret
      e8:	95 b1       	in	r25, 0x05	; 5
      ea:	80 95       	com	r24
      ec:	89 23       	and	r24, r25
      ee:	85 b9       	out	0x05, r24	; 5
      f0:	08 95       	ret
      f2:	fa 01       	movw	r30, r20
      f4:	7c 97       	sbiw	r30, 0x1c	; 28
      f6:	3a 97       	sbiw	r30, 0x0a	; 10
      f8:	f0 f4       	brcc	.+60     	; 0x136 <out+0x90>
      fa:	e8 2f       	mov	r30, r24
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	2e 17       	cp	r18, r30
     100:	3f 07       	cpc	r19, r31
     102:	c9 f4       	brne	.+50     	; 0x136 <out+0x90>
     104:	2e 51       	subi	r18, 0x1E	; 30
     106:	37 b1       	in	r19, 0x07	; 7
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	02 c0       	rjmp	.+4      	; 0x112 <out+0x6c>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	2a 95       	dec	r18
     114:	e2 f7       	brpl	.-8      	; 0x10e <out+0x68>
     116:	23 2f       	mov	r18, r19
     118:	28 2b       	or	r18, r24
     11a:	27 b9       	out	0x07, r18	; 7
     11c:	68 36       	cpi	r22, 0x68	; 104
     11e:	11 f0       	breq	.+4      	; 0x124 <out+0x7e>
     120:	68 34       	cpi	r22, 0x48	; 72
     122:	21 f4       	brne	.+8      	; 0x12c <out+0x86>
     124:	98 b1       	in	r25, 0x08	; 8
     126:	89 2b       	or	r24, r25
     128:	88 b9       	out	0x08, r24	; 8
     12a:	08 95       	ret
     12c:	98 b1       	in	r25, 0x08	; 8
     12e:	80 95       	com	r24
     130:	89 23       	and	r24, r25
     132:	88 b9       	out	0x08, r24	; 8
     134:	08 95       	ret
     136:	46 52       	subi	r20, 0x26	; 38
     138:	51 09       	sbc	r21, r1
     13a:	4a 30       	cpi	r20, 0x0A	; 10
     13c:	51 05       	cpc	r21, r1
     13e:	f0 f4       	brcc	.+60     	; 0x17c <out+0xd6>
     140:	48 2f       	mov	r20, r24
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	24 17       	cp	r18, r20
     146:	35 07       	cpc	r19, r21
     148:	c9 f4       	brne	.+50     	; 0x17c <out+0xd6>
     14a:	28 52       	subi	r18, 0x28	; 40
     14c:	3a b1       	in	r19, 0x0a	; 10
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <out+0xb2>
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	2a 95       	dec	r18
     15a:	e2 f7       	brpl	.-8      	; 0x154 <out+0xae>
     15c:	23 2f       	mov	r18, r19
     15e:	28 2b       	or	r18, r24
     160:	2a b9       	out	0x0a, r18	; 10
     162:	68 36       	cpi	r22, 0x68	; 104
     164:	11 f0       	breq	.+4      	; 0x16a <out+0xc4>
     166:	68 34       	cpi	r22, 0x48	; 72
     168:	21 f4       	brne	.+8      	; 0x172 <out+0xcc>
     16a:	9b b1       	in	r25, 0x0b	; 11
     16c:	89 2b       	or	r24, r25
     16e:	8b b9       	out	0x0b, r24	; 11
     170:	08 95       	ret
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	80 95       	com	r24
     176:	89 23       	and	r24, r25
     178:	8b b9       	out	0x0b, r24	; 11
     17a:	08 95       	ret
     17c:	2f 5f       	subi	r18, 0xFF	; 255
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	20 33       	cpi	r18, 0x30	; 48
     182:	31 05       	cpc	r19, r1
     184:	0c f4       	brge	.+2      	; 0x188 <out+0xe2>
     186:	92 cf       	rjmp	.-220    	; 0xac <out+0x6>
     188:	08 95       	ret

0000018a <toggle>:
void toggle(uint8_t a3)
{
	for (int i=10;i<48;i++)
     18a:	2a e0       	ldi	r18, 0x0A	; 10
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	47 c0       	rjmp	.+142    	; 0x21e <toggle+0x94>
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a3){uint8_t tmp =i-10;PORTA ^=(1<<tmp);}}
		if (i>=18&&i<28)//for port B
     190:	a9 01       	movw	r20, r18
     192:	b9 01       	movw	r22, r18
     194:	62 51       	subi	r22, 0x12	; 18
     196:	71 09       	sbc	r23, r1
     198:	6a 30       	cpi	r22, 0x0A	; 10
     19a:	71 05       	cpc	r23, r1
     19c:	88 f4       	brcc	.+34     	; 0x1c0 <toggle+0x36>
		{if (i==a3){uint8_t tmp =i-20;PORTB ^=(1<<tmp);}}
     19e:	68 2f       	mov	r22, r24
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	26 17       	cp	r18, r22
     1a4:	37 07       	cpc	r19, r23
     1a6:	61 f4       	brne	.+24     	; 0x1c0 <toggle+0x36>
     1a8:	ec ee       	ldi	r30, 0xEC	; 236
     1aa:	e2 0f       	add	r30, r18
     1ac:	95 b1       	in	r25, 0x05	; 5
     1ae:	61 e0       	ldi	r22, 0x01	; 1
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <toggle+0x2e>
     1b4:	66 0f       	add	r22, r22
     1b6:	77 1f       	adc	r23, r23
     1b8:	ea 95       	dec	r30
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <toggle+0x2a>
     1bc:	69 27       	eor	r22, r25
     1be:	65 b9       	out	0x05, r22	; 5
		if (i>=28&&i<38)//for port C
     1c0:	ba 01       	movw	r22, r20
     1c2:	6c 51       	subi	r22, 0x1C	; 28
     1c4:	71 09       	sbc	r23, r1
     1c6:	6a 30       	cpi	r22, 0x0A	; 10
     1c8:	71 05       	cpc	r23, r1
     1ca:	88 f4       	brcc	.+34     	; 0x1ee <toggle+0x64>
		{if (i==a3){uint8_t tmp =i-30;PORTC ^=(1<<tmp);}}
     1cc:	68 2f       	mov	r22, r24
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	26 17       	cp	r18, r22
     1d2:	37 07       	cpc	r19, r23
     1d4:	61 f4       	brne	.+24     	; 0x1ee <toggle+0x64>
     1d6:	e2 ee       	ldi	r30, 0xE2	; 226
     1d8:	e2 0f       	add	r30, r18
     1da:	98 b1       	in	r25, 0x08	; 8
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <toggle+0x5c>
     1e2:	66 0f       	add	r22, r22
     1e4:	77 1f       	adc	r23, r23
     1e6:	ea 95       	dec	r30
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <toggle+0x58>
     1ea:	69 27       	eor	r22, r25
     1ec:	68 b9       	out	0x08, r22	; 8
		if (i>=38&&i<48)//for port D
     1ee:	46 52       	subi	r20, 0x26	; 38
     1f0:	51 09       	sbc	r21, r1
     1f2:	4a 30       	cpi	r20, 0x0A	; 10
     1f4:	51 05       	cpc	r21, r1
     1f6:	88 f4       	brcc	.+34     	; 0x21a <toggle+0x90>
		{if (i==a3){uint8_t tmp =i-40;PORTD ^=(1<<tmp);}}
     1f8:	48 2f       	mov	r20, r24
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	24 17       	cp	r18, r20
     1fe:	35 07       	cpc	r19, r21
     200:	61 f4       	brne	.+24     	; 0x21a <toggle+0x90>
     202:	68 ed       	ldi	r22, 0xD8	; 216
     204:	62 0f       	add	r22, r18
     206:	9b b1       	in	r25, 0x0b	; 11
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	02 c0       	rjmp	.+4      	; 0x212 <toggle+0x88>
     20e:	44 0f       	add	r20, r20
     210:	55 1f       	adc	r21, r21
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <toggle+0x84>
     216:	49 27       	eor	r20, r25
     218:	4b b9       	out	0x0b, r20	; 11
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
void toggle(uint8_t a3)
{
	for (int i=10;i<48;i++)
     21a:	2f 5f       	subi	r18, 0xFF	; 255
     21c:	3f 4f       	sbci	r19, 0xFF	; 255
     21e:	20 33       	cpi	r18, 0x30	; 48
     220:	31 05       	cpc	r19, r1
     222:	0c f4       	brge	.+2      	; 0x226 <toggle+0x9c>
     224:	b5 cf       	rjmp	.-150    	; 0x190 <toggle+0x6>
		if (i>=28&&i<38)//for port C
		{if (i==a3){uint8_t tmp =i-30;PORTC ^=(1<<tmp);}}
		if (i>=38&&i<48)//for port D
		{if (i==a3){uint8_t tmp =i-40;PORTD ^=(1<<tmp);}}
	}
     226:	08 95       	ret

00000228 <UART_init>:
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = x;
     228:	e2 ec       	ldi	r30, 0xC2	; 194
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	86 60       	ori	r24, 0x06	; 6
     230:	80 83       	st	Z, r24
     232:	87 e6       	ldi	r24, 0x67	; 103
     234:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     238:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     23c:	e1 ec       	ldi	r30, 0xC1	; 193
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	88 61       	ori	r24, 0x18	; 24
     244:	80 83       	st	Z, r24
     246:	08 95       	ret

00000248 <UART_recieve>:
char UART_recieve()
{
	

	
	while(!(UCSR0A & (1<<RXC0)) );
     248:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     24c:	88 23       	and	r24, r24
     24e:	e4 f7       	brge	.-8      	; 0x248 <UART_recieve>
	
	return  UDR0;
     250:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSRA & (1<<RXC)));
	char x = (char) UDR ;
   
   return x;*/
	//return 'a';
     254:	08 95       	ret

00000256 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     25c:	83 ef       	ldi	r24, 0xF3	; 243
     25e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     262:	8b e0       	ldi	r24, 0x0B	; 11
     264:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     268:	ef e6       	ldi	r30, 0x6F	; 111
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	82 60       	ori	r24, 0x02	; 2
     270:	80 83       	st	Z, r24
     272:	08 95       	ret

00000274 <pxPortInitialiseStack>:
     274:	31 e1       	ldi	r19, 0x11	; 17
     276:	fc 01       	movw	r30, r24
     278:	30 83       	st	Z, r19
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	22 e2       	ldi	r18, 0x22	; 34
     27e:	20 83       	st	Z, r18
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	a3 e3       	ldi	r26, 0x33	; 51
     284:	a0 83       	st	Z, r26
     286:	31 97       	sbiw	r30, 0x01	; 1
     288:	60 83       	st	Z, r22
     28a:	31 97       	sbiw	r30, 0x01	; 1
     28c:	70 83       	st	Z, r23
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	10 82       	st	Z, r1
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	60 e8       	ldi	r22, 0x80	; 128
     296:	60 83       	st	Z, r22
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	10 82       	st	Z, r1
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	62 e0       	ldi	r22, 0x02	; 2
     2a0:	60 83       	st	Z, r22
     2a2:	31 97       	sbiw	r30, 0x01	; 1
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	60 83       	st	Z, r22
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	64 e0       	ldi	r22, 0x04	; 4
     2ac:	60 83       	st	Z, r22
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	65 e0       	ldi	r22, 0x05	; 5
     2b2:	60 83       	st	Z, r22
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	66 e0       	ldi	r22, 0x06	; 6
     2b8:	60 83       	st	Z, r22
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	67 e0       	ldi	r22, 0x07	; 7
     2be:	60 83       	st	Z, r22
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	68 e0       	ldi	r22, 0x08	; 8
     2c4:	60 83       	st	Z, r22
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	69 e0       	ldi	r22, 0x09	; 9
     2ca:	60 83       	st	Z, r22
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	60 e1       	ldi	r22, 0x10	; 16
     2d0:	60 83       	st	Z, r22
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	30 83       	st	Z, r19
     2d6:	31 97       	sbiw	r30, 0x01	; 1
     2d8:	32 e1       	ldi	r19, 0x12	; 18
     2da:	30 83       	st	Z, r19
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	33 e1       	ldi	r19, 0x13	; 19
     2e0:	30 83       	st	Z, r19
     2e2:	31 97       	sbiw	r30, 0x01	; 1
     2e4:	34 e1       	ldi	r19, 0x14	; 20
     2e6:	30 83       	st	Z, r19
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	35 e1       	ldi	r19, 0x15	; 21
     2ec:	30 83       	st	Z, r19
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	36 e1       	ldi	r19, 0x16	; 22
     2f2:	30 83       	st	Z, r19
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	37 e1       	ldi	r19, 0x17	; 23
     2f8:	30 83       	st	Z, r19
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	38 e1       	ldi	r19, 0x18	; 24
     2fe:	30 83       	st	Z, r19
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	39 e1       	ldi	r19, 0x19	; 25
     304:	30 83       	st	Z, r19
     306:	31 97       	sbiw	r30, 0x01	; 1
     308:	30 e2       	ldi	r19, 0x20	; 32
     30a:	30 83       	st	Z, r19
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	31 e2       	ldi	r19, 0x21	; 33
     310:	30 83       	st	Z, r19
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	20 83       	st	Z, r18
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	23 e2       	ldi	r18, 0x23	; 35
     31a:	20 83       	st	Z, r18
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	40 83       	st	Z, r20
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	50 83       	st	Z, r21
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	26 e2       	ldi	r18, 0x26	; 38
     328:	20 83       	st	Z, r18
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	27 e2       	ldi	r18, 0x27	; 39
     32e:	20 83       	st	Z, r18
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	28 e2       	ldi	r18, 0x28	; 40
     334:	20 83       	st	Z, r18
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	29 e2       	ldi	r18, 0x29	; 41
     33a:	20 83       	st	Z, r18
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	20 e3       	ldi	r18, 0x30	; 48
     340:	20 83       	st	Z, r18
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	21 e3       	ldi	r18, 0x31	; 49
     346:	20 83       	st	Z, r18
     348:	86 97       	sbiw	r24, 0x26	; 38
     34a:	08 95       	ret

0000034c <xPortStartScheduler>:
     34c:	0e 94 2b 01 	call	0x256	; 0x256 <prvSetupTimerInterrupt>
     350:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
     354:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
     358:	cd 91       	ld	r28, X+
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	dd 91       	ld	r29, X+
     35e:	de bf       	out	0x3e, r29	; 62
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	bf 91       	pop	r27
     36a:	af 91       	pop	r26
     36c:	9f 91       	pop	r25
     36e:	8f 91       	pop	r24
     370:	7f 91       	pop	r23
     372:	6f 91       	pop	r22
     374:	5f 91       	pop	r21
     376:	4f 91       	pop	r20
     378:	3f 91       	pop	r19
     37a:	2f 91       	pop	r18
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	df 90       	pop	r13
     386:	cf 90       	pop	r12
     388:	bf 90       	pop	r11
     38a:	af 90       	pop	r10
     38c:	9f 90       	pop	r9
     38e:	8f 90       	pop	r8
     390:	7f 90       	pop	r7
     392:	6f 90       	pop	r6
     394:	5f 90       	pop	r5
     396:	4f 90       	pop	r4
     398:	3f 90       	pop	r3
     39a:	2f 90       	pop	r2
     39c:	1f 90       	pop	r1
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	08 95       	ret
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	08 95       	ret

000003aa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	0f 92       	push	r0
     3b2:	1f 92       	push	r1
     3b4:	11 24       	eor	r1, r1
     3b6:	2f 92       	push	r2
     3b8:	3f 92       	push	r3
     3ba:	4f 92       	push	r4
     3bc:	5f 92       	push	r5
     3be:	6f 92       	push	r6
     3c0:	7f 92       	push	r7
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	2f 93       	push	r18
     3d8:	3f 93       	push	r19
     3da:	4f 93       	push	r20
     3dc:	5f 93       	push	r21
     3de:	6f 93       	push	r22
     3e0:	7f 93       	push	r23
     3e2:	8f 93       	push	r24
     3e4:	9f 93       	push	r25
     3e6:	af 93       	push	r26
     3e8:	bf 93       	push	r27
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
     3f2:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
     3f6:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
     3fa:	0d b6       	in	r0, 0x3d	; 61
     3fc:	0d 92       	st	X+, r0
     3fe:	0e b6       	in	r0, 0x3e	; 62
     400:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     402:	0e 94 b5 0b 	call	0x176a	; 0x176a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     406:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
     40a:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
     40e:	cd 91       	ld	r28, X+
     410:	cd bf       	out	0x3d, r28	; 61
     412:	dd 91       	ld	r29, X+
     414:	de bf       	out	0x3e, r29	; 62
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	bf 90       	pop	r11
     440:	af 90       	pop	r10
     442:	9f 90       	pop	r9
     444:	8f 90       	pop	r8
     446:	7f 90       	pop	r7
     448:	6f 90       	pop	r6
     44a:	5f 90       	pop	r5
     44c:	4f 90       	pop	r4
     44e:	3f 90       	pop	r3
     450:	2f 90       	pop	r2
     452:	1f 90       	pop	r1
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0

	asm volatile ( "ret" );
     45a:	08 95       	ret

0000045c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	0f 92       	push	r0
     464:	1f 92       	push	r1
     466:	11 24       	eor	r1, r1
     468:	2f 92       	push	r2
     46a:	3f 92       	push	r3
     46c:	4f 92       	push	r4
     46e:	5f 92       	push	r5
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	6f 93       	push	r22
     492:	7f 93       	push	r23
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
     4a8:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
     4ac:	0d b6       	in	r0, 0x3d	; 61
     4ae:	0d 92       	st	X+, r0
     4b0:	0e b6       	in	r0, 0x3e	; 62
     4b2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4b4:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskIncrementTick>
     4b8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4ba:	0e 94 b5 0b 	call	0x176a	; 0x176a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4be:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
     4c2:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
     4c6:	cd 91       	ld	r28, X+
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	dd 91       	ld	r29, X+
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	ff 91       	pop	r31
     4d0:	ef 91       	pop	r30
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	9f 90       	pop	r9
     4fc:	8f 90       	pop	r8
     4fe:	7f 90       	pop	r7
     500:	6f 90       	pop	r6
     502:	5f 90       	pop	r5
     504:	4f 90       	pop	r4
     506:	3f 90       	pop	r3
     508:	2f 90       	pop	r2
     50a:	1f 90       	pop	r1
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0

	asm volatile ( "ret" );
     512:	08 95       	ret

00000514 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     514:	0e 94 2e 02 	call	0x45c	; 0x45c <vPortYieldFromTick>
		asm volatile ( "reti" );
     518:	18 95       	reti

0000051a <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	8b e0       	ldi	r24, 0x0B	; 11
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 2e 03 	call	0x65c	; 0x65c <pvPortMalloc>
     526:	ec 01       	movw	r28, r24
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	31 f0       	breq	.+12     	; 0x538 <xEventGroupCreate+0x1e>
     52c:	fc 01       	movw	r30, r24
     52e:	11 92       	st	Z+, r1
     530:	11 92       	st	Z+, r1
     532:	cf 01       	movw	r24, r30
     534:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     538:	ce 01       	movw	r24, r28
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <xEventGroupClearBits>:
     540:	fc 01       	movw	r30, r24
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	0f 92       	push	r0
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	60 95       	com	r22
     54e:	70 95       	com	r23
     550:	68 23       	and	r22, r24
     552:	79 23       	and	r23, r25
     554:	71 83       	std	Z+1, r23	; 0x01
     556:	60 83       	st	Z, r22
     558:	0f 90       	pop	r0
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	08 95       	ret

0000055e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	7c 01       	movw	r14, r24
     570:	8b 01       	movw	r16, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     572:	ec 01       	movw	r28, r24
     574:	25 96       	adiw	r28, 0x05	; 5
    vTaskSuspendAll();
     576:	0e 94 c0 09 	call	0x1380	; 0x1380 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     57a:	d7 01       	movw	r26, r14
     57c:	17 96       	adiw	r26, 0x07	; 7
     57e:	ed 91       	ld	r30, X+
     580:	fc 91       	ld	r31, X
     582:	18 97       	sbiw	r26, 0x08	; 8

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     584:	8d 91       	ld	r24, X+
     586:	9c 91       	ld	r25, X
     588:	11 97       	sbiw	r26, 0x01	; 1
     58a:	08 2b       	or	r16, r24
     58c:	19 2b       	or	r17, r25
     58e:	0d 93       	st	X+, r16
     590:	1c 93       	st	X, r17
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     592:	00 e0       	ldi	r16, 0x00	; 0
     594:	10 e0       	ldi	r17, 0x00	; 0

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     596:	2d c0       	rjmp	.+90     	; 0x5f2 <xEventGroupSetBits+0x94>
        {
            pxNext = listGET_NEXT( pxListItem );
     598:	c2 80       	ldd	r12, Z+2	; 0x02
     59a:	d3 80       	ldd	r13, Z+3	; 0x03
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     59c:	80 81       	ld	r24, Z
     59e:	91 81       	ldd	r25, Z+1	; 0x01
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     5a0:	9c 01       	movw	r18, r24
     5a2:	33 27       	eor	r19, r19

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     5a4:	92 fd       	sbrc	r25, 2
     5a6:	09 c0       	rjmp	.+18     	; 0x5ba <xEventGroupSetBits+0x5c>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     5a8:	d7 01       	movw	r26, r14
     5aa:	4d 91       	ld	r20, X+
     5ac:	5c 91       	ld	r21, X
     5ae:	42 23       	and	r20, r18
     5b0:	53 23       	and	r21, r19
     5b2:	45 2b       	or	r20, r21
     5b4:	61 f4       	brne	.+24     	; 0x5ce <xEventGroupSetBits+0x70>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <xEventGroupSetBits+0x76>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     5ba:	d7 01       	movw	r26, r14
     5bc:	4d 91       	ld	r20, X+
     5be:	5c 91       	ld	r21, X
     5c0:	42 23       	and	r20, r18
     5c2:	53 23       	and	r21, r19
     5c4:	24 17       	cp	r18, r20
     5c6:	35 07       	cpc	r19, r21
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <xEventGroupSetBits+0x74>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <xEventGroupSetBits+0x76>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <xEventGroupSetBits+0x76>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     5d2:	41 e0       	ldi	r20, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     5d4:	44 23       	and	r20, r20
     5d6:	59 f0       	breq	.+22     	; 0x5ee <xEventGroupSetBits+0x90>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     5d8:	90 ff       	sbrs	r25, 0
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <xEventGroupSetBits+0x82>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     5dc:	02 2b       	or	r16, r18
     5de:	13 2b       	or	r17, r19
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     5e0:	d7 01       	movw	r26, r14
     5e2:	6d 91       	ld	r22, X+
     5e4:	7c 91       	ld	r23, X
     5e6:	72 60       	ori	r23, 0x02	; 2
     5e8:	cf 01       	movw	r24, r30
     5ea:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     5ee:	ec 2d       	mov	r30, r12
     5f0:	fd 2d       	mov	r31, r13

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     5f2:	ec 17       	cp	r30, r28
     5f4:	fd 07       	cpc	r31, r29
     5f6:	81 f6       	brne	.-96     	; 0x598 <xEventGroupSetBits+0x3a>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     5f8:	00 95       	com	r16
     5fa:	10 95       	com	r17
     5fc:	f7 01       	movw	r30, r14
     5fe:	80 81       	ld	r24, Z
     600:	91 81       	ldd	r25, Z+1	; 0x01
     602:	08 23       	and	r16, r24
     604:	19 23       	and	r17, r25
     606:	11 83       	std	Z+1, r17	; 0x01
     608:	00 83       	st	Z, r16
    }
    ( void ) xTaskResumeAll();
     60a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
}
     60e:	d7 01       	movw	r26, r14
     610:	8d 91       	ld	r24, X+
     612:	9c 91       	ld	r25, X
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     626:	a3 e2       	ldi	r26, 0x23	; 35
     628:	b1 e0       	ldi	r27, 0x01	; 1
     62a:	e7 e2       	ldi	r30, 0x27	; 39
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	11 96       	adiw	r26, 0x01	; 1
     630:	fc 93       	st	X, r31
     632:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     634:	13 96       	adiw	r26, 0x03	; 3
     636:	1c 92       	st	X, r1
     638:	1e 92       	st	-X, r1
     63a:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     63c:	af e1       	ldi	r26, 0x1F	; 31
     63e:	b1 e0       	ldi	r27, 0x01	; 1
     640:	8b ed       	ldi	r24, 0xDB	; 219
     642:	95 e0       	ldi	r25, 0x05	; 5
     644:	13 96       	adiw	r26, 0x03	; 3
     646:	9c 93       	st	X, r25
     648:	8e 93       	st	-X, r24
     64a:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     64c:	11 96       	adiw	r26, 0x01	; 1
     64e:	1c 92       	st	X, r1
     650:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     652:	93 83       	std	Z+3, r25	; 0x03
     654:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     656:	b1 83       	std	Z+1, r27	; 0x01
     658:	a0 83       	st	Z, r26
     65a:	08 95       	ret

0000065c <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     66a:	0e 94 c0 09 	call	0x1380	; 0x1380 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     66e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     672:	81 11       	cpse	r24, r1
     674:	05 c0       	rjmp	.+10     	; 0x680 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     676:	0e 94 13 03 	call	0x626	; 0x626 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     680:	20 97       	sbiw	r28, 0x00	; 0
     682:	71 f0       	breq	.+28     	; 0x6a0 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     684:	ce 01       	movw	r24, r28
     686:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     688:	c8 17       	cp	r28, r24
     68a:	d9 07       	cpc	r29, r25
     68c:	38 f4       	brcc	.+14     	; 0x69c <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     68e:	25 96       	adiw	r28, 0x05	; 5
     690:	8c 17       	cp	r24, r28
     692:	9d 07       	cpc	r25, r29
     694:	28 f0       	brcs	.+10     	; 0x6a0 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     696:	c0 e0       	ldi	r28, 0x00	; 0
     698:	d0 e0       	ldi	r29, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     69c:	c0 e0       	ldi	r28, 0x00	; 0
     69e:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     6a0:	20 97       	sbiw	r28, 0x00	; 0
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <pvPortMalloc+0x4a>
     6a4:	5e c0       	rjmp	.+188    	; 0x762 <pvPortMalloc+0x106>
     6a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6ae:	2c 17       	cp	r18, r28
     6b0:	3d 07       	cpc	r19, r29
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <pvPortMalloc+0x5a>
     6b4:	59 c0       	rjmp	.+178    	; 0x768 <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     6b6:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <xStart>
     6ba:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     6be:	a3 e2       	ldi	r26, 0x23	; 35
     6c0:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     6c4:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     6c6:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6c8:	82 81       	ldd	r24, Z+2	; 0x02
     6ca:	93 81       	ldd	r25, Z+3	; 0x03
     6cc:	8c 17       	cp	r24, r28
     6ce:	9d 07       	cpc	r25, r29
     6d0:	20 f4       	brcc	.+8      	; 0x6da <pvPortMalloc+0x7e>
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	a9 f7       	brne	.-22     	; 0x6c4 <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	ef 31       	cpi	r30, 0x1F	; 31
     6de:	f8 07       	cpc	r31, r24
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <pvPortMalloc+0x88>
     6e2:	45 c0       	rjmp	.+138    	; 0x76e <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     6e4:	0d 91       	ld	r16, X+
     6e6:	1c 91       	ld	r17, X
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	0c 5f       	subi	r16, 0xFC	; 252
     6ec:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6ee:	80 81       	ld	r24, Z
     6f0:	91 81       	ldd	r25, Z+1	; 0x01
     6f2:	8d 93       	st	X+, r24
     6f4:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	93 81       	ldd	r25, Z+3	; 0x03
     6fa:	8c 1b       	sub	r24, r28
     6fc:	9d 0b       	sbc	r25, r29
     6fe:	89 30       	cpi	r24, 0x09	; 9
     700:	91 05       	cpc	r25, r1
     702:	30 f1       	brcs	.+76     	; 0x750 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     704:	bf 01       	movw	r22, r30
     706:	6c 0f       	add	r22, r28
     708:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     70a:	db 01       	movw	r26, r22
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	9c 93       	st	X, r25
     710:	8e 93       	st	-X, r24
     712:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     714:	d3 83       	std	Z+3, r29	; 0x03
     716:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     718:	12 96       	adiw	r26, 0x02	; 2
     71a:	4d 91       	ld	r20, X+
     71c:	5c 91       	ld	r21, X
     71e:	13 97       	sbiw	r26, 0x03	; 3
     720:	0f 2e       	mov	r0, r31
     722:	f3 e2       	ldi	r31, 0x23	; 35
     724:	ef 2e       	mov	r14, r31
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	01 c0       	rjmp	.+2      	; 0x730 <pvPortMalloc+0xd4>
     72e:	7d 01       	movw	r14, r26
     730:	e7 01       	movw	r28, r14
     732:	a8 81       	ld	r26, Y
     734:	b9 81       	ldd	r27, Y+1	; 0x01
     736:	12 96       	adiw	r26, 0x02	; 2
     738:	8d 91       	ld	r24, X+
     73a:	9c 91       	ld	r25, X
     73c:	13 97       	sbiw	r26, 0x03	; 3
     73e:	84 17       	cp	r24, r20
     740:	95 07       	cpc	r25, r21
     742:	a8 f3       	brcs	.-22     	; 0x72e <pvPortMalloc+0xd2>
     744:	eb 01       	movw	r28, r22
     746:	b9 83       	std	Y+1, r27	; 0x01
     748:	a8 83       	st	Y, r26
     74a:	d7 01       	movw	r26, r14
     74c:	6d 93       	st	X+, r22
     74e:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	28 1b       	sub	r18, r24
     756:	39 0b       	sbc	r19, r25
     758:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     75c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     760:	08 c0       	rjmp	.+16     	; 0x772 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     762:	00 e0       	ldi	r16, 0x00	; 0
     764:	10 e0       	ldi	r17, 0x00	; 0
     766:	05 c0       	rjmp	.+10     	; 0x772 <pvPortMalloc+0x116>
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	02 c0       	rjmp	.+4      	; 0x772 <pvPortMalloc+0x116>
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     772:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     776:	c8 01       	movw	r24, r16
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	08 95       	ret

00000786 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	41 f1       	breq	.+80     	; 0x7e2 <vPortFree+0x5c>
     792:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     794:	8c 01       	movw	r16, r24
     796:	04 50       	subi	r16, 0x04	; 4
     798:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     79a:	0e 94 c0 09 	call	0x1380	; 0x1380 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     79e:	f8 01       	movw	r30, r16
     7a0:	42 81       	ldd	r20, Z+2	; 0x02
     7a2:	53 81       	ldd	r21, Z+3	; 0x03
     7a4:	a3 e2       	ldi	r26, 0x23	; 35
     7a6:	b1 e0       	ldi	r27, 0x01	; 1
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <vPortFree+0x26>
     7aa:	df 01       	movw	r26, r30
     7ac:	ed 91       	ld	r30, X+
     7ae:	fc 91       	ld	r31, X
     7b0:	11 97       	sbiw	r26, 0x01	; 1
     7b2:	22 81       	ldd	r18, Z+2	; 0x02
     7b4:	33 81       	ldd	r19, Z+3	; 0x03
     7b6:	24 17       	cp	r18, r20
     7b8:	35 07       	cpc	r19, r21
     7ba:	b8 f3       	brcs	.-18     	; 0x7aa <vPortFree+0x24>
     7bc:	24 97       	sbiw	r28, 0x04	; 4
     7be:	f9 83       	std	Y+1, r31	; 0x01
     7c0:	e8 83       	st	Y, r30
     7c2:	0d 93       	st	X+, r16
     7c4:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7d2:	82 0f       	add	r24, r18
     7d4:	93 1f       	adc	r25, r19
     7d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     7de:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
    }
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     7ec:	fc 01       	movw	r30, r24
     7ee:	03 96       	adiw	r24, 0x03	; 3
     7f0:	92 83       	std	Z+2, r25	; 0x02
     7f2:	81 83       	std	Z+1, r24	; 0x01
     7f4:	2f ef       	ldi	r18, 0xFF	; 255
     7f6:	3f ef       	ldi	r19, 0xFF	; 255
     7f8:	34 83       	std	Z+4, r19	; 0x04
     7fa:	23 83       	std	Z+3, r18	; 0x03
     7fc:	96 83       	std	Z+6, r25	; 0x06
     7fe:	85 83       	std	Z+5, r24	; 0x05
     800:	90 87       	std	Z+8, r25	; 0x08
     802:	87 83       	std	Z+7, r24	; 0x07
     804:	10 82       	st	Z, r1
     806:	08 95       	ret

00000808 <vListInitialiseItem>:
     808:	fc 01       	movw	r30, r24
     80a:	11 86       	std	Z+9, r1	; 0x09
     80c:	10 86       	std	Z+8, r1	; 0x08
     80e:	08 95       	ret

00000810 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     816:	48 81       	ld	r20, Y
     818:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     81a:	4f 3f       	cpi	r20, 0xFF	; 255
     81c:	2f ef       	ldi	r18, 0xFF	; 255
     81e:	52 07       	cpc	r21, r18
     820:	21 f4       	brne	.+8      	; 0x82a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     822:	fc 01       	movw	r30, r24
     824:	a7 81       	ldd	r26, Z+7	; 0x07
     826:	b0 85       	ldd	r27, Z+8	; 0x08
     828:	0d c0       	rjmp	.+26     	; 0x844 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     82a:	dc 01       	movw	r26, r24
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	01 c0       	rjmp	.+2      	; 0x832 <vListInsert+0x22>
     830:	df 01       	movw	r26, r30
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	ed 91       	ld	r30, X+
     836:	fc 91       	ld	r31, X
     838:	13 97       	sbiw	r26, 0x03	; 3
     83a:	20 81       	ld	r18, Z
     83c:	31 81       	ldd	r19, Z+1	; 0x01
     83e:	42 17       	cp	r20, r18
     840:	53 07       	cpc	r21, r19
     842:	b0 f7       	brcc	.-20     	; 0x830 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     844:	12 96       	adiw	r26, 0x02	; 2
     846:	ed 91       	ld	r30, X+
     848:	fc 91       	ld	r31, X
     84a:	13 97       	sbiw	r26, 0x03	; 3
     84c:	fb 83       	std	Y+3, r31	; 0x03
     84e:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     850:	d5 83       	std	Z+5, r29	; 0x05
     852:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     854:	bd 83       	std	Y+5, r27	; 0x05
     856:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     858:	13 96       	adiw	r26, 0x03	; 3
     85a:	dc 93       	st	X, r29
     85c:	ce 93       	st	-X, r28
     85e:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     860:	99 87       	std	Y+9, r25	; 0x09
     862:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     864:	fc 01       	movw	r30, r24
     866:	20 81       	ld	r18, Z
     868:	2f 5f       	subi	r18, 0xFF	; 255
     86a:	20 83       	st	Z, r18
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     878:	a0 85       	ldd	r26, Z+8	; 0x08
     87a:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     87c:	c2 81       	ldd	r28, Z+2	; 0x02
     87e:	d3 81       	ldd	r29, Z+3	; 0x03
     880:	84 81       	ldd	r24, Z+4	; 0x04
     882:	95 81       	ldd	r25, Z+5	; 0x05
     884:	9d 83       	std	Y+5, r25	; 0x05
     886:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     888:	c4 81       	ldd	r28, Z+4	; 0x04
     88a:	d5 81       	ldd	r29, Z+5	; 0x05
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	93 81       	ldd	r25, Z+3	; 0x03
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     894:	11 96       	adiw	r26, 0x01	; 1
     896:	8d 91       	ld	r24, X+
     898:	9c 91       	ld	r25, X
     89a:	12 97       	sbiw	r26, 0x02	; 2
     89c:	e8 17       	cp	r30, r24
     89e:	f9 07       	cpc	r31, r25
     8a0:	31 f4       	brne	.+12     	; 0x8ae <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     8a2:	84 81       	ldd	r24, Z+4	; 0x04
     8a4:	95 81       	ldd	r25, Z+5	; 0x05
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	9c 93       	st	X, r25
     8aa:	8e 93       	st	-X, r24
     8ac:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     8ae:	11 86       	std	Z+9, r1	; 0x09
     8b0:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     8b2:	8c 91       	ld	r24, X
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     8b8:	8c 91       	ld	r24, X
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     8c0:	dc 01       	movw	r26, r24
     8c2:	51 96       	adiw	r26, 0x11	; 17
     8c4:	2c 91       	ld	r18, X
     8c6:	51 97       	sbiw	r26, 0x11	; 17
     8c8:	22 23       	and	r18, r18
     8ca:	41 f0       	breq	.+16     	; 0x8dc <prvGetDisinheritPriorityAfterTimeout+0x1c>
     8cc:	56 96       	adiw	r26, 0x16	; 22
     8ce:	ed 91       	ld	r30, X+
     8d0:	fc 91       	ld	r31, X
     8d2:	57 97       	sbiw	r26, 0x17	; 23
     8d4:	90 81       	ld	r25, Z
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	89 1b       	sub	r24, r25
     8da:	08 95       	ret
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret

000008e0 <prvIsQueueEmpty>:
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	0f 92       	push	r0
     8e6:	fc 01       	movw	r30, r24
     8e8:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ea:	81 11       	cpse	r24, r1
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <prvIsQueueEmpty+0x12>
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <prvIsQueueEmpty+0x14>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	08 95       	ret

000008fa <prvIsQueueFull>:
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	0f 92       	push	r0
     900:	fc 01       	movw	r30, r24
     902:	22 8d       	ldd	r18, Z+26	; 0x1a
     904:	83 8d       	ldd	r24, Z+27	; 0x1b
     906:	28 13       	cpse	r18, r24
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0x11>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	08 95       	ret

00000916 <prvCopyDataToQueue>:
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
     920:	04 2f       	mov	r16, r20
     922:	1a 8d       	ldd	r17, Y+26	; 0x1a
     924:	4c 8d       	ldd	r20, Y+28	; 0x1c
     926:	41 11       	cpse	r20, r1
     928:	0c c0       	rjmp	.+24     	; 0x942 <prvCopyDataToQueue+0x2c>
     92a:	88 81       	ld	r24, Y
     92c:	99 81       	ldd	r25, Y+1	; 0x01
     92e:	89 2b       	or	r24, r25
     930:	09 f0       	breq	.+2      	; 0x934 <prvCopyDataToQueue+0x1e>
     932:	42 c0       	rjmp	.+132    	; 0x9b8 <prvCopyDataToQueue+0xa2>
     934:	8c 81       	ldd	r24, Y+4	; 0x04
     936:	9d 81       	ldd	r25, Y+5	; 0x05
     938:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <xTaskPriorityDisinherit>
     93c:	1d 82       	std	Y+5, r1	; 0x05
     93e:	1c 82       	std	Y+4, r1	; 0x04
     940:	42 c0       	rjmp	.+132    	; 0x9c6 <prvCopyDataToQueue+0xb0>
     942:	01 11       	cpse	r16, r1
     944:	17 c0       	rjmp	.+46     	; 0x974 <prvCopyDataToQueue+0x5e>
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	8a 81       	ldd	r24, Y+2	; 0x02
     94a:	9b 81       	ldd	r25, Y+3	; 0x03
     94c:	0e 94 08 10 	call	0x2010	; 0x2010 <memcpy>
     950:	2c 8d       	ldd	r18, Y+28	; 0x1c
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	82 0f       	add	r24, r18
     958:	91 1d       	adc	r25, r1
     95a:	9b 83       	std	Y+3, r25	; 0x03
     95c:	8a 83       	std	Y+2, r24	; 0x02
     95e:	2c 81       	ldd	r18, Y+4	; 0x04
     960:	3d 81       	ldd	r19, Y+5	; 0x05
     962:	82 17       	cp	r24, r18
     964:	93 07       	cpc	r25, r19
     966:	50 f1       	brcs	.+84     	; 0x9bc <prvCopyDataToQueue+0xa6>
     968:	88 81       	ld	r24, Y
     96a:	99 81       	ldd	r25, Y+1	; 0x01
     96c:	9b 83       	std	Y+3, r25	; 0x03
     96e:	8a 83       	std	Y+2, r24	; 0x02
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	29 c0       	rjmp	.+82     	; 0x9c6 <prvCopyDataToQueue+0xb0>
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	8e 81       	ldd	r24, Y+6	; 0x06
     978:	9f 81       	ldd	r25, Y+7	; 0x07
     97a:	0e 94 08 10 	call	0x2010	; 0x2010 <memcpy>
     97e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	91 95       	neg	r25
     984:	81 95       	neg	r24
     986:	91 09       	sbc	r25, r1
     988:	2e 81       	ldd	r18, Y+6	; 0x06
     98a:	3f 81       	ldd	r19, Y+7	; 0x07
     98c:	28 0f       	add	r18, r24
     98e:	39 1f       	adc	r19, r25
     990:	3f 83       	std	Y+7, r19	; 0x07
     992:	2e 83       	std	Y+6, r18	; 0x06
     994:	48 81       	ld	r20, Y
     996:	59 81       	ldd	r21, Y+1	; 0x01
     998:	24 17       	cp	r18, r20
     99a:	35 07       	cpc	r19, r21
     99c:	30 f4       	brcc	.+12     	; 0x9aa <prvCopyDataToQueue+0x94>
     99e:	2c 81       	ldd	r18, Y+4	; 0x04
     9a0:	3d 81       	ldd	r19, Y+5	; 0x05
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	9f 83       	std	Y+7, r25	; 0x07
     9a8:	8e 83       	std	Y+6, r24	; 0x06
     9aa:	02 30       	cpi	r16, 0x02	; 2
     9ac:	49 f4       	brne	.+18     	; 0x9c0 <prvCopyDataToQueue+0xaa>
     9ae:	11 23       	and	r17, r17
     9b0:	49 f0       	breq	.+18     	; 0x9c4 <prvCopyDataToQueue+0xae>
     9b2:	11 50       	subi	r17, 0x01	; 1
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <prvCopyDataToQueue+0xb0>
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <prvCopyDataToQueue+0xb0>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <prvCopyDataToQueue+0xb0>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <prvCopyDataToQueue+0xb0>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	1f 5f       	subi	r17, 0xFF	; 255
     9c8:	1a 8f       	std	Y+26, r17	; 0x1a
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	08 95       	ret

000009d4 <prvUnlockQueue>:
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	ec 01       	movw	r28, r24
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	0f 92       	push	r0
     9e2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9e4:	0b c0       	rjmp	.+22     	; 0x9fc <prvUnlockQueue+0x28>
     9e6:	89 89       	ldd	r24, Y+17	; 0x11
     9e8:	88 23       	and	r24, r24
     9ea:	51 f0       	breq	.+20     	; 0xa00 <prvUnlockQueue+0x2c>
     9ec:	ce 01       	movw	r24, r28
     9ee:	41 96       	adiw	r24, 0x11	; 17
     9f0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xTaskRemoveFromEventList>
     9f4:	81 11       	cpse	r24, r1
     9f6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <vTaskMissedYield>
     9fa:	11 50       	subi	r17, 0x01	; 1
     9fc:	11 16       	cp	r1, r17
     9fe:	9c f3       	brlt	.-26     	; 0x9e6 <prvUnlockQueue+0x12>
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	8e 8f       	std	Y+30, r24	; 0x1e
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	0f 92       	push	r0
     a0e:	1d 8d       	ldd	r17, Y+29	; 0x1d
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <prvUnlockQueue+0x54>
     a12:	88 85       	ldd	r24, Y+8	; 0x08
     a14:	88 23       	and	r24, r24
     a16:	51 f0       	breq	.+20     	; 0xa2c <prvUnlockQueue+0x58>
     a18:	ce 01       	movw	r24, r28
     a1a:	08 96       	adiw	r24, 0x08	; 8
     a1c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xTaskRemoveFromEventList>
     a20:	81 11       	cpse	r24, r1
     a22:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <vTaskMissedYield>
     a26:	11 50       	subi	r17, 0x01	; 1
     a28:	11 16       	cp	r1, r17
     a2a:	9c f3       	brlt	.-26     	; 0xa12 <prvUnlockQueue+0x3e>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	8d 8f       	std	Y+29, r24	; 0x1d
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	08 95       	ret

00000a3c <xQueueGenericReset>:
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	fc 01       	movw	r30, r24
     a46:	36 2f       	mov	r19, r22
     a48:	89 2b       	or	r24, r25
     a4a:	09 f4       	brne	.+2      	; 0xa4e <xQueueGenericReset+0x12>
     a4c:	4d c0       	rjmp	.+154    	; 0xae8 <xQueueGenericReset+0xac>
     a4e:	23 8d       	ldd	r18, Z+27	; 0x1b
     a50:	22 23       	and	r18, r18
     a52:	09 f4       	brne	.+2      	; 0xa56 <xQueueGenericReset+0x1a>
     a54:	4b c0       	rjmp	.+150    	; 0xaec <xQueueGenericReset+0xb0>
     a56:	02 2f       	mov	r16, r18
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	9f ef       	ldi	r25, 0xFF	; 255
     a5e:	b8 01       	movw	r22, r16
     a60:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
     a64:	44 8d       	ldd	r20, Z+28	; 0x1c
     a66:	84 2f       	mov	r24, r20
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	68 17       	cp	r22, r24
     a6c:	79 07       	cpc	r23, r25
     a6e:	08 f4       	brcc	.+2      	; 0xa72 <xQueueGenericReset+0x36>
     a70:	3f c0       	rjmp	.+126    	; 0xaf0 <xQueueGenericReset+0xb4>
     a72:	ef 01       	movw	r28, r30
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	0f 92       	push	r0
     a7a:	60 81       	ld	r22, Z
     a7c:	71 81       	ldd	r23, Z+1	; 0x01
     a7e:	fb 01       	movw	r30, r22
     a80:	24 9f       	mul	r18, r20
     a82:	e0 0d       	add	r30, r0
     a84:	f1 1d       	adc	r31, r1
     a86:	11 24       	eor	r1, r1
     a88:	fd 83       	std	Y+5, r31	; 0x05
     a8a:	ec 83       	std	Y+4, r30	; 0x04
     a8c:	1a 8e       	std	Y+26, r1	; 0x1a
     a8e:	7b 83       	std	Y+3, r23	; 0x03
     a90:	6a 83       	std	Y+2, r22	; 0x02
     a92:	01 50       	subi	r16, 0x01	; 1
     a94:	11 09       	sbc	r17, r1
     a96:	80 9f       	mul	r24, r16
     a98:	a0 01       	movw	r20, r0
     a9a:	81 9f       	mul	r24, r17
     a9c:	50 0d       	add	r21, r0
     a9e:	90 9f       	mul	r25, r16
     aa0:	50 0d       	add	r21, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	cb 01       	movw	r24, r22
     aa6:	84 0f       	add	r24, r20
     aa8:	95 1f       	adc	r25, r21
     aaa:	9f 83       	std	Y+7, r25	; 0x07
     aac:	8e 83       	std	Y+6, r24	; 0x06
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	8d 8f       	std	Y+29, r24	; 0x1d
     ab2:	8e 8f       	std	Y+30, r24	; 0x1e
     ab4:	31 11       	cpse	r19, r1
     ab6:	0c c0       	rjmp	.+24     	; 0xad0 <xQueueGenericReset+0x94>
     ab8:	88 85       	ldd	r24, Y+8	; 0x08
     aba:	88 23       	and	r24, r24
     abc:	89 f0       	breq	.+34     	; 0xae0 <xQueueGenericReset+0xa4>
     abe:	ce 01       	movw	r24, r28
     ac0:	08 96       	adiw	r24, 0x08	; 8
     ac2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xTaskRemoveFromEventList>
     ac6:	88 23       	and	r24, r24
     ac8:	59 f0       	breq	.+22     	; 0xae0 <xQueueGenericReset+0xa4>
     aca:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
     ace:	08 c0       	rjmp	.+16     	; 0xae0 <xQueueGenericReset+0xa4>
     ad0:	ce 01       	movw	r24, r28
     ad2:	08 96       	adiw	r24, 0x08	; 8
     ad4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     ad8:	ce 01       	movw	r24, r28
     ada:	41 96       	adiw	r24, 0x11	; 17
     adc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	05 c0       	rjmp	.+10     	; 0xaf2 <xQueueGenericReset+0xb6>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	03 c0       	rjmp	.+6      	; 0xaf2 <xQueueGenericReset+0xb6>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <xQueueGenericReset+0xb6>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <prvInitialiseNewQueue>:
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	f8 01       	movw	r30, r16
     b02:	61 11       	cpse	r22, r1
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <prvInitialiseNewQueue+0x10>
     b06:	11 83       	std	Z+1, r17	; 0x01
     b08:	00 83       	st	Z, r16
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <prvInitialiseNewQueue+0x14>
     b0c:	51 83       	std	Z+1, r21	; 0x01
     b0e:	40 83       	st	Z, r20
     b10:	83 8f       	std	Z+27, r24	; 0x1b
     b12:	64 8f       	std	Z+28, r22	; 0x1c
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	cf 01       	movw	r24, r30
     b18:	0e 94 1e 05 	call	0xa3c	; 0xa3c <xQueueGenericReset>
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	08 95       	ret

00000b22 <xQueueGenericCreate>:
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	38 2f       	mov	r19, r24
     b32:	e6 2f       	mov	r30, r22
     b34:	88 23       	and	r24, r24
     b36:	29 f1       	breq	.+74     	; 0xb82 <xQueueGenericCreate+0x60>
     b38:	68 2f       	mov	r22, r24
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
     b44:	8e 2f       	mov	r24, r30
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	68 17       	cp	r22, r24
     b4a:	79 07       	cpc	r23, r25
     b4c:	e8 f0       	brcs	.+58     	; 0xb88 <xQueueGenericCreate+0x66>
     b4e:	3e 9f       	mul	r19, r30
     b50:	c0 01       	movw	r24, r0
     b52:	11 24       	eor	r1, r1
     b54:	81 3e       	cpi	r24, 0xE1	; 225
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	92 07       	cpc	r25, r18
     b5a:	c8 f4       	brcc	.+50     	; 0xb8e <xQueueGenericCreate+0x6c>
     b5c:	d4 2e       	mov	r13, r20
     b5e:	de 2f       	mov	r29, r30
     b60:	c3 2f       	mov	r28, r19
     b62:	4f 96       	adiw	r24, 0x1f	; 31
     b64:	0e 94 2e 03 	call	0x65c	; 0x65c <pvPortMalloc>
     b68:	7c 01       	movw	r14, r24
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	91 f0       	breq	.+36     	; 0xb92 <xQueueGenericCreate+0x70>
     b6e:	8c 01       	movw	r16, r24
     b70:	2d 2d       	mov	r18, r13
     b72:	ac 01       	movw	r20, r24
     b74:	41 5e       	subi	r20, 0xE1	; 225
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	6d 2f       	mov	r22, r29
     b7a:	8c 2f       	mov	r24, r28
     b7c:	0e 94 7e 05 	call	0xafc	; 0xafc <prvInitialiseNewQueue>
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <xQueueGenericCreate+0x70>
     b82:	e1 2c       	mov	r14, r1
     b84:	f1 2c       	mov	r15, r1
     b86:	05 c0       	rjmp	.+10     	; 0xb92 <xQueueGenericCreate+0x70>
     b88:	e1 2c       	mov	r14, r1
     b8a:	f1 2c       	mov	r15, r1
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <xQueueGenericCreate+0x70>
     b8e:	e1 2c       	mov	r14, r1
     b90:	f1 2c       	mov	r15, r1
     b92:	c7 01       	movw	r24, r14
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	08 95       	ret

00000ba4 <xQueueGenericSend>:
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <xQueueGenericSend+0x12>
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <xQueueGenericSend+0x14>
     bb8:	1f 92       	push	r1
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	8c 01       	movw	r16, r24
     bc0:	7b 01       	movw	r14, r22
     bc2:	5d 83       	std	Y+5, r21	; 0x05
     bc4:	4c 83       	std	Y+4, r20	; 0x04
     bc6:	c2 2e       	mov	r12, r18
     bc8:	d1 2c       	mov	r13, r1
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	0f 92       	push	r0
     bd0:	f8 01       	movw	r30, r16
     bd2:	92 8d       	ldd	r25, Z+26	; 0x1a
     bd4:	83 8d       	ldd	r24, Z+27	; 0x1b
     bd6:	98 17       	cp	r25, r24
     bd8:	18 f0       	brcs	.+6      	; 0xbe0 <xQueueGenericSend+0x3c>
     bda:	f2 e0       	ldi	r31, 0x02	; 2
     bdc:	cf 12       	cpse	r12, r31
     bde:	19 c0       	rjmp	.+50     	; 0xc12 <xQueueGenericSend+0x6e>
     be0:	4c 2d       	mov	r20, r12
     be2:	b7 01       	movw	r22, r14
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 8b 04 	call	0x916	; 0x916 <prvCopyDataToQueue>
     bea:	f8 01       	movw	r30, r16
     bec:	91 89       	ldd	r25, Z+17	; 0x11
     bee:	99 23       	and	r25, r25
     bf0:	49 f0       	breq	.+18     	; 0xc04 <xQueueGenericSend+0x60>
     bf2:	c8 01       	movw	r24, r16
     bf4:	41 96       	adiw	r24, 0x11	; 17
     bf6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xTaskRemoveFromEventList>
     bfa:	88 23       	and	r24, r24
     bfc:	31 f0       	breq	.+12     	; 0xc0a <xQueueGenericSend+0x66>
     bfe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <xQueueGenericSend+0x66>
     c04:	81 11       	cpse	r24, r1
     c06:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	4d c0       	rjmp	.+154    	; 0xcac <xQueueGenericSend+0x108>
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	9d 81       	ldd	r25, Y+5	; 0x05
     c16:	89 2b       	or	r24, r25
     c18:	21 f4       	brne	.+8      	; 0xc22 <xQueueGenericSend+0x7e>
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	45 c0       	rjmp	.+138    	; 0xcac <xQueueGenericSend+0x108>
     c22:	d1 10       	cpse	r13, r1
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <xQueueGenericSend+0x8e>
     c26:	ce 01       	movw	r24, r28
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <vTaskInternalSetTimeOutState>
     c2e:	dd 24       	eor	r13, r13
     c30:	d3 94       	inc	r13
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0e 94 c0 09 	call	0x1380	; 0x1380 <vTaskSuspendAll>
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	0f 92       	push	r0
     c40:	f8 01       	movw	r30, r16
     c42:	85 8d       	ldd	r24, Z+29	; 0x1d
     c44:	8f 3f       	cpi	r24, 0xFF	; 255
     c46:	09 f4       	brne	.+2      	; 0xc4a <xQueueGenericSend+0xa6>
     c48:	15 8e       	std	Z+29, r1	; 0x1d
     c4a:	f8 01       	movw	r30, r16
     c4c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c4e:	8f 3f       	cpi	r24, 0xFF	; 255
     c50:	09 f4       	brne	.+2      	; 0xc54 <xQueueGenericSend+0xb0>
     c52:	16 8e       	std	Z+30, r1	; 0x1e
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	be 01       	movw	r22, r28
     c5a:	6c 5f       	subi	r22, 0xFC	; 252
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <xTaskCheckForTimeOut>
     c66:	81 11       	cpse	r24, r1
     c68:	1b c0       	rjmp	.+54     	; 0xca0 <xQueueGenericSend+0xfc>
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <prvIsQueueFull>
     c70:	88 23       	and	r24, r24
     c72:	81 f0       	breq	.+32     	; 0xc94 <xQueueGenericSend+0xf0>
     c74:	6c 81       	ldd	r22, Y+4	; 0x04
     c76:	7d 81       	ldd	r23, Y+5	; 0x05
     c78:	c8 01       	movw	r24, r16
     c7a:	08 96       	adiw	r24, 0x08	; 8
     c7c:	0e 94 09 0c 	call	0x1812	; 0x1812 <vTaskPlaceOnEventList>
     c80:	c8 01       	movw	r24, r16
     c82:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <prvUnlockQueue>
     c86:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
     c8a:	81 11       	cpse	r24, r1
     c8c:	9e cf       	rjmp	.-196    	; 0xbca <xQueueGenericSend+0x26>
     c8e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
     c92:	9b cf       	rjmp	.-202    	; 0xbca <xQueueGenericSend+0x26>
     c94:	c8 01       	movw	r24, r16
     c96:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <prvUnlockQueue>
     c9a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
     c9e:	95 cf       	rjmp	.-214    	; 0xbca <xQueueGenericSend+0x26>
     ca0:	c8 01       	movw	r24, r16
     ca2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <prvUnlockQueue>
     ca6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	08 95       	ret

00000cc8 <prvInitialiseMutex>:
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	69 f0       	breq	.+26     	; 0xce6 <prvInitialiseMutex+0x1e>
     ccc:	fc 01       	movw	r30, r24
     cce:	15 82       	std	Z+5, r1	; 0x05
     cd0:	14 82       	std	Z+4, r1	; 0x04
     cd2:	11 82       	std	Z+1, r1	; 0x01
     cd4:	10 82       	st	Z, r1
     cd6:	16 82       	std	Z+6, r1	; 0x06
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	0e 94 d2 05 	call	0xba4	; 0xba4 <xQueueGenericSend>
     ce6:	08 95       	ret

00000ce8 <xQueueCreateMutex>:
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	48 2f       	mov	r20, r24
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	0e 94 91 05 	call	0xb22	; 0xb22 <xQueueGenericCreate>
     cf6:	ec 01       	movw	r28, r24
     cf8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvInitialiseMutex>
     cfc:	ce 01       	movw	r24, r28
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	00 d0       	rcall	.+0      	; 0xd12 <xQueueSemaphoreTake+0xe>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <xQueueSemaphoreTake+0x10>
     d14:	1f 92       	push	r1
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	8c 01       	movw	r16, r24
     d1c:	7d 83       	std	Y+5, r23	; 0x05
     d1e:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     d20:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     d22:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     d2a:	f8 01       	movw	r30, r16
     d2c:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     d2e:	88 23       	and	r24, r24
     d30:	d1 f0       	breq	.+52     	; 0xd66 <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	89 2b       	or	r24, r25
     d3c:	29 f4       	brne	.+10     	; 0xd48 <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     d3e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <pvTaskIncrementMutexHeldCount>
     d42:	f8 01       	movw	r30, r16
     d44:	95 83       	std	Z+5, r25	; 0x05
     d46:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d48:	f8 01       	movw	r30, r16
     d4a:	80 85       	ldd	r24, Z+8	; 0x08
     d4c:	88 23       	and	r24, r24
     d4e:	39 f0       	breq	.+14     	; 0xd5e <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     d50:	c8 01       	movw	r24, r16
     d52:	08 96       	adiw	r24, 0x08	; 8
     d54:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xTaskRemoveFromEventList>
     d58:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     d5a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	74 c0       	rjmp	.+232    	; 0xe4e <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	89 2b       	or	r24, r25
     d6c:	21 f4       	brne	.+8      	; 0xd76 <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	6c c0       	rjmp	.+216    	; 0xe4e <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     d76:	f1 10       	cpse	r15, r1
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     d82:	ff 24       	eor	r15, r15
     d84:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     d8a:	0e 94 c0 09 	call	0x1380	; 0x1380 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	0f 92       	push	r0
     d94:	f8 01       	movw	r30, r16
     d96:	85 8d       	ldd	r24, Z+29	; 0x1d
     d98:	8f 3f       	cpi	r24, 0xFF	; 255
     d9a:	09 f4       	brne	.+2      	; 0xd9e <xQueueSemaphoreTake+0x9a>
     d9c:	15 8e       	std	Z+29, r1	; 0x1d
     d9e:	f8 01       	movw	r30, r16
     da0:	86 8d       	ldd	r24, Z+30	; 0x1e
     da2:	8f 3f       	cpi	r24, 0xFF	; 255
     da4:	09 f4       	brne	.+2      	; 0xda8 <xQueueSemaphoreTake+0xa4>
     da6:	16 8e       	std	Z+30, r1	; 0x1e
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     dac:	be 01       	movw	r22, r28
     dae:	6c 5f       	subi	r22, 0xFC	; 252
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <xTaskCheckForTimeOut>
     dba:	81 11       	cpse	r24, r1
     dbc:	2a c0       	rjmp	.+84     	; 0xe12 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     dbe:	c8 01       	movw	r24, r16
     dc0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <prvIsQueueEmpty>
     dc4:	88 23       	and	r24, r24
     dc6:	f9 f0       	breq	.+62     	; 0xe06 <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     dc8:	f8 01       	movw	r30, r16
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	89 2b       	or	r24, r25
     dd0:	51 f4       	brne	.+20     	; 0xde6 <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     dd8:	84 81       	ldd	r24, Z+4	; 0x04
     dda:	95 81       	ldd	r25, Z+5	; 0x05
     ddc:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <xTaskPriorityInherit>
     de0:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     de6:	6c 81       	ldd	r22, Y+4	; 0x04
     de8:	7d 81       	ldd	r23, Y+5	; 0x05
     dea:	c8 01       	movw	r24, r16
     dec:	41 96       	adiw	r24, 0x11	; 17
     dee:	0e 94 09 0c 	call	0x1812	; 0x1812 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     df2:	c8 01       	movw	r24, r16
     df4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     df8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
     dfc:	81 11       	cpse	r24, r1
     dfe:	92 cf       	rjmp	.-220    	; 0xd24 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     e00:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
     e04:	8f cf       	rjmp	.-226    	; 0xd24 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     e06:	c8 01       	movw	r24, r16
     e08:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     e0c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>
     e10:	89 cf       	rjmp	.-238    	; 0xd24 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     e12:	c8 01       	movw	r24, r16
     e14:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     e18:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     e1c:	c8 01       	movw	r24, r16
     e1e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <prvIsQueueEmpty>
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <xQueueSemaphoreTake+0x124>
     e26:	7e cf       	rjmp	.-260    	; 0xd24 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     e28:	ee 20       	and	r14, r14
     e2a:	81 f0       	breq	.+32     	; 0xe4c <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     e32:	c8 01       	movw	r24, r16
     e34:	0e 94 60 04 	call	0x8c0	; 0x8c0 <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     e38:	68 2f       	mov	r22, r24
     e3a:	f8 01       	movw	r30, r16
     e3c:	84 81       	ldd	r24, Z+4	; 0x04
     e3e:	95 81       	ldd	r25, Z+5	; 0x05
     e40:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <xQueueSemaphoreTake+0x14a>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	08 95       	ret

00000e66 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     e66:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxDelayedTaskList>
     e6a:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxDelayedTaskList+0x1>
     e6e:	80 81       	ld	r24, Z
     e70:	81 11       	cpse	r24, r1
     e72:	07 c0       	rjmp	.+14     	; 0xe82 <prvResetNextTaskUnblockTime+0x1c>
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <xNextTaskUnblockTime+0x1>
     e7c:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <xNextTaskUnblockTime>
     e80:	08 95       	ret
     e82:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxDelayedTaskList>
     e86:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxDelayedTaskList+0x1>
     e8a:	05 80       	ldd	r0, Z+5	; 0x05
     e8c:	f6 81       	ldd	r31, Z+6	; 0x06
     e8e:	e0 2d       	mov	r30, r0
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <xNextTaskUnblockTime+0x1>
     e98:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <xNextTaskUnblockTime>
     e9c:	08 95       	ret

00000e9e <prvDeleteTCB>:
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
     ea4:	8f 89       	ldd	r24, Y+23	; 0x17
     ea6:	98 8d       	ldd	r25, Y+24	; 0x18
     ea8:	0e 94 c3 03 	call	0x786	; 0x786 <vPortFree>
     eac:	ce 01       	movw	r24, r28
     eae:	0e 94 c3 03 	call	0x786	; 0x786 <vPortFree>
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <prvInitialiseNewTask>:
     eb8:	6f 92       	push	r6
     eba:	7f 92       	push	r7
     ebc:	8f 92       	push	r8
     ebe:	9f 92       	push	r9
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	4c 01       	movw	r8, r24
     ed8:	d5 01       	movw	r26, r10
     eda:	57 96       	adiw	r26, 0x17	; 23
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	58 97       	sbiw	r26, 0x18	; 24
     ee2:	21 50       	subi	r18, 0x01	; 1
     ee4:	31 09       	sbc	r19, r1
     ee6:	3c 01       	movw	r6, r24
     ee8:	62 0e       	add	r6, r18
     eea:	73 1e       	adc	r7, r19
     eec:	61 15       	cp	r22, r1
     eee:	71 05       	cpc	r23, r1
     ef0:	89 f4       	brne	.+34     	; 0xf14 <prvInitialiseNewTask+0x5c>
     ef2:	16 c0       	rjmp	.+44     	; 0xf20 <prvInitialiseNewTask+0x68>
     ef4:	82 2f       	mov	r24, r18
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fb 01       	movw	r30, r22
     efa:	e8 0f       	add	r30, r24
     efc:	f9 1f       	adc	r31, r25
     efe:	30 81       	ld	r19, Z
     f00:	d5 01       	movw	r26, r10
     f02:	a8 0f       	add	r26, r24
     f04:	b9 1f       	adc	r27, r25
     f06:	59 96       	adiw	r26, 0x19	; 25
     f08:	3c 93       	st	X, r19
     f0a:	80 81       	ld	r24, Z
     f0c:	88 23       	and	r24, r24
     f0e:	29 f0       	breq	.+10     	; 0xf1a <prvInitialiseNewTask+0x62>
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <prvInitialiseNewTask+0x5e>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	28 30       	cpi	r18, 0x08	; 8
     f18:	68 f3       	brcs	.-38     	; 0xef4 <prvInitialiseNewTask+0x3c>
     f1a:	f5 01       	movw	r30, r10
     f1c:	10 a2       	std	Z+32, r1	; 0x20
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <prvInitialiseNewTask+0x6e>
     f20:	d5 01       	movw	r26, r10
     f22:	59 96       	adiw	r26, 0x19	; 25
     f24:	1c 92       	st	X, r1
     f26:	b3 e0       	ldi	r27, 0x03	; 3
     f28:	be 15       	cp	r27, r14
     f2a:	20 f4       	brcc	.+8      	; 0xf34 <prvInitialiseNewTask+0x7c>
     f2c:	0f 2e       	mov	r0, r31
     f2e:	f3 e0       	ldi	r31, 0x03	; 3
     f30:	ef 2e       	mov	r14, r31
     f32:	f0 2d       	mov	r31, r0
     f34:	f5 01       	movw	r30, r10
     f36:	e6 8a       	std	Z+22, r14	; 0x16
     f38:	e1 a2       	std	Z+33, r14	; 0x21
     f3a:	12 a2       	std	Z+34, r1	; 0x22
     f3c:	c5 01       	movw	r24, r10
     f3e:	02 96       	adiw	r24, 0x02	; 2
     f40:	0e 94 04 04 	call	0x808	; 0x808 <vListInitialiseItem>
     f44:	c5 01       	movw	r24, r10
     f46:	0c 96       	adiw	r24, 0x0c	; 12
     f48:	0e 94 04 04 	call	0x808	; 0x808 <vListInitialiseItem>
     f4c:	d5 01       	movw	r26, r10
     f4e:	19 96       	adiw	r26, 0x09	; 9
     f50:	bc 92       	st	X, r11
     f52:	ae 92       	st	-X, r10
     f54:	18 97       	sbiw	r26, 0x08	; 8
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	8e 19       	sub	r24, r14
     f5c:	91 09       	sbc	r25, r1
     f5e:	1d 96       	adiw	r26, 0x0d	; 13
     f60:	9c 93       	st	X, r25
     f62:	8e 93       	st	-X, r24
     f64:	1c 97       	sbiw	r26, 0x0c	; 12
     f66:	53 96       	adiw	r26, 0x13	; 19
     f68:	bc 92       	st	X, r11
     f6a:	ae 92       	st	-X, r10
     f6c:	52 97       	sbiw	r26, 0x12	; 18
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	f5 01       	movw	r30, r10
     f72:	b3 96       	adiw	r30, 0x23	; 35
     f74:	df 01       	movw	r26, r30
     f76:	1d 92       	st	X+, r1
     f78:	8a 95       	dec	r24
     f7a:	e9 f7       	brne	.-6      	; 0xf76 <prvInitialiseNewTask+0xbe>
     f7c:	f5 01       	movw	r30, r10
     f7e:	17 a2       	std	Z+39, r1	; 0x27
     f80:	a8 01       	movw	r20, r16
     f82:	b4 01       	movw	r22, r8
     f84:	c3 01       	movw	r24, r6
     f86:	0e 94 3a 01 	call	0x274	; 0x274 <pxPortInitialiseStack>
     f8a:	d5 01       	movw	r26, r10
     f8c:	8d 93       	st	X+, r24
     f8e:	9c 93       	st	X, r25
     f90:	c1 14       	cp	r12, r1
     f92:	d1 04       	cpc	r13, r1
     f94:	19 f0       	breq	.+6      	; 0xf9c <prvInitialiseNewTask+0xe4>
     f96:	f6 01       	movw	r30, r12
     f98:	b1 82       	std	Z+1, r11	; 0x01
     f9a:	a0 82       	st	Z, r10
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	9f 90       	pop	r9
     fb0:	8f 90       	pop	r8
     fb2:	7f 90       	pop	r7
     fb4:	6f 90       	pop	r6
     fb6:	08 95       	ret

00000fb8 <prvInitialiseTaskLists>:
     fb8:	cf 93       	push	r28
     fba:	c0 e0       	ldi	r28, 0x00	; 0
     fbc:	10 c0       	rjmp	.+32     	; 0xfde <prvInitialiseTaskLists+0x26>
     fbe:	8c 2f       	mov	r24, r28
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9c 01       	movw	r18, r24
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	8c 5b       	subi	r24, 0xBC	; 188
     fd6:	98 4f       	sbci	r25, 0xF8	; 248
     fd8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     fdc:	cf 5f       	subi	r28, 0xFF	; 255
     fde:	c4 30       	cpi	r28, 0x04	; 4
     fe0:	70 f3       	brcs	.-36     	; 0xfbe <prvInitialiseTaskLists+0x6>
     fe2:	8b e3       	ldi	r24, 0x3B	; 59
     fe4:	97 e0       	ldi	r25, 0x07	; 7
     fe6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     fea:	82 e3       	ldi	r24, 0x32	; 50
     fec:	97 e0       	ldi	r25, 0x07	; 7
     fee:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     ff2:	85 e2       	ldi	r24, 0x25	; 37
     ff4:	97 e0       	ldi	r25, 0x07	; 7
     ff6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
     ffa:	8c e1       	ldi	r24, 0x1C	; 28
     ffc:	97 e0       	ldi	r25, 0x07	; 7
     ffe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
    1002:	82 e1       	ldi	r24, 0x12	; 18
    1004:	97 e0       	ldi	r25, 0x07	; 7
    1006:	0e 94 f6 03 	call	0x7ec	; 0x7ec <vListInitialise>
    100a:	8b e3       	ldi	r24, 0x3B	; 59
    100c:	97 e0       	ldi	r25, 0x07	; 7
    100e:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxDelayedTaskList+0x1>
    1012:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxDelayedTaskList>
    1016:	82 e3       	ldi	r24, 0x32	; 50
    1018:	97 e0       	ldi	r25, 0x07	; 7
    101a:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <pxOverflowDelayedTaskList+0x1>
    101e:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <pxOverflowDelayedTaskList>
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <prvAddNewTaskToReadyList>:
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
    1032:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
    103c:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxCurrentTCB>
    1040:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1044:	89 2b       	or	r24, r25
    1046:	59 f4       	brne	.+22     	; 0x105e <prvAddNewTaskToReadyList+0x38>
    1048:	d0 93 69 07 	sts	0x0769, r29	; 0x800769 <pxCurrentTCB+0x1>
    104c:	c0 93 68 07 	sts	0x0768, r28	; 0x800768 <pxCurrentTCB>
    1050:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	99 f4       	brne	.+38     	; 0x107e <prvAddNewTaskToReadyList+0x58>
    1058:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <prvInitialiseTaskLists>
    105c:	10 c0       	rjmp	.+32     	; 0x107e <prvAddNewTaskToReadyList+0x58>
    105e:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xSchedulerRunning>
    1062:	81 11       	cpse	r24, r1
    1064:	0c c0       	rjmp	.+24     	; 0x107e <prvAddNewTaskToReadyList+0x58>
    1066:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    106a:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    106e:	96 89       	ldd	r25, Z+22	; 0x16
    1070:	8e 89       	ldd	r24, Y+22	; 0x16
    1072:	89 17       	cp	r24, r25
    1074:	20 f0       	brcs	.+8      	; 0x107e <prvAddNewTaskToReadyList+0x58>
    1076:	d0 93 69 07 	sts	0x0769, r29	; 0x800769 <pxCurrentTCB+0x1>
    107a:	c0 93 68 07 	sts	0x0768, r28	; 0x800768 <pxCurrentTCB>
    107e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxTaskNumber>
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <uxTaskNumber>
    1088:	8e 89       	ldd	r24, Y+22	; 0x16
    108a:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    108e:	98 17       	cp	r25, r24
    1090:	10 f4       	brcc	.+4      	; 0x1096 <prvAddNewTaskToReadyList+0x70>
    1092:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	fc 01       	movw	r30, r24
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	8e 0f       	add	r24, r30
    10a8:	9f 1f       	adc	r25, r31
    10aa:	fc 01       	movw	r30, r24
    10ac:	ec 5b       	subi	r30, 0xBC	; 188
    10ae:	f8 4f       	sbci	r31, 0xF8	; 248
    10b0:	01 80       	ldd	r0, Z+1	; 0x01
    10b2:	f2 81       	ldd	r31, Z+2	; 0x02
    10b4:	e0 2d       	mov	r30, r0
    10b6:	fd 83       	std	Y+5, r31	; 0x05
    10b8:	ec 83       	std	Y+4, r30	; 0x04
    10ba:	84 81       	ldd	r24, Z+4	; 0x04
    10bc:	95 81       	ldd	r25, Z+5	; 0x05
    10be:	9f 83       	std	Y+7, r25	; 0x07
    10c0:	8e 83       	std	Y+6, r24	; 0x06
    10c2:	a4 81       	ldd	r26, Z+4	; 0x04
    10c4:	b5 81       	ldd	r27, Z+5	; 0x05
    10c6:	ce 01       	movw	r24, r28
    10c8:	02 96       	adiw	r24, 0x02	; 2
    10ca:	13 96       	adiw	r26, 0x03	; 3
    10cc:	9c 93       	st	X, r25
    10ce:	8e 93       	st	-X, r24
    10d0:	12 97       	sbiw	r26, 0x02	; 2
    10d2:	95 83       	std	Z+5, r25	; 0x05
    10d4:	84 83       	std	Z+4, r24	; 0x04
    10d6:	ee 89       	ldd	r30, Y+22	; 0x16
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	cf 01       	movw	r24, r30
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	e8 0f       	add	r30, r24
    10ea:	f9 1f       	adc	r31, r25
    10ec:	ec 5b       	subi	r30, 0xBC	; 188
    10ee:	f8 4f       	sbci	r31, 0xF8	; 248
    10f0:	fb 87       	std	Y+11, r31	; 0x0b
    10f2:	ea 87       	std	Y+10, r30	; 0x0a
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	80 83       	st	Z, r24
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xSchedulerRunning>
    1102:	88 23       	and	r24, r24
    1104:	51 f0       	breq	.+20     	; 0x111a <prvAddNewTaskToReadyList+0xf4>
    1106:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    110a:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    110e:	96 89       	ldd	r25, Z+22	; 0x16
    1110:	8e 89       	ldd	r24, Y+22	; 0x16
    1112:	98 17       	cp	r25, r24
    1114:	10 f4       	brcc	.+4      	; 0x111a <prvAddNewTaskToReadyList+0xf4>
    1116:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <prvCheckTasksWaitingTermination>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	1c c0       	rjmp	.+56     	; 0x115e <prvCheckTasksWaitingTermination+0x3e>
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	0f 92       	push	r0
    112c:	e0 91 21 07 	lds	r30, 0x0721	; 0x800721 <xTasksWaitingTermination+0x5>
    1130:	f0 91 22 07 	lds	r31, 0x0722	; 0x800722 <xTasksWaitingTermination+0x6>
    1134:	c6 81       	ldd	r28, Z+6	; 0x06
    1136:	d7 81       	ldd	r29, Z+7	; 0x07
    1138:	ce 01       	movw	r24, r28
    113a:	02 96       	adiw	r24, 0x02	; 2
    113c:	0e 94 39 04 	call	0x872	; 0x872 <uxListRemove>
    1140:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    1144:	81 50       	subi	r24, 0x01	; 1
    1146:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <uxCurrentNumberOfTasks>
    114a:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxDeletedTasksWaitingCleanUp>
    114e:	81 50       	subi	r24, 0x01	; 1
    1150:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxDeletedTasksWaitingCleanUp>
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	ce 01       	movw	r24, r28
    115a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <prvDeleteTCB>
    115e:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxDeletedTasksWaitingCleanUp>
    1162:	81 11       	cpse	r24, r1
    1164:	e0 cf       	rjmp	.-64     	; 0x1126 <prvCheckTasksWaitingTermination+0x6>
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <prvIdleTask>:
    116c:	0e 94 90 08 	call	0x1120	; 0x1120 <prvCheckTasksWaitingTermination>
    1170:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <pxReadyTasksLists>
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	d0 f3       	brcs	.-12     	; 0x116c <prvIdleTask>
    1178:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
    117c:	f7 cf       	rjmp	.-18     	; 0x116c <prvIdleTask>

0000117e <prvAddCurrentTaskToDelayedList>:
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ec 01       	movw	r28, r24
    118a:	f6 2e       	mov	r15, r22
    118c:	00 91 0f 07 	lds	r16, 0x070F	; 0x80070f <xTickCount>
    1190:	10 91 10 07 	lds	r17, 0x0710	; 0x800710 <xTickCount+0x1>
    1194:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxCurrentTCB>
    1198:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    119c:	02 96       	adiw	r24, 0x02	; 2
    119e:	0e 94 39 04 	call	0x872	; 0x872 <uxListRemove>
    11a2:	cf 3f       	cpi	r28, 0xFF	; 255
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	d8 07       	cpc	r29, r24
    11a8:	b1 f5       	brne	.+108    	; 0x1216 <prvAddCurrentTaskToDelayedList+0x98>
    11aa:	ff 20       	and	r15, r15
    11ac:	a1 f1       	breq	.+104    	; 0x1216 <prvAddCurrentTaskToDelayedList+0x98>
    11ae:	e2 e1       	ldi	r30, 0x12	; 18
    11b0:	f7 e0       	ldi	r31, 0x07	; 7
    11b2:	a1 81       	ldd	r26, Z+1	; 0x01
    11b4:	b2 81       	ldd	r27, Z+2	; 0x02
    11b6:	c0 91 68 07 	lds	r28, 0x0768	; 0x800768 <pxCurrentTCB>
    11ba:	d0 91 69 07 	lds	r29, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    11be:	bd 83       	std	Y+5, r27	; 0x05
    11c0:	ac 83       	std	Y+4, r26	; 0x04
    11c2:	c0 91 68 07 	lds	r28, 0x0768	; 0x800768 <pxCurrentTCB>
    11c6:	d0 91 69 07 	lds	r29, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    11ca:	14 96       	adiw	r26, 0x04	; 4
    11cc:	8d 91       	ld	r24, X+
    11ce:	9c 91       	ld	r25, X
    11d0:	15 97       	sbiw	r26, 0x05	; 5
    11d2:	9f 83       	std	Y+7, r25	; 0x07
    11d4:	8e 83       	std	Y+6, r24	; 0x06
    11d6:	14 96       	adiw	r26, 0x04	; 4
    11d8:	cd 91       	ld	r28, X+
    11da:	dc 91       	ld	r29, X
    11dc:	15 97       	sbiw	r26, 0x05	; 5
    11de:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxCurrentTCB>
    11e2:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    11e6:	02 96       	adiw	r24, 0x02	; 2
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxCurrentTCB>
    11f0:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    11f4:	02 96       	adiw	r24, 0x02	; 2
    11f6:	15 96       	adiw	r26, 0x05	; 5
    11f8:	9c 93       	st	X, r25
    11fa:	8e 93       	st	-X, r24
    11fc:	14 97       	sbiw	r26, 0x04	; 4
    11fe:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
    1202:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1206:	1b 96       	adiw	r26, 0x0b	; 11
    1208:	fc 93       	st	X, r31
    120a:	ee 93       	st	-X, r30
    120c:	1a 97       	sbiw	r26, 0x0a	; 10
    120e:	80 81       	ld	r24, Z
    1210:	8f 5f       	subi	r24, 0xFF	; 255
    1212:	80 83       	st	Z, r24
    1214:	2f c0       	rjmp	.+94     	; 0x1274 <prvAddCurrentTaskToDelayedList+0xf6>
    1216:	c0 0f       	add	r28, r16
    1218:	d1 1f       	adc	r29, r17
    121a:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    121e:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1222:	d3 83       	std	Z+3, r29	; 0x03
    1224:	c2 83       	std	Z+2, r28	; 0x02
    1226:	c0 17       	cp	r28, r16
    1228:	d1 07       	cpc	r29, r17
    122a:	68 f4       	brcc	.+26     	; 0x1246 <prvAddCurrentTaskToDelayedList+0xc8>
    122c:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <pxCurrentTCB>
    1230:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1234:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <pxOverflowDelayedTaskList>
    1238:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <pxOverflowDelayedTaskList+0x1>
    123c:	6e 5f       	subi	r22, 0xFE	; 254
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	0e 94 08 04 	call	0x810	; 0x810 <vListInsert>
    1244:	17 c0       	rjmp	.+46     	; 0x1274 <prvAddCurrentTaskToDelayedList+0xf6>
    1246:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <pxCurrentTCB>
    124a:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    124e:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxDelayedTaskList>
    1252:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxDelayedTaskList+0x1>
    1256:	6e 5f       	subi	r22, 0xFE	; 254
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 08 04 	call	0x810	; 0x810 <vListInsert>
    125e:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <xNextTaskUnblockTime>
    1262:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <xNextTaskUnblockTime+0x1>
    1266:	c8 17       	cp	r28, r24
    1268:	d9 07       	cpc	r29, r25
    126a:	20 f4       	brcc	.+8      	; 0x1274 <prvAddCurrentTaskToDelayedList+0xf6>
    126c:	d0 93 07 07 	sts	0x0707, r29	; 0x800707 <xNextTaskUnblockTime+0x1>
    1270:	c0 93 06 07 	sts	0x0706, r28	; 0x800706 <xNextTaskUnblockTime>
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	08 95       	ret

00001280 <xTaskCreate>:
    1280:	2f 92       	push	r2
    1282:	3f 92       	push	r3
    1284:	4f 92       	push	r4
    1286:	5f 92       	push	r5
    1288:	6f 92       	push	r6
    128a:	7f 92       	push	r7
    128c:	8f 92       	push	r8
    128e:	9f 92       	push	r9
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	3c 01       	movw	r6, r24
    12a6:	1b 01       	movw	r2, r22
    12a8:	5a 01       	movw	r10, r20
    12aa:	29 01       	movw	r4, r18
    12ac:	ca 01       	movw	r24, r20
    12ae:	0e 94 2e 03 	call	0x65c	; 0x65c <pvPortMalloc>
    12b2:	6c 01       	movw	r12, r24
    12b4:	89 2b       	or	r24, r25
    12b6:	71 f0       	breq	.+28     	; 0x12d4 <xTaskCreate+0x54>
    12b8:	88 e2       	ldi	r24, 0x28	; 40
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 2e 03 	call	0x65c	; 0x65c <pvPortMalloc>
    12c0:	ec 01       	movw	r28, r24
    12c2:	89 2b       	or	r24, r25
    12c4:	19 f0       	breq	.+6      	; 0x12cc <xTaskCreate+0x4c>
    12c6:	d8 8e       	std	Y+24, r13	; 0x18
    12c8:	cf 8a       	std	Y+23, r12	; 0x17
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <xTaskCreate+0x58>
    12cc:	c6 01       	movw	r24, r12
    12ce:	0e 94 c3 03 	call	0x786	; 0x786 <vPortFree>
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <xTaskCreate+0x58>
    12d4:	c0 e0       	ldi	r28, 0x00	; 0
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	20 97       	sbiw	r28, 0x00	; 0
    12da:	91 f0       	breq	.+36     	; 0x1300 <xTaskCreate+0x80>
    12dc:	95 01       	movw	r18, r10
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	81 2c       	mov	r8, r1
    12e4:	91 2c       	mov	r9, r1
    12e6:	5e 01       	movw	r10, r28
    12e8:	67 01       	movw	r12, r14
    12ea:	e0 2e       	mov	r14, r16
    12ec:	82 01       	movw	r16, r4
    12ee:	b1 01       	movw	r22, r2
    12f0:	c3 01       	movw	r24, r6
    12f2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <prvInitialiseNewTask>
    12f6:	ce 01       	movw	r24, r28
    12f8:	0e 94 13 08 	call	0x1026	; 0x1026 <prvAddNewTaskToReadyList>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <xTaskCreate+0x82>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	9f 90       	pop	r9
    1318:	8f 90       	pop	r8
    131a:	7f 90       	pop	r7
    131c:	6f 90       	pop	r6
    131e:	5f 90       	pop	r5
    1320:	4f 90       	pop	r4
    1322:	3f 90       	pop	r3
    1324:	2f 90       	pop	r2
    1326:	08 95       	ret

00001328 <vTaskStartScheduler>:
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	0f 2e       	mov	r0, r31
    1330:	f4 e0       	ldi	r31, 0x04	; 4
    1332:	ef 2e       	mov	r14, r31
    1334:	f7 e0       	ldi	r31, 0x07	; 7
    1336:	ff 2e       	mov	r15, r31
    1338:	f0 2d       	mov	r31, r0
    133a:	00 e0       	ldi	r16, 0x00	; 0
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	45 e5       	ldi	r20, 0x55	; 85
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	63 e0       	ldi	r22, 0x03	; 3
    1346:	71 e0       	ldi	r23, 0x01	; 1
    1348:	86 eb       	ldi	r24, 0xB6	; 182
    134a:	98 e0       	ldi	r25, 0x08	; 8
    134c:	0e 94 40 09 	call	0x1280	; 0x1280 <xTaskCreate>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	81 f4       	brne	.+32     	; 0x1374 <vTaskStartScheduler+0x4c>
    1354:	f8 94       	cli
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <xNextTaskUnblockTime+0x1>
    135e:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <xNextTaskUnblockTime>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xSchedulerRunning>
    1368:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <xTickCount+0x1>
    136c:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <xTickCount>
    1370:	0e 94 a6 01 	call	0x34c	; 0x34c <xPortStartScheduler>
    1374:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	08 95       	ret

00001380 <vTaskSuspendAll>:
    1380:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxSchedulerSuspended>
    138a:	08 95       	ret

0000138c <xTaskIncrementTick>:
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
    1398:	81 11       	cpse	r24, r1
    139a:	01 c1       	rjmp	.+514    	; 0x159e <xTaskIncrementTick+0x212>
    139c:	c0 91 0f 07 	lds	r28, 0x070F	; 0x80070f <xTickCount>
    13a0:	d0 91 10 07 	lds	r29, 0x0710	; 0x800710 <xTickCount+0x1>
    13a4:	8e 01       	movw	r16, r28
    13a6:	0f 5f       	subi	r16, 0xFF	; 255
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	10 93 10 07 	sts	0x0710, r17	; 0x800710 <xTickCount+0x1>
    13ae:	00 93 0f 07 	sts	0x070F, r16	; 0x80070f <xTickCount>
    13b2:	01 15       	cp	r16, r1
    13b4:	11 05       	cpc	r17, r1
    13b6:	b9 f4       	brne	.+46     	; 0x13e6 <xTaskIncrementTick+0x5a>
    13b8:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxDelayedTaskList>
    13bc:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxDelayedTaskList+0x1>
    13c0:	20 91 2e 07 	lds	r18, 0x072E	; 0x80072e <pxOverflowDelayedTaskList>
    13c4:	30 91 2f 07 	lds	r19, 0x072F	; 0x80072f <pxOverflowDelayedTaskList+0x1>
    13c8:	30 93 31 07 	sts	0x0731, r19	; 0x800731 <pxDelayedTaskList+0x1>
    13cc:	20 93 30 07 	sts	0x0730, r18	; 0x800730 <pxDelayedTaskList>
    13d0:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <pxOverflowDelayedTaskList+0x1>
    13d4:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <pxOverflowDelayedTaskList>
    13d8:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xNumOfOverflows>
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <xNumOfOverflows>
    13e2:	0e 94 33 07 	call	0xe66	; 0xe66 <prvResetNextTaskUnblockTime>
    13e6:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <xNextTaskUnblockTime>
    13ea:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <xNextTaskUnblockTime+0x1>
    13ee:	08 17       	cp	r16, r24
    13f0:	19 07       	cpc	r17, r25
    13f2:	20 f4       	brcc	.+8      	; 0x13fc <xTaskIncrementTick+0x70>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	b8 c0       	rjmp	.+368    	; 0x1568 <xTaskIncrementTick+0x1dc>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <xTaskIncrementTick+0x72>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxDelayedTaskList>
    1402:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxDelayedTaskList+0x1>
    1406:	90 81       	ld	r25, Z
    1408:	91 11       	cpse	r25, r1
    140a:	07 c0       	rjmp	.+14     	; 0x141a <xTaskIncrementTick+0x8e>
    140c:	2f ef       	ldi	r18, 0xFF	; 255
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	30 93 07 07 	sts	0x0707, r19	; 0x800707 <xNextTaskUnblockTime+0x1>
    1414:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <xNextTaskUnblockTime>
    1418:	a7 c0       	rjmp	.+334    	; 0x1568 <xTaskIncrementTick+0x1dc>
    141a:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <pxDelayedTaskList>
    141e:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <pxDelayedTaskList+0x1>
    1422:	05 80       	ldd	r0, Z+5	; 0x05
    1424:	f6 81       	ldd	r31, Z+6	; 0x06
    1426:	e0 2d       	mov	r30, r0
    1428:	06 80       	ldd	r0, Z+6	; 0x06
    142a:	f7 81       	ldd	r31, Z+7	; 0x07
    142c:	e0 2d       	mov	r30, r0
    142e:	22 81       	ldd	r18, Z+2	; 0x02
    1430:	33 81       	ldd	r19, Z+3	; 0x03
    1432:	02 17       	cp	r16, r18
    1434:	13 07       	cpc	r17, r19
    1436:	28 f4       	brcc	.+10     	; 0x1442 <xTaskIncrementTick+0xb6>
    1438:	30 93 07 07 	sts	0x0707, r19	; 0x800707 <xNextTaskUnblockTime+0x1>
    143c:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <xNextTaskUnblockTime>
    1440:	93 c0       	rjmp	.+294    	; 0x1568 <xTaskIncrementTick+0x1dc>
    1442:	a2 85       	ldd	r26, Z+10	; 0x0a
    1444:	b3 85       	ldd	r27, Z+11	; 0x0b
    1446:	24 81       	ldd	r18, Z+4	; 0x04
    1448:	35 81       	ldd	r19, Z+5	; 0x05
    144a:	46 81       	ldd	r20, Z+6	; 0x06
    144c:	57 81       	ldd	r21, Z+7	; 0x07
    144e:	e9 01       	movw	r28, r18
    1450:	5d 83       	std	Y+5, r21	; 0x05
    1452:	4c 83       	std	Y+4, r20	; 0x04
    1454:	26 81       	ldd	r18, Z+6	; 0x06
    1456:	37 81       	ldd	r19, Z+7	; 0x07
    1458:	44 81       	ldd	r20, Z+4	; 0x04
    145a:	55 81       	ldd	r21, Z+5	; 0x05
    145c:	e9 01       	movw	r28, r18
    145e:	5b 83       	std	Y+3, r21	; 0x03
    1460:	4a 83       	std	Y+2, r20	; 0x02
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	2d 91       	ld	r18, X+
    1466:	3c 91       	ld	r19, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	af 01       	movw	r20, r30
    146c:	4e 5f       	subi	r20, 0xFE	; 254
    146e:	5f 4f       	sbci	r21, 0xFF	; 255
    1470:	24 17       	cp	r18, r20
    1472:	35 07       	cpc	r19, r21
    1474:	31 f4       	brne	.+12     	; 0x1482 <xTaskIncrementTick+0xf6>
    1476:	26 81       	ldd	r18, Z+6	; 0x06
    1478:	37 81       	ldd	r19, Z+7	; 0x07
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	3c 93       	st	X, r19
    147e:	2e 93       	st	-X, r18
    1480:	11 97       	sbiw	r26, 0x01	; 1
    1482:	13 86       	std	Z+11, r1	; 0x0b
    1484:	12 86       	std	Z+10, r1	; 0x0a
    1486:	9c 91       	ld	r25, X
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	9c 93       	st	X, r25
    148c:	a4 89       	ldd	r26, Z+20	; 0x14
    148e:	b5 89       	ldd	r27, Z+21	; 0x15
    1490:	10 97       	sbiw	r26, 0x00	; 0
    1492:	19 f1       	breq	.+70     	; 0x14da <xTaskIncrementTick+0x14e>
    1494:	26 85       	ldd	r18, Z+14	; 0x0e
    1496:	37 85       	ldd	r19, Z+15	; 0x0f
    1498:	60 89       	ldd	r22, Z+16	; 0x10
    149a:	71 89       	ldd	r23, Z+17	; 0x11
    149c:	e9 01       	movw	r28, r18
    149e:	7d 83       	std	Y+5, r23	; 0x05
    14a0:	6c 83       	std	Y+4, r22	; 0x04
    14a2:	20 89       	ldd	r18, Z+16	; 0x10
    14a4:	31 89       	ldd	r19, Z+17	; 0x11
    14a6:	66 85       	ldd	r22, Z+14	; 0x0e
    14a8:	77 85       	ldd	r23, Z+15	; 0x0f
    14aa:	e9 01       	movw	r28, r18
    14ac:	7b 83       	std	Y+3, r23	; 0x03
    14ae:	6a 83       	std	Y+2, r22	; 0x02
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	6d 91       	ld	r22, X+
    14b4:	7c 91       	ld	r23, X
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	9f 01       	movw	r18, r30
    14ba:	24 5f       	subi	r18, 0xF4	; 244
    14bc:	3f 4f       	sbci	r19, 0xFF	; 255
    14be:	62 17       	cp	r22, r18
    14c0:	73 07       	cpc	r23, r19
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <xTaskIncrementTick+0x144>
    14c4:	20 89       	ldd	r18, Z+16	; 0x10
    14c6:	31 89       	ldd	r19, Z+17	; 0x11
    14c8:	12 96       	adiw	r26, 0x02	; 2
    14ca:	3c 93       	st	X, r19
    14cc:	2e 93       	st	-X, r18
    14ce:	11 97       	sbiw	r26, 0x01	; 1
    14d0:	15 8a       	std	Z+21, r1	; 0x15
    14d2:	14 8a       	std	Z+20, r1	; 0x14
    14d4:	9c 91       	ld	r25, X
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	9c 93       	st	X, r25
    14da:	26 89       	ldd	r18, Z+22	; 0x16
    14dc:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    14e0:	92 17       	cp	r25, r18
    14e2:	10 f4       	brcc	.+4      	; 0x14e8 <xTaskIncrementTick+0x15c>
    14e4:	20 93 0e 07 	sts	0x070E, r18	; 0x80070e <uxTopReadyPriority>
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	d9 01       	movw	r26, r18
    14ec:	aa 0f       	add	r26, r26
    14ee:	bb 1f       	adc	r27, r27
    14f0:	aa 0f       	add	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	aa 0f       	add	r26, r26
    14f6:	bb 1f       	adc	r27, r27
    14f8:	2a 0f       	add	r18, r26
    14fa:	3b 1f       	adc	r19, r27
    14fc:	d9 01       	movw	r26, r18
    14fe:	ac 5b       	subi	r26, 0xBC	; 188
    1500:	b8 4f       	sbci	r27, 0xF8	; 248
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	0d 90       	ld	r0, X+
    1506:	bc 91       	ld	r27, X
    1508:	a0 2d       	mov	r26, r0
    150a:	b5 83       	std	Z+5, r27	; 0x05
    150c:	a4 83       	std	Z+4, r26	; 0x04
    150e:	14 96       	adiw	r26, 0x04	; 4
    1510:	2d 91       	ld	r18, X+
    1512:	3c 91       	ld	r19, X
    1514:	15 97       	sbiw	r26, 0x05	; 5
    1516:	37 83       	std	Z+7, r19	; 0x07
    1518:	26 83       	std	Z+6, r18	; 0x06
    151a:	14 96       	adiw	r26, 0x04	; 4
    151c:	2d 91       	ld	r18, X+
    151e:	3c 91       	ld	r19, X
    1520:	15 97       	sbiw	r26, 0x05	; 5
    1522:	e9 01       	movw	r28, r18
    1524:	5b 83       	std	Y+3, r21	; 0x03
    1526:	4a 83       	std	Y+2, r20	; 0x02
    1528:	15 96       	adiw	r26, 0x05	; 5
    152a:	5c 93       	st	X, r21
    152c:	4e 93       	st	-X, r20
    152e:	14 97       	sbiw	r26, 0x04	; 4
    1530:	a6 89       	ldd	r26, Z+22	; 0x16
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	9d 01       	movw	r18, r26
    1536:	22 0f       	add	r18, r18
    1538:	33 1f       	adc	r19, r19
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	22 0f       	add	r18, r18
    1540:	33 1f       	adc	r19, r19
    1542:	a2 0f       	add	r26, r18
    1544:	b3 1f       	adc	r27, r19
    1546:	ac 5b       	subi	r26, 0xBC	; 188
    1548:	b8 4f       	sbci	r27, 0xF8	; 248
    154a:	b3 87       	std	Z+11, r27	; 0x0b
    154c:	a2 87       	std	Z+10, r26	; 0x0a
    154e:	9c 91       	ld	r25, X
    1550:	9f 5f       	subi	r25, 0xFF	; 255
    1552:	9c 93       	st	X, r25
    1554:	26 89       	ldd	r18, Z+22	; 0x16
    1556:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    155a:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    155e:	96 89       	ldd	r25, Z+22	; 0x16
    1560:	29 17       	cp	r18, r25
    1562:	08 f0       	brcs	.+2      	; 0x1566 <xTaskIncrementTick+0x1da>
    1564:	49 cf       	rjmp	.-366    	; 0x13f8 <xTaskIncrementTick+0x6c>
    1566:	4b cf       	rjmp	.-362    	; 0x13fe <xTaskIncrementTick+0x72>
    1568:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    156c:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1570:	26 89       	ldd	r18, Z+22	; 0x16
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	f9 01       	movw	r30, r18
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	2e 0f       	add	r18, r30
    1584:	3f 1f       	adc	r19, r31
    1586:	f9 01       	movw	r30, r18
    1588:	ec 5b       	subi	r30, 0xBC	; 188
    158a:	f8 4f       	sbci	r31, 0xF8	; 248
    158c:	90 81       	ld	r25, Z
    158e:	92 30       	cpi	r25, 0x02	; 2
    1590:	08 f0       	brcs	.+2      	; 0x1594 <xTaskIncrementTick+0x208>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <xYieldPending>
    1598:	91 11       	cpse	r25, r1
    159a:	0c c0       	rjmp	.+24     	; 0x15b4 <xTaskIncrementTick+0x228>
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <xTaskIncrementTick+0x22a>
    159e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xPendedTicks>
    15a2:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xPendedTicks+0x1>
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <xPendedTicks+0x1>
    15ac:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xPendedTicks>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <xTaskIncrementTick+0x22a>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <xTaskResumeAll>:
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	0f 92       	push	r0
    15ca:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
    15ce:	81 50       	subi	r24, 0x01	; 1
    15d0:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxSchedulerSuspended>
    15d4:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
    15d8:	81 11       	cpse	r24, r1
    15da:	bf c0       	rjmp	.+382    	; 0x175a <xTaskResumeAll+0x19a>
    15dc:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <uxCurrentNumberOfTasks>
    15e0:	81 11       	cpse	r24, r1
    15e2:	96 c0       	rjmp	.+300    	; 0x1710 <xTaskResumeAll+0x150>
    15e4:	bd c0       	rjmp	.+378    	; 0x1760 <xTaskResumeAll+0x1a0>
    15e6:	e0 91 2a 07 	lds	r30, 0x072A	; 0x80072a <xPendingReadyList+0x5>
    15ea:	f0 91 2b 07 	lds	r31, 0x072B	; 0x80072b <xPendingReadyList+0x6>
    15ee:	06 80       	ldd	r0, Z+6	; 0x06
    15f0:	f7 81       	ldd	r31, Z+7	; 0x07
    15f2:	e0 2d       	mov	r30, r0
    15f4:	a4 89       	ldd	r26, Z+20	; 0x14
    15f6:	b5 89       	ldd	r27, Z+21	; 0x15
    15f8:	c6 85       	ldd	r28, Z+14	; 0x0e
    15fa:	d7 85       	ldd	r29, Z+15	; 0x0f
    15fc:	80 89       	ldd	r24, Z+16	; 0x10
    15fe:	91 89       	ldd	r25, Z+17	; 0x11
    1600:	9d 83       	std	Y+5, r25	; 0x05
    1602:	8c 83       	std	Y+4, r24	; 0x04
    1604:	c0 89       	ldd	r28, Z+16	; 0x10
    1606:	d1 89       	ldd	r29, Z+17	; 0x11
    1608:	86 85       	ldd	r24, Z+14	; 0x0e
    160a:	97 85       	ldd	r25, Z+15	; 0x0f
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02
    1610:	11 96       	adiw	r26, 0x01	; 1
    1612:	2d 91       	ld	r18, X+
    1614:	3c 91       	ld	r19, X
    1616:	12 97       	sbiw	r26, 0x02	; 2
    1618:	cf 01       	movw	r24, r30
    161a:	0c 96       	adiw	r24, 0x0c	; 12
    161c:	28 17       	cp	r18, r24
    161e:	39 07       	cpc	r19, r25
    1620:	31 f4       	brne	.+12     	; 0x162e <xTaskResumeAll+0x6e>
    1622:	80 89       	ldd	r24, Z+16	; 0x10
    1624:	91 89       	ldd	r25, Z+17	; 0x11
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	15 8a       	std	Z+21, r1	; 0x15
    1630:	14 8a       	std	Z+20, r1	; 0x14
    1632:	8c 91       	ld	r24, X
    1634:	81 50       	subi	r24, 0x01	; 1
    1636:	8c 93       	st	X, r24
    1638:	a2 85       	ldd	r26, Z+10	; 0x0a
    163a:	b3 85       	ldd	r27, Z+11	; 0x0b
    163c:	c4 81       	ldd	r28, Z+4	; 0x04
    163e:	d5 81       	ldd	r29, Z+5	; 0x05
    1640:	86 81       	ldd	r24, Z+6	; 0x06
    1642:	97 81       	ldd	r25, Z+7	; 0x07
    1644:	9d 83       	std	Y+5, r25	; 0x05
    1646:	8c 83       	std	Y+4, r24	; 0x04
    1648:	c6 81       	ldd	r28, Z+6	; 0x06
    164a:	d7 81       	ldd	r29, Z+7	; 0x07
    164c:	84 81       	ldd	r24, Z+4	; 0x04
    164e:	95 81       	ldd	r25, Z+5	; 0x05
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	11 96       	adiw	r26, 0x01	; 1
    1656:	8d 91       	ld	r24, X+
    1658:	9c 91       	ld	r25, X
    165a:	12 97       	sbiw	r26, 0x02	; 2
    165c:	9f 01       	movw	r18, r30
    165e:	2e 5f       	subi	r18, 0xFE	; 254
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	82 17       	cp	r24, r18
    1664:	93 07       	cpc	r25, r19
    1666:	31 f4       	brne	.+12     	; 0x1674 <xTaskResumeAll+0xb4>
    1668:	86 81       	ldd	r24, Z+6	; 0x06
    166a:	97 81       	ldd	r25, Z+7	; 0x07
    166c:	12 96       	adiw	r26, 0x02	; 2
    166e:	9c 93       	st	X, r25
    1670:	8e 93       	st	-X, r24
    1672:	11 97       	sbiw	r26, 0x01	; 1
    1674:	13 86       	std	Z+11, r1	; 0x0b
    1676:	12 86       	std	Z+10, r1	; 0x0a
    1678:	8c 91       	ld	r24, X
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	8c 93       	st	X, r24
    167e:	86 89       	ldd	r24, Z+22	; 0x16
    1680:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    1684:	98 17       	cp	r25, r24
    1686:	10 f4       	brcc	.+4      	; 0x168c <xTaskResumeAll+0xcc>
    1688:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	dc 01       	movw	r26, r24
    1690:	aa 0f       	add	r26, r26
    1692:	bb 1f       	adc	r27, r27
    1694:	aa 0f       	add	r26, r26
    1696:	bb 1f       	adc	r27, r27
    1698:	aa 0f       	add	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	8a 0f       	add	r24, r26
    169e:	9b 1f       	adc	r25, r27
    16a0:	dc 01       	movw	r26, r24
    16a2:	ac 5b       	subi	r26, 0xBC	; 188
    16a4:	b8 4f       	sbci	r27, 0xF8	; 248
    16a6:	11 96       	adiw	r26, 0x01	; 1
    16a8:	0d 90       	ld	r0, X+
    16aa:	bc 91       	ld	r27, X
    16ac:	a0 2d       	mov	r26, r0
    16ae:	b5 83       	std	Z+5, r27	; 0x05
    16b0:	a4 83       	std	Z+4, r26	; 0x04
    16b2:	14 96       	adiw	r26, 0x04	; 4
    16b4:	8d 91       	ld	r24, X+
    16b6:	9c 91       	ld	r25, X
    16b8:	15 97       	sbiw	r26, 0x05	; 5
    16ba:	97 83       	std	Z+7, r25	; 0x07
    16bc:	86 83       	std	Z+6, r24	; 0x06
    16be:	14 96       	adiw	r26, 0x04	; 4
    16c0:	cd 91       	ld	r28, X+
    16c2:	dc 91       	ld	r29, X
    16c4:	15 97       	sbiw	r26, 0x05	; 5
    16c6:	3b 83       	std	Y+3, r19	; 0x03
    16c8:	2a 83       	std	Y+2, r18	; 0x02
    16ca:	15 96       	adiw	r26, 0x05	; 5
    16cc:	3c 93       	st	X, r19
    16ce:	2e 93       	st	-X, r18
    16d0:	14 97       	sbiw	r26, 0x04	; 4
    16d2:	a6 89       	ldd	r26, Z+22	; 0x16
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	cd 01       	movw	r24, r26
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	a8 0f       	add	r26, r24
    16e6:	b9 1f       	adc	r27, r25
    16e8:	ac 5b       	subi	r26, 0xBC	; 188
    16ea:	b8 4f       	sbci	r27, 0xF8	; 248
    16ec:	b3 87       	std	Z+11, r27	; 0x0b
    16ee:	a2 87       	std	Z+10, r26	; 0x0a
    16f0:	8c 91       	ld	r24, X
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	8c 93       	st	X, r24
    16f6:	96 89       	ldd	r25, Z+22	; 0x16
    16f8:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
    16fc:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1700:	56 96       	adiw	r26, 0x16	; 22
    1702:	8c 91       	ld	r24, X
    1704:	98 17       	cp	r25, r24
    1706:	30 f0       	brcs	.+12     	; 0x1714 <xTaskResumeAll+0x154>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xYieldPending>
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <xTaskResumeAll+0x154>
    1710:	e0 e0       	ldi	r30, 0x00	; 0
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <xPendingReadyList>
    1718:	81 11       	cpse	r24, r1
    171a:	65 cf       	rjmp	.-310    	; 0x15e6 <xTaskResumeAll+0x26>
    171c:	ef 2b       	or	r30, r31
    171e:	11 f0       	breq	.+4      	; 0x1724 <xTaskResumeAll+0x164>
    1720:	0e 94 33 07 	call	0xe66	; 0xe66 <prvResetNextTaskUnblockTime>
    1724:	c0 91 0b 07 	lds	r28, 0x070B	; 0x80070b <xPendedTicks>
    1728:	d0 91 0c 07 	lds	r29, 0x070C	; 0x80070c <xPendedTicks+0x1>
    172c:	20 97       	sbiw	r28, 0x00	; 0
    172e:	69 f0       	breq	.+26     	; 0x174a <xTaskResumeAll+0x18a>
    1730:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskIncrementTick>
    1734:	88 23       	and	r24, r24
    1736:	19 f0       	breq	.+6      	; 0x173e <xTaskResumeAll+0x17e>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xYieldPending>
    173e:	21 97       	sbiw	r28, 0x01	; 1
    1740:	b9 f7       	brne	.-18     	; 0x1730 <xTaskResumeAll+0x170>
    1742:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <xPendedTicks+0x1>
    1746:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <xPendedTicks>
    174a:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <xYieldPending>
    174e:	88 23       	and	r24, r24
    1750:	31 f0       	breq	.+12     	; 0x175e <xTaskResumeAll+0x19e>
    1752:	0e 94 d5 01 	call	0x3aa	; 0x3aa <vPortYield>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <xTaskResumeAll+0x1a0>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <xTaskResumeAll+0x1a0>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <vTaskSwitchContext>:
    176a:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
    176e:	88 23       	and	r24, r24
    1770:	21 f0       	breq	.+8      	; 0x177a <vTaskSwitchContext+0x10>
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xYieldPending>
    1778:	08 95       	ret
    177a:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <xYieldPending>
    177e:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <uxTopReadyPriority>
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <vTaskSwitchContext+0x1c>
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	82 2f       	mov	r24, r18
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	fc 01       	movw	r30, r24
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	ee 0f       	add	r30, r30
    1792:	ff 1f       	adc	r31, r31
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	e8 0f       	add	r30, r24
    179a:	f9 1f       	adc	r31, r25
    179c:	ec 5b       	subi	r30, 0xBC	; 188
    179e:	f8 4f       	sbci	r31, 0xF8	; 248
    17a0:	30 81       	ld	r19, Z
    17a2:	33 23       	and	r19, r19
    17a4:	79 f3       	breq	.-34     	; 0x1784 <vTaskSwitchContext+0x1a>
    17a6:	ac 01       	movw	r20, r24
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	44 0f       	add	r20, r20
    17ae:	55 1f       	adc	r21, r21
    17b0:	44 0f       	add	r20, r20
    17b2:	55 1f       	adc	r21, r21
    17b4:	48 0f       	add	r20, r24
    17b6:	59 1f       	adc	r21, r25
    17b8:	df 01       	movw	r26, r30
    17ba:	01 80       	ldd	r0, Z+1	; 0x01
    17bc:	f2 81       	ldd	r31, Z+2	; 0x02
    17be:	e0 2d       	mov	r30, r0
    17c0:	02 80       	ldd	r0, Z+2	; 0x02
    17c2:	f3 81       	ldd	r31, Z+3	; 0x03
    17c4:	e0 2d       	mov	r30, r0
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	fc 93       	st	X, r31
    17ca:	ee 93       	st	-X, r30
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	49 5b       	subi	r20, 0xB9	; 185
    17d0:	58 4f       	sbci	r21, 0xF8	; 248
    17d2:	e4 17       	cp	r30, r20
    17d4:	f5 07       	cpc	r31, r21
    17d6:	29 f4       	brne	.+10     	; 0x17e2 <vTaskSwitchContext+0x78>
    17d8:	42 81       	ldd	r20, Z+2	; 0x02
    17da:	53 81       	ldd	r21, Z+3	; 0x03
    17dc:	fd 01       	movw	r30, r26
    17de:	52 83       	std	Z+2, r21	; 0x02
    17e0:	41 83       	std	Z+1, r20	; 0x01
    17e2:	fc 01       	movw	r30, r24
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	8e 0f       	add	r24, r30
    17f2:	9f 1f       	adc	r25, r31
    17f4:	fc 01       	movw	r30, r24
    17f6:	ec 5b       	subi	r30, 0xBC	; 188
    17f8:	f8 4f       	sbci	r31, 0xF8	; 248
    17fa:	01 80       	ldd	r0, Z+1	; 0x01
    17fc:	f2 81       	ldd	r31, Z+2	; 0x02
    17fe:	e0 2d       	mov	r30, r0
    1800:	86 81       	ldd	r24, Z+6	; 0x06
    1802:	97 81       	ldd	r25, Z+7	; 0x07
    1804:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <pxCurrentTCB+0x1>
    1808:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <pxCurrentTCB>
    180c:	20 93 0e 07 	sts	0x070E, r18	; 0x80070e <uxTopReadyPriority>
    1810:	08 95       	ret

00001812 <vTaskPlaceOnEventList>:
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	eb 01       	movw	r28, r22
    1818:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <pxCurrentTCB>
    181c:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1820:	64 5f       	subi	r22, 0xF4	; 244
    1822:	7f 4f       	sbci	r23, 0xFF	; 255
    1824:	0e 94 08 04 	call	0x810	; 0x810 <vListInsert>
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	ce 01       	movw	r24, r28
    182c:	0e 94 bf 08 	call	0x117e	; 0x117e <prvAddCurrentTaskToDelayedList>
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <xTaskRemoveFromEventList>:
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	dc 01       	movw	r26, r24
    183c:	15 96       	adiw	r26, 0x05	; 5
    183e:	ed 91       	ld	r30, X+
    1840:	fc 91       	ld	r31, X
    1842:	16 97       	sbiw	r26, 0x06	; 6
    1844:	06 80       	ldd	r0, Z+6	; 0x06
    1846:	f7 81       	ldd	r31, Z+7	; 0x07
    1848:	e0 2d       	mov	r30, r0
    184a:	a4 89       	ldd	r26, Z+20	; 0x14
    184c:	b5 89       	ldd	r27, Z+21	; 0x15
    184e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1850:	d7 85       	ldd	r29, Z+15	; 0x0f
    1852:	80 89       	ldd	r24, Z+16	; 0x10
    1854:	91 89       	ldd	r25, Z+17	; 0x11
    1856:	9d 83       	std	Y+5, r25	; 0x05
    1858:	8c 83       	std	Y+4, r24	; 0x04
    185a:	c0 89       	ldd	r28, Z+16	; 0x10
    185c:	d1 89       	ldd	r29, Z+17	; 0x11
    185e:	86 85       	ldd	r24, Z+14	; 0x0e
    1860:	97 85       	ldd	r25, Z+15	; 0x0f
    1862:	9b 83       	std	Y+3, r25	; 0x03
    1864:	8a 83       	std	Y+2, r24	; 0x02
    1866:	11 96       	adiw	r26, 0x01	; 1
    1868:	8d 91       	ld	r24, X+
    186a:	9c 91       	ld	r25, X
    186c:	12 97       	sbiw	r26, 0x02	; 2
    186e:	9f 01       	movw	r18, r30
    1870:	24 5f       	subi	r18, 0xF4	; 244
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	82 17       	cp	r24, r18
    1876:	93 07       	cpc	r25, r19
    1878:	31 f4       	brne	.+12     	; 0x1886 <xTaskRemoveFromEventList+0x50>
    187a:	80 89       	ldd	r24, Z+16	; 0x10
    187c:	91 89       	ldd	r25, Z+17	; 0x11
    187e:	12 96       	adiw	r26, 0x02	; 2
    1880:	9c 93       	st	X, r25
    1882:	8e 93       	st	-X, r24
    1884:	11 97       	sbiw	r26, 0x01	; 1
    1886:	15 8a       	std	Z+21, r1	; 0x15
    1888:	14 8a       	std	Z+20, r1	; 0x14
    188a:	8c 91       	ld	r24, X
    188c:	81 50       	subi	r24, 0x01	; 1
    188e:	8c 93       	st	X, r24
    1890:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxSchedulerSuspended>
    1894:	81 11       	cpse	r24, r1
    1896:	60 c0       	rjmp	.+192    	; 0x1958 <xTaskRemoveFromEventList+0x122>
    1898:	a2 85       	ldd	r26, Z+10	; 0x0a
    189a:	b3 85       	ldd	r27, Z+11	; 0x0b
    189c:	c4 81       	ldd	r28, Z+4	; 0x04
    189e:	d5 81       	ldd	r29, Z+5	; 0x05
    18a0:	86 81       	ldd	r24, Z+6	; 0x06
    18a2:	97 81       	ldd	r25, Z+7	; 0x07
    18a4:	9d 83       	std	Y+5, r25	; 0x05
    18a6:	8c 83       	std	Y+4, r24	; 0x04
    18a8:	c6 81       	ldd	r28, Z+6	; 0x06
    18aa:	d7 81       	ldd	r29, Z+7	; 0x07
    18ac:	84 81       	ldd	r24, Z+4	; 0x04
    18ae:	95 81       	ldd	r25, Z+5	; 0x05
    18b0:	9b 83       	std	Y+3, r25	; 0x03
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	8d 91       	ld	r24, X+
    18b8:	9c 91       	ld	r25, X
    18ba:	12 97       	sbiw	r26, 0x02	; 2
    18bc:	9f 01       	movw	r18, r30
    18be:	2e 5f       	subi	r18, 0xFE	; 254
    18c0:	3f 4f       	sbci	r19, 0xFF	; 255
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	31 f4       	brne	.+12     	; 0x18d4 <xTaskRemoveFromEventList+0x9e>
    18c8:	86 81       	ldd	r24, Z+6	; 0x06
    18ca:	97 81       	ldd	r25, Z+7	; 0x07
    18cc:	12 96       	adiw	r26, 0x02	; 2
    18ce:	9c 93       	st	X, r25
    18d0:	8e 93       	st	-X, r24
    18d2:	11 97       	sbiw	r26, 0x01	; 1
    18d4:	13 86       	std	Z+11, r1	; 0x0b
    18d6:	12 86       	std	Z+10, r1	; 0x0a
    18d8:	8c 91       	ld	r24, X
    18da:	81 50       	subi	r24, 0x01	; 1
    18dc:	8c 93       	st	X, r24
    18de:	86 89       	ldd	r24, Z+22	; 0x16
    18e0:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    18e4:	98 17       	cp	r25, r24
    18e6:	10 f4       	brcc	.+4      	; 0x18ec <xTaskRemoveFromEventList+0xb6>
    18e8:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	dc 01       	movw	r26, r24
    18f0:	aa 0f       	add	r26, r26
    18f2:	bb 1f       	adc	r27, r27
    18f4:	aa 0f       	add	r26, r26
    18f6:	bb 1f       	adc	r27, r27
    18f8:	aa 0f       	add	r26, r26
    18fa:	bb 1f       	adc	r27, r27
    18fc:	8a 0f       	add	r24, r26
    18fe:	9b 1f       	adc	r25, r27
    1900:	dc 01       	movw	r26, r24
    1902:	ac 5b       	subi	r26, 0xBC	; 188
    1904:	b8 4f       	sbci	r27, 0xF8	; 248
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	0d 90       	ld	r0, X+
    190a:	bc 91       	ld	r27, X
    190c:	a0 2d       	mov	r26, r0
    190e:	b5 83       	std	Z+5, r27	; 0x05
    1910:	a4 83       	std	Z+4, r26	; 0x04
    1912:	14 96       	adiw	r26, 0x04	; 4
    1914:	8d 91       	ld	r24, X+
    1916:	9c 91       	ld	r25, X
    1918:	15 97       	sbiw	r26, 0x05	; 5
    191a:	97 83       	std	Z+7, r25	; 0x07
    191c:	86 83       	std	Z+6, r24	; 0x06
    191e:	14 96       	adiw	r26, 0x04	; 4
    1920:	cd 91       	ld	r28, X+
    1922:	dc 91       	ld	r29, X
    1924:	15 97       	sbiw	r26, 0x05	; 5
    1926:	3b 83       	std	Y+3, r19	; 0x03
    1928:	2a 83       	std	Y+2, r18	; 0x02
    192a:	15 96       	adiw	r26, 0x05	; 5
    192c:	3c 93       	st	X, r19
    192e:	2e 93       	st	-X, r18
    1930:	14 97       	sbiw	r26, 0x04	; 4
    1932:	a6 89       	ldd	r26, Z+22	; 0x16
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	cd 01       	movw	r24, r26
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	a8 0f       	add	r26, r24
    1946:	b9 1f       	adc	r27, r25
    1948:	ac 5b       	subi	r26, 0xBC	; 188
    194a:	b8 4f       	sbci	r27, 0xF8	; 248
    194c:	b3 87       	std	Z+11, r27	; 0x0b
    194e:	a2 87       	std	Z+10, r26	; 0x0a
    1950:	8c 91       	ld	r24, X
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	8c 93       	st	X, r24
    1956:	1c c0       	rjmp	.+56     	; 0x1990 <xTaskRemoveFromEventList+0x15a>
    1958:	45 e2       	ldi	r20, 0x25	; 37
    195a:	57 e0       	ldi	r21, 0x07	; 7
    195c:	da 01       	movw	r26, r20
    195e:	11 96       	adiw	r26, 0x01	; 1
    1960:	cd 91       	ld	r28, X+
    1962:	dc 91       	ld	r29, X
    1964:	12 97       	sbiw	r26, 0x02	; 2
    1966:	d7 87       	std	Z+15, r29	; 0x0f
    1968:	c6 87       	std	Z+14, r28	; 0x0e
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	91 8b       	std	Z+17, r25	; 0x11
    1970:	80 8b       	std	Z+16, r24	; 0x10
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	9d 81       	ldd	r25, Y+5	; 0x05
    1976:	dc 01       	movw	r26, r24
    1978:	13 96       	adiw	r26, 0x03	; 3
    197a:	3c 93       	st	X, r19
    197c:	2e 93       	st	-X, r18
    197e:	12 97       	sbiw	r26, 0x02	; 2
    1980:	3d 83       	std	Y+5, r19	; 0x05
    1982:	2c 83       	std	Y+4, r18	; 0x04
    1984:	55 8b       	std	Z+21, r21	; 0x15
    1986:	44 8b       	std	Z+20, r20	; 0x14
    1988:	da 01       	movw	r26, r20
    198a:	8c 91       	ld	r24, X
    198c:	8f 5f       	subi	r24, 0xFF	; 255
    198e:	8c 93       	st	X, r24
    1990:	96 89       	ldd	r25, Z+22	; 0x16
    1992:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    1996:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    199a:	86 89       	ldd	r24, Z+22	; 0x16
    199c:	89 17       	cp	r24, r25
    199e:	20 f4       	brcc	.+8      	; 0x19a8 <xTaskRemoveFromEventList+0x172>
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xYieldPending>
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <xTaskRemoveFromEventList+0x174>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <vTaskRemoveFromUnorderedEventList>:
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	dc 01       	movw	r26, r24
    19b6:	70 68       	ori	r23, 0x80	; 128
    19b8:	11 96       	adiw	r26, 0x01	; 1
    19ba:	7c 93       	st	X, r23
    19bc:	6e 93       	st	-X, r22
    19be:	16 96       	adiw	r26, 0x06	; 6
    19c0:	ed 91       	ld	r30, X+
    19c2:	fc 91       	ld	r31, X
    19c4:	17 97       	sbiw	r26, 0x07	; 7
    19c6:	18 96       	adiw	r26, 0x08	; 8
    19c8:	4d 91       	ld	r20, X+
    19ca:	5c 91       	ld	r21, X
    19cc:	19 97       	sbiw	r26, 0x09	; 9
    19ce:	12 96       	adiw	r26, 0x02	; 2
    19d0:	8d 91       	ld	r24, X+
    19d2:	9c 91       	ld	r25, X
    19d4:	13 97       	sbiw	r26, 0x03	; 3
    19d6:	14 96       	adiw	r26, 0x04	; 4
    19d8:	2d 91       	ld	r18, X+
    19da:	3c 91       	ld	r19, X
    19dc:	15 97       	sbiw	r26, 0x05	; 5
    19de:	ec 01       	movw	r28, r24
    19e0:	3d 83       	std	Y+5, r19	; 0x05
    19e2:	2c 83       	std	Y+4, r18	; 0x04
    19e4:	14 96       	adiw	r26, 0x04	; 4
    19e6:	8d 91       	ld	r24, X+
    19e8:	9c 91       	ld	r25, X
    19ea:	15 97       	sbiw	r26, 0x05	; 5
    19ec:	12 96       	adiw	r26, 0x02	; 2
    19ee:	2d 91       	ld	r18, X+
    19f0:	3c 91       	ld	r19, X
    19f2:	13 97       	sbiw	r26, 0x03	; 3
    19f4:	ec 01       	movw	r28, r24
    19f6:	3b 83       	std	Y+3, r19	; 0x03
    19f8:	2a 83       	std	Y+2, r18	; 0x02
    19fa:	ea 01       	movw	r28, r20
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	a8 17       	cp	r26, r24
    1a02:	b9 07       	cpc	r27, r25
    1a04:	31 f4       	brne	.+12     	; 0x1a12 <vTaskRemoveFromUnorderedEventList+0x62>
    1a06:	14 96       	adiw	r26, 0x04	; 4
    1a08:	8d 91       	ld	r24, X+
    1a0a:	9c 91       	ld	r25, X
    1a0c:	15 97       	sbiw	r26, 0x05	; 5
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	19 96       	adiw	r26, 0x09	; 9
    1a14:	1c 92       	st	X, r1
    1a16:	1e 92       	st	-X, r1
    1a18:	18 97       	sbiw	r26, 0x08	; 8
    1a1a:	da 01       	movw	r26, r20
    1a1c:	8c 91       	ld	r24, X
    1a1e:	81 50       	subi	r24, 0x01	; 1
    1a20:	8c 93       	st	X, r24
    1a22:	a2 85       	ldd	r26, Z+10	; 0x0a
    1a24:	b3 85       	ldd	r27, Z+11	; 0x0b
    1a26:	c4 81       	ldd	r28, Z+4	; 0x04
    1a28:	d5 81       	ldd	r29, Z+5	; 0x05
    1a2a:	86 81       	ldd	r24, Z+6	; 0x06
    1a2c:	97 81       	ldd	r25, Z+7	; 0x07
    1a2e:	9d 83       	std	Y+5, r25	; 0x05
    1a30:	8c 83       	std	Y+4, r24	; 0x04
    1a32:	c6 81       	ldd	r28, Z+6	; 0x06
    1a34:	d7 81       	ldd	r29, Z+7	; 0x07
    1a36:	84 81       	ldd	r24, Z+4	; 0x04
    1a38:	95 81       	ldd	r25, Z+5	; 0x05
    1a3a:	9b 83       	std	Y+3, r25	; 0x03
    1a3c:	8a 83       	std	Y+2, r24	; 0x02
    1a3e:	11 96       	adiw	r26, 0x01	; 1
    1a40:	8d 91       	ld	r24, X+
    1a42:	9c 91       	ld	r25, X
    1a44:	12 97       	sbiw	r26, 0x02	; 2
    1a46:	9f 01       	movw	r18, r30
    1a48:	2e 5f       	subi	r18, 0xFE	; 254
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	82 17       	cp	r24, r18
    1a4e:	93 07       	cpc	r25, r19
    1a50:	31 f4       	brne	.+12     	; 0x1a5e <vTaskRemoveFromUnorderedEventList+0xae>
    1a52:	86 81       	ldd	r24, Z+6	; 0x06
    1a54:	97 81       	ldd	r25, Z+7	; 0x07
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	13 86       	std	Z+11, r1	; 0x0b
    1a60:	12 86       	std	Z+10, r1	; 0x0a
    1a62:	8c 91       	ld	r24, X
    1a64:	81 50       	subi	r24, 0x01	; 1
    1a66:	8c 93       	st	X, r24
    1a68:	86 89       	ldd	r24, Z+22	; 0x16
    1a6a:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    1a6e:	98 17       	cp	r25, r24
    1a70:	10 f4       	brcc	.+4      	; 0x1a76 <vTaskRemoveFromUnorderedEventList+0xc6>
    1a72:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	dc 01       	movw	r26, r24
    1a7a:	aa 0f       	add	r26, r26
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	aa 0f       	add	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	aa 0f       	add	r26, r26
    1a84:	bb 1f       	adc	r27, r27
    1a86:	8a 0f       	add	r24, r26
    1a88:	9b 1f       	adc	r25, r27
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	ac 5b       	subi	r26, 0xBC	; 188
    1a8e:	b8 4f       	sbci	r27, 0xF8	; 248
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	0d 90       	ld	r0, X+
    1a94:	bc 91       	ld	r27, X
    1a96:	a0 2d       	mov	r26, r0
    1a98:	b5 83       	std	Z+5, r27	; 0x05
    1a9a:	a4 83       	std	Z+4, r26	; 0x04
    1a9c:	14 96       	adiw	r26, 0x04	; 4
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	9c 91       	ld	r25, X
    1aa2:	15 97       	sbiw	r26, 0x05	; 5
    1aa4:	97 83       	std	Z+7, r25	; 0x07
    1aa6:	86 83       	std	Z+6, r24	; 0x06
    1aa8:	14 96       	adiw	r26, 0x04	; 4
    1aaa:	cd 91       	ld	r28, X+
    1aac:	dc 91       	ld	r29, X
    1aae:	15 97       	sbiw	r26, 0x05	; 5
    1ab0:	3b 83       	std	Y+3, r19	; 0x03
    1ab2:	2a 83       	std	Y+2, r18	; 0x02
    1ab4:	15 96       	adiw	r26, 0x05	; 5
    1ab6:	3c 93       	st	X, r19
    1ab8:	2e 93       	st	-X, r18
    1aba:	14 97       	sbiw	r26, 0x04	; 4
    1abc:	a6 89       	ldd	r26, Z+22	; 0x16
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	a8 0f       	add	r26, r24
    1ad0:	b9 1f       	adc	r27, r25
    1ad2:	ac 5b       	subi	r26, 0xBC	; 188
    1ad4:	b8 4f       	sbci	r27, 0xF8	; 248
    1ad6:	b3 87       	std	Z+11, r27	; 0x0b
    1ad8:	a2 87       	std	Z+10, r26	; 0x0a
    1ada:	8c 91       	ld	r24, X
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	8c 93       	st	X, r24
    1ae0:	96 89       	ldd	r25, Z+22	; 0x16
    1ae2:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    1ae6:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1aea:	86 89       	ldd	r24, Z+22	; 0x16
    1aec:	89 17       	cp	r24, r25
    1aee:	18 f4       	brcc	.+6      	; 0x1af6 <vTaskRemoveFromUnorderedEventList+0x146>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xYieldPending>
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <vTaskInternalSetTimeOutState>:
    1afc:	20 91 09 07 	lds	r18, 0x0709	; 0x800709 <xNumOfOverflows>
    1b00:	fc 01       	movw	r30, r24
    1b02:	20 83       	st	Z, r18
    1b04:	20 91 0f 07 	lds	r18, 0x070F	; 0x80070f <xTickCount>
    1b08:	30 91 10 07 	lds	r19, 0x0710	; 0x800710 <xTickCount+0x1>
    1b0c:	32 83       	std	Z+2, r19	; 0x02
    1b0e:	21 83       	std	Z+1, r18	; 0x01
    1b10:	08 95       	ret

00001b12 <xTaskCheckForTimeOut>:
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	0f 92       	push	r0
    1b1e:	e0 91 0f 07 	lds	r30, 0x070F	; 0x80070f <xTickCount>
    1b22:	f0 91 10 07 	lds	r31, 0x0710	; 0x800710 <xTickCount+0x1>
    1b26:	dc 01       	movw	r26, r24
    1b28:	11 96       	adiw	r26, 0x01	; 1
    1b2a:	4d 91       	ld	r20, X+
    1b2c:	5c 91       	ld	r21, X
    1b2e:	12 97       	sbiw	r26, 0x02	; 2
    1b30:	df 01       	movw	r26, r30
    1b32:	a4 1b       	sub	r26, r20
    1b34:	b5 0b       	sbc	r27, r21
    1b36:	eb 01       	movw	r28, r22
    1b38:	28 81       	ld	r18, Y
    1b3a:	39 81       	ldd	r19, Y+1	; 0x01
    1b3c:	2f 3f       	cpi	r18, 0xFF	; 255
    1b3e:	df ef       	ldi	r29, 0xFF	; 255
    1b40:	3d 07       	cpc	r19, r29
    1b42:	f9 f0       	breq	.+62     	; 0x1b82 <xTaskCheckForTimeOut+0x70>
    1b44:	ec 01       	movw	r28, r24
    1b46:	18 81       	ld	r17, Y
    1b48:	c0 91 09 07 	lds	r28, 0x0709	; 0x800709 <xNumOfOverflows>
    1b4c:	1c 17       	cp	r17, r28
    1b4e:	41 f0       	breq	.+16     	; 0x1b60 <xTaskCheckForTimeOut+0x4e>
    1b50:	e4 17       	cp	r30, r20
    1b52:	f5 07       	cpc	r31, r21
    1b54:	28 f0       	brcs	.+10     	; 0x1b60 <xTaskCheckForTimeOut+0x4e>
    1b56:	fb 01       	movw	r30, r22
    1b58:	11 82       	std	Z+1, r1	; 0x01
    1b5a:	10 82       	st	Z, r1
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	12 c0       	rjmp	.+36     	; 0x1b84 <xTaskCheckForTimeOut+0x72>
    1b60:	a2 17       	cp	r26, r18
    1b62:	b3 07       	cpc	r27, r19
    1b64:	48 f4       	brcc	.+18     	; 0x1b78 <xTaskCheckForTimeOut+0x66>
    1b66:	fb 01       	movw	r30, r22
    1b68:	2a 1b       	sub	r18, r26
    1b6a:	3b 0b       	sbc	r19, r27
    1b6c:	31 83       	std	Z+1, r19	; 0x01
    1b6e:	20 83       	st	Z, r18
    1b70:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <vTaskInternalSetTimeOutState>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <xTaskCheckForTimeOut+0x72>
    1b78:	db 01       	movw	r26, r22
    1b7a:	1d 92       	st	X+, r1
    1b7c:	1c 92       	st	X, r1
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <xTaskCheckForTimeOut+0x72>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	08 95       	ret

00001b90 <vTaskMissedYield>:
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <xYieldPending>
    1b96:	08 95       	ret

00001b98 <xTaskPriorityInherit>:
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	89 2b       	or	r24, r25
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <xTaskPriorityInherit+0x10>
    1ba6:	84 c0       	rjmp	.+264    	; 0x1cb0 <xTaskPriorityInherit+0x118>
    1ba8:	26 89       	ldd	r18, Z+22	; 0x16
    1baa:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
    1bae:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1bb2:	56 96       	adiw	r26, 0x16	; 22
    1bb4:	8c 91       	ld	r24, X
    1bb6:	28 17       	cp	r18, r24
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <xTaskPriorityInherit+0x24>
    1bba:	70 c0       	rjmp	.+224    	; 0x1c9c <xTaskPriorityInherit+0x104>
    1bbc:	84 85       	ldd	r24, Z+12	; 0x0c
    1bbe:	95 85       	ldd	r25, Z+13	; 0x0d
    1bc0:	99 23       	and	r25, r25
    1bc2:	64 f0       	brlt	.+24     	; 0x1bdc <xTaskPriorityInherit+0x44>
    1bc4:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
    1bc8:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1bcc:	56 96       	adiw	r26, 0x16	; 22
    1bce:	3c 91       	ld	r19, X
    1bd0:	84 e0       	ldi	r24, 0x04	; 4
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	83 1b       	sub	r24, r19
    1bd6:	91 09       	sbc	r25, r1
    1bd8:	95 87       	std	Z+13, r25	; 0x0d
    1bda:	84 87       	std	Z+12, r24	; 0x0c
    1bdc:	82 85       	ldd	r24, Z+10	; 0x0a
    1bde:	93 85       	ldd	r25, Z+11	; 0x0b
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	a9 01       	movw	r20, r18
    1be4:	44 0f       	add	r20, r20
    1be6:	55 1f       	adc	r21, r21
    1be8:	44 0f       	add	r20, r20
    1bea:	55 1f       	adc	r21, r21
    1bec:	44 0f       	add	r20, r20
    1bee:	55 1f       	adc	r21, r21
    1bf0:	24 0f       	add	r18, r20
    1bf2:	35 1f       	adc	r19, r21
    1bf4:	2c 5b       	subi	r18, 0xBC	; 188
    1bf6:	38 4f       	sbci	r19, 0xF8	; 248
    1bf8:	82 17       	cp	r24, r18
    1bfa:	93 07       	cpc	r25, r19
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <xTaskPriorityInherit+0x68>
    1bfe:	45 c0       	rjmp	.+138    	; 0x1c8a <xTaskPriorityInherit+0xf2>
    1c00:	ef 01       	movw	r28, r30
    1c02:	8f 01       	movw	r16, r30
    1c04:	0e 5f       	subi	r16, 0xFE	; 254
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	c8 01       	movw	r24, r16
    1c0a:	0e 94 39 04 	call	0x872	; 0x872 <uxListRemove>
    1c0e:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    1c12:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1c16:	86 89       	ldd	r24, Z+22	; 0x16
    1c18:	8e 8b       	std	Y+22, r24	; 0x16
    1c1a:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    1c1e:	98 17       	cp	r25, r24
    1c20:	10 f4       	brcc	.+4      	; 0x1c26 <xTaskPriorityInherit+0x8e>
    1c22:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	ee 0f       	add	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	ee 0f       	add	r30, r30
    1c34:	ff 1f       	adc	r31, r31
    1c36:	8e 0f       	add	r24, r30
    1c38:	9f 1f       	adc	r25, r31
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	ec 5b       	subi	r30, 0xBC	; 188
    1c3e:	f8 4f       	sbci	r31, 0xF8	; 248
    1c40:	01 80       	ldd	r0, Z+1	; 0x01
    1c42:	f2 81       	ldd	r31, Z+2	; 0x02
    1c44:	e0 2d       	mov	r30, r0
    1c46:	fd 83       	std	Y+5, r31	; 0x05
    1c48:	ec 83       	std	Y+4, r30	; 0x04
    1c4a:	84 81       	ldd	r24, Z+4	; 0x04
    1c4c:	95 81       	ldd	r25, Z+5	; 0x05
    1c4e:	9f 83       	std	Y+7, r25	; 0x07
    1c50:	8e 83       	std	Y+6, r24	; 0x06
    1c52:	a4 81       	ldd	r26, Z+4	; 0x04
    1c54:	b5 81       	ldd	r27, Z+5	; 0x05
    1c56:	13 96       	adiw	r26, 0x03	; 3
    1c58:	1c 93       	st	X, r17
    1c5a:	0e 93       	st	-X, r16
    1c5c:	12 97       	sbiw	r26, 0x02	; 2
    1c5e:	15 83       	std	Z+5, r17	; 0x05
    1c60:	04 83       	std	Z+4, r16	; 0x04
    1c62:	8e 89       	ldd	r24, Y+22	; 0x16
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	fc 01       	movw	r30, r24
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	ee 0f       	add	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	e8 0f       	add	r30, r24
    1c76:	f9 1f       	adc	r31, r25
    1c78:	ec 5b       	subi	r30, 0xBC	; 188
    1c7a:	f8 4f       	sbci	r31, 0xF8	; 248
    1c7c:	fb 87       	std	Y+11, r31	; 0x0b
    1c7e:	ea 87       	std	Y+10, r30	; 0x0a
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 5f       	subi	r24, 0xFF	; 255
    1c84:	80 83       	st	Z, r24
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	16 c0       	rjmp	.+44     	; 0x1cb6 <xTaskPriorityInherit+0x11e>
    1c8a:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <pxCurrentTCB>
    1c8e:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1c92:	56 96       	adiw	r26, 0x16	; 22
    1c94:	8c 91       	ld	r24, X
    1c96:	86 8b       	std	Z+22, r24	; 0x16
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	0d c0       	rjmp	.+26     	; 0x1cb6 <xTaskPriorityInherit+0x11e>
    1c9c:	91 a1       	ldd	r25, Z+33	; 0x21
    1c9e:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    1ca2:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1ca6:	86 89       	ldd	r24, Z+22	; 0x16
    1ca8:	98 17       	cp	r25, r24
    1caa:	20 f0       	brcs	.+8      	; 0x1cb4 <xTaskPriorityInherit+0x11c>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <xTaskPriorityInherit+0x11e>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <xTaskPriorityInherit+0x11e>
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	08 95       	ret

00001cc0 <xTaskPriorityDisinherit>:
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	fc 01       	movw	r30, r24
    1cca:	89 2b       	or	r24, r25
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <xTaskPriorityDisinherit+0x10>
    1cce:	51 c0       	rjmp	.+162    	; 0x1d72 <xTaskPriorityDisinherit+0xb2>
    1cd0:	82 a1       	ldd	r24, Z+34	; 0x22
    1cd2:	81 50       	subi	r24, 0x01	; 1
    1cd4:	82 a3       	std	Z+34, r24	; 0x22
    1cd6:	26 89       	ldd	r18, Z+22	; 0x16
    1cd8:	91 a1       	ldd	r25, Z+33	; 0x21
    1cda:	29 17       	cp	r18, r25
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <xTaskPriorityDisinherit+0x20>
    1cde:	4b c0       	rjmp	.+150    	; 0x1d76 <xTaskPriorityDisinherit+0xb6>
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	4b c0       	rjmp	.+150    	; 0x1d7a <xTaskPriorityDisinherit+0xba>
    1ce4:	ef 01       	movw	r28, r30
    1ce6:	8f 01       	movw	r16, r30
    1ce8:	0e 5f       	subi	r16, 0xFE	; 254
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 39 04 	call	0x872	; 0x872 <uxListRemove>
    1cf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf4:	8e 8b       	std	Y+22, r24	; 0x16
    1cf6:	24 e0       	ldi	r18, 0x04	; 4
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	28 1b       	sub	r18, r24
    1cfc:	31 09       	sbc	r19, r1
    1cfe:	3d 87       	std	Y+13, r19	; 0x0d
    1d00:	2c 87       	std	Y+12, r18	; 0x0c
    1d02:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    1d06:	98 17       	cp	r25, r24
    1d08:	10 f4       	brcc	.+4      	; 0x1d0e <xTaskPriorityDisinherit+0x4e>
    1d0a:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	fc 01       	movw	r30, r24
    1d12:	ee 0f       	add	r30, r30
    1d14:	ff 1f       	adc	r31, r31
    1d16:	ee 0f       	add	r30, r30
    1d18:	ff 1f       	adc	r31, r31
    1d1a:	ee 0f       	add	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	8e 0f       	add	r24, r30
    1d20:	9f 1f       	adc	r25, r31
    1d22:	fc 01       	movw	r30, r24
    1d24:	ec 5b       	subi	r30, 0xBC	; 188
    1d26:	f8 4f       	sbci	r31, 0xF8	; 248
    1d28:	01 80       	ldd	r0, Z+1	; 0x01
    1d2a:	f2 81       	ldd	r31, Z+2	; 0x02
    1d2c:	e0 2d       	mov	r30, r0
    1d2e:	fd 83       	std	Y+5, r31	; 0x05
    1d30:	ec 83       	std	Y+4, r30	; 0x04
    1d32:	84 81       	ldd	r24, Z+4	; 0x04
    1d34:	95 81       	ldd	r25, Z+5	; 0x05
    1d36:	9f 83       	std	Y+7, r25	; 0x07
    1d38:	8e 83       	std	Y+6, r24	; 0x06
    1d3a:	a4 81       	ldd	r26, Z+4	; 0x04
    1d3c:	b5 81       	ldd	r27, Z+5	; 0x05
    1d3e:	13 96       	adiw	r26, 0x03	; 3
    1d40:	1c 93       	st	X, r17
    1d42:	0e 93       	st	-X, r16
    1d44:	12 97       	sbiw	r26, 0x02	; 2
    1d46:	15 83       	std	Z+5, r17	; 0x05
    1d48:	04 83       	std	Z+4, r16	; 0x04
    1d4a:	ee 89       	ldd	r30, Y+22	; 0x16
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	cf 01       	movw	r24, r30
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	e8 0f       	add	r30, r24
    1d5e:	f9 1f       	adc	r31, r25
    1d60:	ec 5b       	subi	r30, 0xBC	; 188
    1d62:	f8 4f       	sbci	r31, 0xF8	; 248
    1d64:	fb 87       	std	Y+11, r31	; 0x0b
    1d66:	ea 87       	std	Y+10, r30	; 0x0a
    1d68:	80 81       	ld	r24, Z
    1d6a:	8f 5f       	subi	r24, 0xFF	; 255
    1d6c:	80 83       	st	Z, r24
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	05 c0       	rjmp	.+10     	; 0x1d7c <xTaskPriorityDisinherit+0xbc>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <xTaskPriorityDisinherit+0xbc>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <xTaskPriorityDisinherit+0xbc>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <vTaskPriorityDisinheritAfterTimeout>:
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	fc 01       	movw	r30, r24
    1d90:	89 2b       	or	r24, r25
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1d94:	66 c0       	rjmp	.+204    	; 0x1e62 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1d96:	91 a1       	ldd	r25, Z+33	; 0x21
    1d98:	96 17       	cp	r25, r22
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <vTaskPriorityDisinheritAfterTimeout+0x18>
    1d9c:	96 2f       	mov	r25, r22
    1d9e:	86 89       	ldd	r24, Z+22	; 0x16
    1da0:	98 17       	cp	r25, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1da4:	5e c0       	rjmp	.+188    	; 0x1e62 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1da6:	22 a1       	ldd	r18, Z+34	; 0x22
    1da8:	21 30       	cpi	r18, 0x01	; 1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <vTaskPriorityDisinheritAfterTimeout+0x28>
    1dac:	5a c0       	rjmp	.+180    	; 0x1e62 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1dae:	96 8b       	std	Z+22, r25	; 0x16
    1db0:	24 85       	ldd	r18, Z+12	; 0x0c
    1db2:	35 85       	ldd	r19, Z+13	; 0x0d
    1db4:	33 23       	and	r19, r19
    1db6:	34 f0       	brlt	.+12     	; 0x1dc4 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    1db8:	24 e0       	ldi	r18, 0x04	; 4
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	29 1b       	sub	r18, r25
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	35 87       	std	Z+13, r19	; 0x0d
    1dc2:	24 87       	std	Z+12, r18	; 0x0c
    1dc4:	22 85       	ldd	r18, Z+10	; 0x0a
    1dc6:	33 85       	ldd	r19, Z+11	; 0x0b
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	ac 01       	movw	r20, r24
    1dcc:	44 0f       	add	r20, r20
    1dce:	55 1f       	adc	r21, r21
    1dd0:	44 0f       	add	r20, r20
    1dd2:	55 1f       	adc	r21, r21
    1dd4:	44 0f       	add	r20, r20
    1dd6:	55 1f       	adc	r21, r21
    1dd8:	84 0f       	add	r24, r20
    1dda:	95 1f       	adc	r25, r21
    1ddc:	8c 5b       	subi	r24, 0xBC	; 188
    1dde:	98 4f       	sbci	r25, 0xF8	; 248
    1de0:	28 17       	cp	r18, r24
    1de2:	39 07       	cpc	r19, r25
    1de4:	f1 f5       	brne	.+124    	; 0x1e62 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1de6:	ef 01       	movw	r28, r30
    1de8:	8f 01       	movw	r16, r30
    1dea:	0e 5f       	subi	r16, 0xFE	; 254
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	c8 01       	movw	r24, r16
    1df0:	0e 94 39 04 	call	0x872	; 0x872 <uxListRemove>
    1df4:	8e 89       	ldd	r24, Y+22	; 0x16
    1df6:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <uxTopReadyPriority>
    1dfa:	98 17       	cp	r25, r24
    1dfc:	10 f4       	brcc	.+4      	; 0x1e02 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1dfe:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxTopReadyPriority>
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	fc 01       	movw	r30, r24
    1e06:	ee 0f       	add	r30, r30
    1e08:	ff 1f       	adc	r31, r31
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	ff 1f       	adc	r31, r31
    1e0e:	ee 0f       	add	r30, r30
    1e10:	ff 1f       	adc	r31, r31
    1e12:	8e 0f       	add	r24, r30
    1e14:	9f 1f       	adc	r25, r31
    1e16:	fc 01       	movw	r30, r24
    1e18:	ec 5b       	subi	r30, 0xBC	; 188
    1e1a:	f8 4f       	sbci	r31, 0xF8	; 248
    1e1c:	01 80       	ldd	r0, Z+1	; 0x01
    1e1e:	f2 81       	ldd	r31, Z+2	; 0x02
    1e20:	e0 2d       	mov	r30, r0
    1e22:	fd 83       	std	Y+5, r31	; 0x05
    1e24:	ec 83       	std	Y+4, r30	; 0x04
    1e26:	84 81       	ldd	r24, Z+4	; 0x04
    1e28:	95 81       	ldd	r25, Z+5	; 0x05
    1e2a:	9f 83       	std	Y+7, r25	; 0x07
    1e2c:	8e 83       	std	Y+6, r24	; 0x06
    1e2e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e30:	b5 81       	ldd	r27, Z+5	; 0x05
    1e32:	13 96       	adiw	r26, 0x03	; 3
    1e34:	1c 93       	st	X, r17
    1e36:	0e 93       	st	-X, r16
    1e38:	12 97       	sbiw	r26, 0x02	; 2
    1e3a:	15 83       	std	Z+5, r17	; 0x05
    1e3c:	04 83       	std	Z+4, r16	; 0x04
    1e3e:	8e 89       	ldd	r24, Y+22	; 0x16
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	fc 01       	movw	r30, r24
    1e44:	ee 0f       	add	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	e8 0f       	add	r30, r24
    1e52:	f9 1f       	adc	r31, r25
    1e54:	ec 5b       	subi	r30, 0xBC	; 188
    1e56:	f8 4f       	sbci	r31, 0xF8	; 248
    1e58:	fb 87       	std	Y+11, r31	; 0x0b
    1e5a:	ea 87       	std	Y+10, r30	; 0x0a
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8f 5f       	subi	r24, 0xFF	; 255
    1e60:	80 83       	st	Z, r24
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1e6c:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxCurrentTCB>
    1e70:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1e74:	89 2b       	or	r24, r25
    1e76:	39 f0       	breq	.+14     	; 0x1e86 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1e78:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <pxCurrentTCB>
    1e7c:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    1e80:	82 a1       	ldd	r24, Z+34	; 0x22
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1e86:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxCurrentTCB>
    1e8a:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <pxCurrentTCB+0x1>
    }
    1e8e:	08 95       	ret

00001e90 <task3>:
	UATR_SEND(tmp[1]);
	UATR_SEND(tmp[0]);
	
	
	
}
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <Group1>
    1e98:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <Group1+0x1>
    1e9c:	0e 94 a0 02 	call	0x540	; 0x540 <xEventGroupClearBits>
    1ea0:	06 97       	sbiw	r24, 0x06	; 6
    1ea2:	b1 f7       	brne	.-20     	; 0x1e90 <task3>
    1ea4:	8d e2       	ldi	r24, 0x2D	; 45
    1ea6:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle>
    1eaa:	f2 cf       	rjmp	.-28     	; 0x1e90 <task3>

00001eac <task2>:
    1eac:	68 ee       	ldi	r22, 0xE8	; 232
    1eae:	73 e0       	ldi	r23, 0x03	; 3
    1eb0:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <Mutex1>
    1eb4:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <Mutex1+0x1>
    1eb8:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueSemaphoreTake>
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	b1 f7       	brne	.-20     	; 0x1eac <task2>
    1ec0:	0e 94 24 01 	call	0x248	; 0x248 <UART_recieve>
    1ec4:	81 36       	cpi	r24, 0x61	; 97
    1ec6:	41 f4       	brne	.+16     	; 0x1ed8 <task2+0x2c>
    1ec8:	62 e0       	ldi	r22, 0x02	; 2
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <Group1>
    1ed0:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <Group1+0x1>
    1ed4:	0e 94 af 02 	call	0x55e	; 0x55e <xEventGroupSetBits>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <Mutex1>
    1ee6:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <Mutex1+0x1>
    1eea:	0e 94 d2 05 	call	0xba4	; 0xba4 <xQueueGenericSend>
    1eee:	de cf       	rjmp	.-68     	; 0x1eac <task2>

00001ef0 <task1>:
    1ef0:	68 ee       	ldi	r22, 0xE8	; 232
    1ef2:	73 e0       	ldi	r23, 0x03	; 3
    1ef4:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <Mutex1>
    1ef8:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <Mutex1+0x1>
    1efc:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueSemaphoreTake>
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	b1 f7       	brne	.-20     	; 0x1ef0 <task1>
    1f04:	0e 94 24 01 	call	0x248	; 0x248 <UART_recieve>
    1f08:	83 37       	cpi	r24, 0x73	; 115
    1f0a:	41 f4       	brne	.+16     	; 0x1f1c <task1+0x2c>
    1f0c:	64 e0       	ldi	r22, 0x04	; 4
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <Group1>
    1f14:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <Group1+0x1>
    1f18:	0e 94 af 02 	call	0x55e	; 0x55e <xEventGroupSetBits>
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <Mutex1>
    1f2a:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <Mutex1+0x1>
    1f2e:	0e 94 d2 05 	call	0xba4	; 0xba4 <xQueueGenericSend>
    1f32:	de cf       	rjmp	.-68     	; 0x1ef0 <task1>

00001f34 <init>:

 
 void init()
  {
	 out(D5,'l');
    1f34:	6c e6       	ldi	r22, 0x6C	; 108
    1f36:	8d e2       	ldi	r24, 0x2D	; 45
    1f38:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
	 UART_init();
    1f3c:	0e 94 14 01 	call	0x228	; 0x228 <UART_init>
    1f40:	08 95       	ret

00001f42 <main>:

}


int main(void)
{
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <main+0xc>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <main+0xe>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <main+0x10>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    init();
    1f56:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <init>
	
	TaskHandle_t task1_h,task2_h,task3_h;
	
	Mutex1 = xSemaphoreCreateMutex();
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	0e 94 74 06 	call	0xce8	; 0xce8 <xQueueCreateMutex>
    1f60:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <Mutex1+0x1>
    1f64:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <Mutex1>
	Group1 = xEventGroupCreate();
    1f68:	0e 94 8d 02 	call	0x51a	; 0x51a <xEventGroupCreate>
    1f6c:	90 93 6d 07 	sts	0x076D, r25	; 0x80076d <Group1+0x1>
    1f70:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <Group1>
	
	
	xTaskCreate(task1,"process",250,NULL,1,&task1_h);
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	7c 01       	movw	r14, r24
    1f7a:	01 e0       	ldi	r16, 0x01	; 1
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a ef       	ldi	r20, 0xFA	; 250
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	68 e0       	ldi	r22, 0x08	; 8
    1f86:	71 e0       	ldi	r23, 0x01	; 1
    1f88:	88 e7       	ldi	r24, 0x78	; 120
    1f8a:	9f e0       	ldi	r25, 0x0F	; 15
    1f8c:	0e 94 40 09 	call	0x1280	; 0x1280 <xTaskCreate>
	xTaskCreate(task2,"handler",250,NULL,2,&task2_h);
    1f90:	ce 01       	movw	r24, r28
    1f92:	03 96       	adiw	r24, 0x03	; 3
    1f94:	7c 01       	movw	r14, r24
    1f96:	02 e0       	ldi	r16, 0x02	; 2
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a ef       	ldi	r20, 0xFA	; 250
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	60 e1       	ldi	r22, 0x10	; 16
    1fa2:	71 e0       	ldi	r23, 0x01	; 1
    1fa4:	86 e5       	ldi	r24, 0x56	; 86
    1fa6:	9f e0       	ldi	r25, 0x0F	; 15
    1fa8:	0e 94 40 09 	call	0x1280	; 0x1280 <xTaskCreate>
	xTaskCreate(task3,"name"   ,250,NULL,3,&task3_h);
    1fac:	ce 01       	movw	r24, r28
    1fae:	05 96       	adiw	r24, 0x05	; 5
    1fb0:	7c 01       	movw	r14, r24
    1fb2:	03 e0       	ldi	r16, 0x03	; 3
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a ef       	ldi	r20, 0xFA	; 250
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	68 e1       	ldi	r22, 0x18	; 24
    1fbe:	71 e0       	ldi	r23, 0x01	; 1
    1fc0:	88 e4       	ldi	r24, 0x48	; 72
    1fc2:	9f e0       	ldi	r25, 0x0F	; 15
    1fc4:	0e 94 40 09 	call	0x1280	; 0x1280 <xTaskCreate>
	
	vTaskStartScheduler();
    1fc8:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskStartScheduler>
	
	
	
   
}
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	26 96       	adiw	r28, 0x06	; 6
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	0f 91       	pop	r16
    1fe2:	ff 90       	pop	r15
    1fe4:	ef 90       	pop	r14
    1fe6:	08 95       	ret

00001fe8 <__udivmodhi4>:
    1fe8:	aa 1b       	sub	r26, r26
    1fea:	bb 1b       	sub	r27, r27
    1fec:	51 e1       	ldi	r21, 0x11	; 17
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <__udivmodhi4_ep>

00001ff0 <__udivmodhi4_loop>:
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	a6 17       	cp	r26, r22
    1ff6:	b7 07       	cpc	r27, r23
    1ff8:	10 f0       	brcs	.+4      	; 0x1ffe <__udivmodhi4_ep>
    1ffa:	a6 1b       	sub	r26, r22
    1ffc:	b7 0b       	sbc	r27, r23

00001ffe <__udivmodhi4_ep>:
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	5a 95       	dec	r21
    2004:	a9 f7       	brne	.-22     	; 0x1ff0 <__udivmodhi4_loop>
    2006:	80 95       	com	r24
    2008:	90 95       	com	r25
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	08 95       	ret

00002010 <memcpy>:
    2010:	fb 01       	movw	r30, r22
    2012:	dc 01       	movw	r26, r24
    2014:	02 c0       	rjmp	.+4      	; 0x201a <memcpy+0xa>
    2016:	01 90       	ld	r0, Z+
    2018:	0d 92       	st	X+, r0
    201a:	41 50       	subi	r20, 0x01	; 1
    201c:	50 40       	sbci	r21, 0x00	; 0
    201e:	d8 f7       	brcc	.-10     	; 0x2016 <memcpy+0x6>
    2020:	08 95       	ret

00002022 <_exit>:
    2022:	f8 94       	cli

00002024 <__stop_program>:
    2024:	ff cf       	rjmp	.-2      	; 0x2024 <__stop_program>
