
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00001f16  00001faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000652  0080018e  0080018e  00002038  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005718  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e6  00000000  00000000  00007c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034a5  00000000  00000000  00008e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e08  00000000  00000000  0000c2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000192a  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005bad  00000000  00000000  0000e9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  0001458b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e1       	ldi	r30, 0x16	; 22
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 38       	cpi	r26, 0x8E	; 142
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	ae e8       	ldi	r26, 0x8E	; 142
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3e       	cpi	r26, 0xE0	; 224
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <main>
      9e:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <out>:
#define D5 45
#define D6 46
#define D7 47
void out(uint8_t a,char b)
{
	for (int i=10;i<48;i++)
      a6:	2a e0       	ldi	r18, 0x0A	; 10
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	6a c0       	rjmp	.+212    	; 0x180 <out+0xda>
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a){uint8_t tmp =i-10;DDRA |=(1<<tmp);if (b=='h'||b=='H'){PORTA |=(1<<tmp);break;} else{PORTA &=~(1<<tmp);break;}}}
		if (i>=18&&i<28)//for port B
      ac:	a9 01       	movw	r20, r18
      ae:	f9 01       	movw	r30, r18
      b0:	72 97       	sbiw	r30, 0x12	; 18
      b2:	3a 97       	sbiw	r30, 0x0a	; 10
      b4:	f0 f4       	brcc	.+60     	; 0xf2 <out+0x4c>
		{if (i==a){uint8_t tmp =i-20;DDRB |=(1<<tmp);if (b=='h'||b=='H'){PORTB |=(1<<tmp);break;} else{PORTB &=~(1<<tmp);break;}}}
      b6:	e8 2f       	mov	r30, r24
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	2e 17       	cp	r18, r30
      bc:	3f 07       	cpc	r19, r31
      be:	c9 f4       	brne	.+50     	; 0xf2 <out+0x4c>
      c0:	24 51       	subi	r18, 0x14	; 20
      c2:	34 b1       	in	r19, 0x04	; 4
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	02 c0       	rjmp	.+4      	; 0xce <out+0x28>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	2a 95       	dec	r18
      d0:	e2 f7       	brpl	.-8      	; 0xca <out+0x24>
      d2:	23 2f       	mov	r18, r19
      d4:	28 2b       	or	r18, r24
      d6:	24 b9       	out	0x04, r18	; 4
      d8:	68 36       	cpi	r22, 0x68	; 104
      da:	11 f0       	breq	.+4      	; 0xe0 <out+0x3a>
      dc:	68 34       	cpi	r22, 0x48	; 72
      de:	21 f4       	brne	.+8      	; 0xe8 <out+0x42>
      e0:	95 b1       	in	r25, 0x05	; 5
      e2:	89 2b       	or	r24, r25
      e4:	85 b9       	out	0x05, r24	; 5
      e6:	08 95       	ret
      e8:	95 b1       	in	r25, 0x05	; 5
      ea:	80 95       	com	r24
      ec:	89 23       	and	r24, r25
      ee:	85 b9       	out	0x05, r24	; 5
      f0:	08 95       	ret
		if (i>=28&&i<38)//for port C
      f2:	fa 01       	movw	r30, r20
      f4:	7c 97       	sbiw	r30, 0x1c	; 28
      f6:	3a 97       	sbiw	r30, 0x0a	; 10
      f8:	f0 f4       	brcc	.+60     	; 0x136 <out+0x90>
		{if (i==a){uint8_t tmp =i-30;DDRC |=(1<<tmp);if (b=='h'||b=='H'){PORTC |=(1<<tmp);break;} else{PORTC &=~(1<<tmp);break;}}}
      fa:	e8 2f       	mov	r30, r24
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	2e 17       	cp	r18, r30
     100:	3f 07       	cpc	r19, r31
     102:	c9 f4       	brne	.+50     	; 0x136 <out+0x90>
     104:	2e 51       	subi	r18, 0x1E	; 30
     106:	37 b1       	in	r19, 0x07	; 7
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	02 c0       	rjmp	.+4      	; 0x112 <out+0x6c>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	2a 95       	dec	r18
     114:	e2 f7       	brpl	.-8      	; 0x10e <out+0x68>
     116:	23 2f       	mov	r18, r19
     118:	28 2b       	or	r18, r24
     11a:	27 b9       	out	0x07, r18	; 7
     11c:	68 36       	cpi	r22, 0x68	; 104
     11e:	11 f0       	breq	.+4      	; 0x124 <out+0x7e>
     120:	68 34       	cpi	r22, 0x48	; 72
     122:	21 f4       	brne	.+8      	; 0x12c <out+0x86>
     124:	98 b1       	in	r25, 0x08	; 8
     126:	89 2b       	or	r24, r25
     128:	88 b9       	out	0x08, r24	; 8
     12a:	08 95       	ret
     12c:	98 b1       	in	r25, 0x08	; 8
     12e:	80 95       	com	r24
     130:	89 23       	and	r24, r25
     132:	88 b9       	out	0x08, r24	; 8
     134:	08 95       	ret
		if (i>=38&&i<48)//for port D
     136:	46 52       	subi	r20, 0x26	; 38
     138:	51 09       	sbc	r21, r1
     13a:	4a 30       	cpi	r20, 0x0A	; 10
     13c:	51 05       	cpc	r21, r1
     13e:	f0 f4       	brcc	.+60     	; 0x17c <out+0xd6>
		{if (i==a){uint8_t tmp =i-40;DDRD |=(1<<tmp);if (b=='h'||b=='H'){PORTD |=(1<<tmp);break;} else{PORTD &=~(1<<tmp);break;}}}
     140:	48 2f       	mov	r20, r24
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	24 17       	cp	r18, r20
     146:	35 07       	cpc	r19, r21
     148:	c9 f4       	brne	.+50     	; 0x17c <out+0xd6>
     14a:	28 52       	subi	r18, 0x28	; 40
     14c:	3a b1       	in	r19, 0x0a	; 10
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <out+0xb2>
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	2a 95       	dec	r18
     15a:	e2 f7       	brpl	.-8      	; 0x154 <out+0xae>
     15c:	23 2f       	mov	r18, r19
     15e:	28 2b       	or	r18, r24
     160:	2a b9       	out	0x0a, r18	; 10
     162:	68 36       	cpi	r22, 0x68	; 104
     164:	11 f0       	breq	.+4      	; 0x16a <out+0xc4>
     166:	68 34       	cpi	r22, 0x48	; 72
     168:	21 f4       	brne	.+8      	; 0x172 <out+0xcc>
     16a:	9b b1       	in	r25, 0x0b	; 11
     16c:	89 2b       	or	r24, r25
     16e:	8b b9       	out	0x0b, r24	; 11
     170:	08 95       	ret
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	80 95       	com	r24
     176:	89 23       	and	r24, r25
     178:	8b b9       	out	0x0b, r24	; 11
     17a:	08 95       	ret
#define D5 45
#define D6 46
#define D7 47
void out(uint8_t a,char b)
{
	for (int i=10;i<48;i++)
     17c:	2f 5f       	subi	r18, 0xFF	; 255
     17e:	3f 4f       	sbci	r19, 0xFF	; 255
     180:	20 33       	cpi	r18, 0x30	; 48
     182:	31 05       	cpc	r19, r1
     184:	0c f4       	brge	.+2      	; 0x188 <out+0xe2>
     186:	92 cf       	rjmp	.-220    	; 0xac <out+0x6>
     188:	08 95       	ret

0000018a <UART_init>:


void UART_init()
{
	  uint16_t baud_config = 103;                             //for 16 MHZ => 115200 Baud Rate   
	  UCSR0C |= (1<<UCSZ01)   |  (1<<UCSZ00) ;               //data size 8 bit       
     18a:	e2 ec       	ldi	r30, 0xC2	; 194
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	86 60       	ori	r24, 0x06	; 6
     192:	80 83       	st	Z, r24
	  UBRR0L  = (uint8_t) baud_config;
     194:	87 e6       	ldi	r24, 0x67	; 103
     196:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	  UBRR0H  = (uint8_t) (baud_config>>8);
     19a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	  UCSR0B |= (1<<TXEN0) |  (1<<RXEN0) ;	
     19e:	e1 ec       	ldi	r30, 0xC1	; 193
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	88 61       	ori	r24, 0x18	; 24
     1a6:	80 83       	st	Z, r24
     1a8:	08 95       	ret

000001aa <UATR_SEND>:
void UATR_SEND(char x )
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
     1aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1ae:	95 ff       	sbrs	r25, 5
     1b0:	fc cf       	rjmp	.-8      	; 0x1aa <UATR_SEND>
	UDR0 = x;
     1b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     1b6:	08 95       	ret

000001b8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     1be:	83 ef       	ldi	r24, 0xF3	; 243
     1c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     1c4:	8b e0       	ldi	r24, 0x0B	; 11
     1c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     1ca:	ef e6       	ldi	r30, 0x6F	; 111
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	82 60       	ori	r24, 0x02	; 2
     1d2:	80 83       	st	Z, r24
     1d4:	08 95       	ret

000001d6 <pxPortInitialiseStack>:
     1d6:	31 e1       	ldi	r19, 0x11	; 17
     1d8:	fc 01       	movw	r30, r24
     1da:	30 83       	st	Z, r19
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	22 e2       	ldi	r18, 0x22	; 34
     1e0:	20 83       	st	Z, r18
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	a3 e3       	ldi	r26, 0x33	; 51
     1e6:	a0 83       	st	Z, r26
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	60 83       	st	Z, r22
     1ec:	31 97       	sbiw	r30, 0x01	; 1
     1ee:	70 83       	st	Z, r23
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	10 82       	st	Z, r1
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	60 e8       	ldi	r22, 0x80	; 128
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	10 82       	st	Z, r1
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	60 83       	st	Z, r22
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	63 e0       	ldi	r22, 0x03	; 3
     208:	60 83       	st	Z, r22
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	64 e0       	ldi	r22, 0x04	; 4
     20e:	60 83       	st	Z, r22
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	65 e0       	ldi	r22, 0x05	; 5
     214:	60 83       	st	Z, r22
     216:	31 97       	sbiw	r30, 0x01	; 1
     218:	66 e0       	ldi	r22, 0x06	; 6
     21a:	60 83       	st	Z, r22
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	67 e0       	ldi	r22, 0x07	; 7
     220:	60 83       	st	Z, r22
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	68 e0       	ldi	r22, 0x08	; 8
     226:	60 83       	st	Z, r22
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	69 e0       	ldi	r22, 0x09	; 9
     22c:	60 83       	st	Z, r22
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	60 e1       	ldi	r22, 0x10	; 16
     232:	60 83       	st	Z, r22
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	30 83       	st	Z, r19
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	32 e1       	ldi	r19, 0x12	; 18
     23c:	30 83       	st	Z, r19
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	33 e1       	ldi	r19, 0x13	; 19
     242:	30 83       	st	Z, r19
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	34 e1       	ldi	r19, 0x14	; 20
     248:	30 83       	st	Z, r19
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	35 e1       	ldi	r19, 0x15	; 21
     24e:	30 83       	st	Z, r19
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	36 e1       	ldi	r19, 0x16	; 22
     254:	30 83       	st	Z, r19
     256:	31 97       	sbiw	r30, 0x01	; 1
     258:	37 e1       	ldi	r19, 0x17	; 23
     25a:	30 83       	st	Z, r19
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	38 e1       	ldi	r19, 0x18	; 24
     260:	30 83       	st	Z, r19
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	39 e1       	ldi	r19, 0x19	; 25
     266:	30 83       	st	Z, r19
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	30 e2       	ldi	r19, 0x20	; 32
     26c:	30 83       	st	Z, r19
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	31 e2       	ldi	r19, 0x21	; 33
     272:	30 83       	st	Z, r19
     274:	31 97       	sbiw	r30, 0x01	; 1
     276:	20 83       	st	Z, r18
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	23 e2       	ldi	r18, 0x23	; 35
     27c:	20 83       	st	Z, r18
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	40 83       	st	Z, r20
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	50 83       	st	Z, r21
     286:	31 97       	sbiw	r30, 0x01	; 1
     288:	26 e2       	ldi	r18, 0x26	; 38
     28a:	20 83       	st	Z, r18
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	27 e2       	ldi	r18, 0x27	; 39
     290:	20 83       	st	Z, r18
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	28 e2       	ldi	r18, 0x28	; 40
     296:	20 83       	st	Z, r18
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	29 e2       	ldi	r18, 0x29	; 41
     29c:	20 83       	st	Z, r18
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	20 e3       	ldi	r18, 0x30	; 48
     2a2:	20 83       	st	Z, r18
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	21 e3       	ldi	r18, 0x31	; 49
     2a8:	20 83       	st	Z, r18
     2aa:	86 97       	sbiw	r24, 0x26	; 38
     2ac:	08 95       	ret

000002ae <xPortStartScheduler>:
     2ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <prvSetupTimerInterrupt>
     2b2:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     2b6:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     2ba:	cd 91       	ld	r28, X+
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	dd 91       	ld	r29, X+
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	bf 91       	pop	r27
     2cc:	af 91       	pop	r26
     2ce:	9f 91       	pop	r25
     2d0:	8f 91       	pop	r24
     2d2:	7f 91       	pop	r23
     2d4:	6f 91       	pop	r22
     2d6:	5f 91       	pop	r21
     2d8:	4f 91       	pop	r20
     2da:	3f 91       	pop	r19
     2dc:	2f 91       	pop	r18
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
     2ea:	bf 90       	pop	r11
     2ec:	af 90       	pop	r10
     2ee:	9f 90       	pop	r9
     2f0:	8f 90       	pop	r8
     2f2:	7f 90       	pop	r7
     2f4:	6f 90       	pop	r6
     2f6:	5f 90       	pop	r5
     2f8:	4f 90       	pop	r4
     2fa:	3f 90       	pop	r3
     2fc:	2f 90       	pop	r2
     2fe:	1f 90       	pop	r1
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	08 95       	ret
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	08 95       	ret

0000030c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	0f 92       	push	r0
     314:	1f 92       	push	r1
     316:	11 24       	eor	r1, r1
     318:	2f 92       	push	r2
     31a:	3f 92       	push	r3
     31c:	4f 92       	push	r4
     31e:	5f 92       	push	r5
     320:	6f 92       	push	r6
     322:	7f 92       	push	r7
     324:	8f 92       	push	r8
     326:	9f 92       	push	r9
     328:	af 92       	push	r10
     32a:	bf 92       	push	r11
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	2f 93       	push	r18
     33a:	3f 93       	push	r19
     33c:	4f 93       	push	r20
     33e:	5f 93       	push	r21
     340:	6f 93       	push	r22
     342:	7f 93       	push	r23
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	af 93       	push	r26
     34a:	bf 93       	push	r27
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
     354:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     358:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     35c:	0d b6       	in	r0, 0x3d	; 61
     35e:	0d 92       	st	X+, r0
     360:	0e b6       	in	r0, 0x3e	; 62
     362:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     364:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     368:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     36c:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     370:	cd 91       	ld	r28, X+
     372:	cd bf       	out	0x3d, r28	; 61
     374:	dd 91       	ld	r29, X+
     376:	de bf       	out	0x3e, r29	; 62
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	6f 90       	pop	r6
     3ac:	5f 90       	pop	r5
     3ae:	4f 90       	pop	r4
     3b0:	3f 90       	pop	r3
     3b2:	2f 90       	pop	r2
     3b4:	1f 90       	pop	r1
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0

	asm volatile ( "ret" );
     3bc:	08 95       	ret

000003be <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	0f 92       	push	r0
     3c6:	1f 92       	push	r1
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 92       	push	r2
     3cc:	3f 92       	push	r3
     3ce:	4f 92       	push	r4
     3d0:	5f 92       	push	r5
     3d2:	6f 92       	push	r6
     3d4:	7f 92       	push	r7
     3d6:	8f 92       	push	r8
     3d8:	9f 92       	push	r9
     3da:	af 92       	push	r10
     3dc:	bf 92       	push	r11
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	2f 93       	push	r18
     3ec:	3f 93       	push	r19
     3ee:	4f 93       	push	r20
     3f0:	5f 93       	push	r21
     3f2:	6f 93       	push	r22
     3f4:	7f 93       	push	r23
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
     3fa:	af 93       	push	r26
     3fc:	bf 93       	push	r27
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ef 93       	push	r30
     404:	ff 93       	push	r31
     406:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     40a:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     40e:	0d b6       	in	r0, 0x3d	; 61
     410:	0d 92       	st	X+, r0
     412:	0e b6       	in	r0, 0x3e	; 62
     414:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     416:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xTaskIncrementTick>
     41a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     41c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     420:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     424:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     428:	cd 91       	ld	r28, X+
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	dd 91       	ld	r29, X+
     42e:	de bf       	out	0x3e, r29	; 62
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	7f 90       	pop	r7
     462:	6f 90       	pop	r6
     464:	5f 90       	pop	r5
     466:	4f 90       	pop	r4
     468:	3f 90       	pop	r3
     46a:	2f 90       	pop	r2
     46c:	1f 90       	pop	r1
     46e:	0f 90       	pop	r0
     470:	0f be       	out	0x3f, r0	; 63
     472:	0f 90       	pop	r0

	asm volatile ( "ret" );
     474:	08 95       	ret

00000476 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     476:	0e 94 df 01 	call	0x3be	; 0x3be <vPortYieldFromTick>
		asm volatile ( "reti" );
     47a:	18 95       	reti

0000047c <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     47c:	a3 e9       	ldi	r26, 0x93	; 147
     47e:	b1 e0       	ldi	r27, 0x01	; 1
     480:	e7 e9       	ldi	r30, 0x97	; 151
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	fc 93       	st	X, r31
     488:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     48a:	13 96       	adiw	r26, 0x03	; 3
     48c:	1c 92       	st	X, r1
     48e:	1e 92       	st	-X, r1
     490:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     492:	af e8       	ldi	r26, 0x8F	; 143
     494:	b1 e0       	ldi	r27, 0x01	; 1
     496:	8b ed       	ldi	r24, 0xDB	; 219
     498:	95 e0       	ldi	r25, 0x05	; 5
     49a:	13 96       	adiw	r26, 0x03	; 3
     49c:	9c 93       	st	X, r25
     49e:	8e 93       	st	-X, r24
     4a0:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     4a2:	11 96       	adiw	r26, 0x01	; 1
     4a4:	1c 92       	st	X, r1
     4a6:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     4a8:	93 83       	std	Z+3, r25	; 0x03
     4aa:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     4ac:	b1 83       	std	Z+1, r27	; 0x01
     4ae:	a0 83       	st	Z, r26
     4b0:	08 95       	ret

000004b2 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4c0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     4c4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
     4c8:	81 11       	cpse	r24, r1
     4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     4cc:	0e 94 3e 02 	call	0x47c	; 0x47c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     4d6:	20 97       	sbiw	r28, 0x00	; 0
     4d8:	71 f0       	breq	.+28     	; 0x4f6 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     4da:	ce 01       	movw	r24, r28
     4dc:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     4de:	c8 17       	cp	r28, r24
     4e0:	d9 07       	cpc	r29, r25
     4e2:	38 f4       	brcc	.+14     	; 0x4f2 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     4e4:	25 96       	adiw	r28, 0x05	; 5
     4e6:	8c 17       	cp	r24, r28
     4e8:	9d 07       	cpc	r25, r29
     4ea:	28 f0       	brcs	.+10     	; 0x4f6 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     4ec:	c0 e0       	ldi	r28, 0x00	; 0
     4ee:	d0 e0       	ldi	r29, 0x00	; 0
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     4f6:	20 97       	sbiw	r28, 0x00	; 0
     4f8:	09 f4       	brne	.+2      	; 0x4fc <pvPortMalloc+0x4a>
     4fa:	5e c0       	rjmp	.+188    	; 0x5b8 <pvPortMalloc+0x106>
     4fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     500:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     504:	2c 17       	cp	r18, r28
     506:	3d 07       	cpc	r19, r29
     508:	08 f4       	brcc	.+2      	; 0x50c <pvPortMalloc+0x5a>
     50a:	59 c0       	rjmp	.+178    	; 0x5be <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     50c:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <xStart>
     510:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     514:	a3 e9       	ldi	r26, 0x93	; 147
     516:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     518:	02 c0       	rjmp	.+4      	; 0x51e <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     51a:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     51c:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	8c 17       	cp	r24, r28
     524:	9d 07       	cpc	r25, r29
     526:	20 f4       	brcc	.+8      	; 0x530 <pvPortMalloc+0x7e>
     528:	80 81       	ld	r24, Z
     52a:	91 81       	ldd	r25, Z+1	; 0x01
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	a9 f7       	brne	.-22     	; 0x51a <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	ef 38       	cpi	r30, 0x8F	; 143
     534:	f8 07       	cpc	r31, r24
     536:	09 f4       	brne	.+2      	; 0x53a <pvPortMalloc+0x88>
     538:	45 c0       	rjmp	.+138    	; 0x5c4 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     53a:	0d 91       	ld	r16, X+
     53c:	1c 91       	ld	r17, X
     53e:	11 97       	sbiw	r26, 0x01	; 1
     540:	0c 5f       	subi	r16, 0xFC	; 252
     542:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     544:	80 81       	ld	r24, Z
     546:	91 81       	ldd	r25, Z+1	; 0x01
     548:	8d 93       	st	X+, r24
     54a:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	93 81       	ldd	r25, Z+3	; 0x03
     550:	8c 1b       	sub	r24, r28
     552:	9d 0b       	sbc	r25, r29
     554:	89 30       	cpi	r24, 0x09	; 9
     556:	91 05       	cpc	r25, r1
     558:	30 f1       	brcs	.+76     	; 0x5a6 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     55a:	bf 01       	movw	r22, r30
     55c:	6c 0f       	add	r22, r28
     55e:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     560:	db 01       	movw	r26, r22
     562:	13 96       	adiw	r26, 0x03	; 3
     564:	9c 93       	st	X, r25
     566:	8e 93       	st	-X, r24
     568:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     56a:	d3 83       	std	Z+3, r29	; 0x03
     56c:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	4d 91       	ld	r20, X+
     572:	5c 91       	ld	r21, X
     574:	13 97       	sbiw	r26, 0x03	; 3
     576:	0f 2e       	mov	r0, r31
     578:	f3 e9       	ldi	r31, 0x93	; 147
     57a:	ef 2e       	mov	r14, r31
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	ff 2e       	mov	r15, r31
     580:	f0 2d       	mov	r31, r0
     582:	01 c0       	rjmp	.+2      	; 0x586 <pvPortMalloc+0xd4>
     584:	7d 01       	movw	r14, r26
     586:	e7 01       	movw	r28, r14
     588:	a8 81       	ld	r26, Y
     58a:	b9 81       	ldd	r27, Y+1	; 0x01
     58c:	12 96       	adiw	r26, 0x02	; 2
     58e:	8d 91       	ld	r24, X+
     590:	9c 91       	ld	r25, X
     592:	13 97       	sbiw	r26, 0x03	; 3
     594:	84 17       	cp	r24, r20
     596:	95 07       	cpc	r25, r21
     598:	a8 f3       	brcs	.-22     	; 0x584 <pvPortMalloc+0xd2>
     59a:	eb 01       	movw	r28, r22
     59c:	b9 83       	std	Y+1, r27	; 0x01
     59e:	a8 83       	st	Y, r26
     5a0:	d7 01       	movw	r26, r14
     5a2:	6d 93       	st	X+, r22
     5a4:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     5a6:	82 81       	ldd	r24, Z+2	; 0x02
     5a8:	93 81       	ldd	r25, Z+3	; 0x03
     5aa:	28 1b       	sub	r18, r24
     5ac:	39 0b       	sbc	r19, r25
     5ae:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
     5b2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
     5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     5b8:	00 e0       	ldi	r16, 0x00	; 0
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <pvPortMalloc+0x116>
     5be:	00 e0       	ldi	r16, 0x00	; 0
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <pvPortMalloc+0x116>
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     5c8:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     5cc:	c8 01       	movw	r24, r16
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	41 f1       	breq	.+80     	; 0x638 <vPortFree+0x5c>
     5e8:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     5ea:	8c 01       	movw	r16, r24
     5ec:	04 50       	subi	r16, 0x04	; 4
     5ee:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     5f0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5f4:	f8 01       	movw	r30, r16
     5f6:	42 81       	ldd	r20, Z+2	; 0x02
     5f8:	53 81       	ldd	r21, Z+3	; 0x03
     5fa:	a3 e9       	ldi	r26, 0x93	; 147
     5fc:	b1 e0       	ldi	r27, 0x01	; 1
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <vPortFree+0x26>
     600:	df 01       	movw	r26, r30
     602:	ed 91       	ld	r30, X+
     604:	fc 91       	ld	r31, X
     606:	11 97       	sbiw	r26, 0x01	; 1
     608:	22 81       	ldd	r18, Z+2	; 0x02
     60a:	33 81       	ldd	r19, Z+3	; 0x03
     60c:	24 17       	cp	r18, r20
     60e:	35 07       	cpc	r19, r21
     610:	b8 f3       	brcs	.-18     	; 0x600 <vPortFree+0x24>
     612:	24 97       	sbiw	r28, 0x04	; 4
     614:	f9 83       	std	Y+1, r31	; 0x01
     616:	e8 83       	st	Y, r30
     618:	0d 93       	st	X+, r16
     61a:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	9b 81       	ldd	r25, Y+3	; 0x03
     620:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     624:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
     62c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     630:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     634:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
    }
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     642:	fc 01       	movw	r30, r24
     644:	03 96       	adiw	r24, 0x03	; 3
     646:	92 83       	std	Z+2, r25	; 0x02
     648:	81 83       	std	Z+1, r24	; 0x01
     64a:	2f ef       	ldi	r18, 0xFF	; 255
     64c:	3f ef       	ldi	r19, 0xFF	; 255
     64e:	34 83       	std	Z+4, r19	; 0x04
     650:	23 83       	std	Z+3, r18	; 0x03
     652:	96 83       	std	Z+6, r25	; 0x06
     654:	85 83       	std	Z+5, r24	; 0x05
     656:	90 87       	std	Z+8, r25	; 0x08
     658:	87 83       	std	Z+7, r24	; 0x07
     65a:	10 82       	st	Z, r1
     65c:	08 95       	ret

0000065e <vListInitialiseItem>:
     65e:	fc 01       	movw	r30, r24
     660:	11 86       	std	Z+9, r1	; 0x09
     662:	10 86       	std	Z+8, r1	; 0x08
     664:	08 95       	ret

00000666 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     66c:	48 81       	ld	r20, Y
     66e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     670:	4f 3f       	cpi	r20, 0xFF	; 255
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	52 07       	cpc	r21, r18
     676:	21 f4       	brne	.+8      	; 0x680 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     678:	fc 01       	movw	r30, r24
     67a:	a7 81       	ldd	r26, Z+7	; 0x07
     67c:	b0 85       	ldd	r27, Z+8	; 0x08
     67e:	0d c0       	rjmp	.+26     	; 0x69a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     680:	dc 01       	movw	r26, r24
     682:	13 96       	adiw	r26, 0x03	; 3
     684:	01 c0       	rjmp	.+2      	; 0x688 <vListInsert+0x22>
     686:	df 01       	movw	r26, r30
     688:	12 96       	adiw	r26, 0x02	; 2
     68a:	ed 91       	ld	r30, X+
     68c:	fc 91       	ld	r31, X
     68e:	13 97       	sbiw	r26, 0x03	; 3
     690:	20 81       	ld	r18, Z
     692:	31 81       	ldd	r19, Z+1	; 0x01
     694:	42 17       	cp	r20, r18
     696:	53 07       	cpc	r21, r19
     698:	b0 f7       	brcc	.-20     	; 0x686 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     69a:	12 96       	adiw	r26, 0x02	; 2
     69c:	ed 91       	ld	r30, X+
     69e:	fc 91       	ld	r31, X
     6a0:	13 97       	sbiw	r26, 0x03	; 3
     6a2:	fb 83       	std	Y+3, r31	; 0x03
     6a4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6a6:	d5 83       	std	Z+5, r29	; 0x05
     6a8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     6aa:	bd 83       	std	Y+5, r27	; 0x05
     6ac:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     6ae:	13 96       	adiw	r26, 0x03	; 3
     6b0:	dc 93       	st	X, r29
     6b2:	ce 93       	st	-X, r28
     6b4:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     6b6:	99 87       	std	Y+9, r25	; 0x09
     6b8:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 81       	ld	r18, Z
     6be:	2f 5f       	subi	r18, 0xFF	; 255
     6c0:	20 83       	st	Z, r18
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     6ce:	a0 85       	ldd	r26, Z+8	; 0x08
     6d0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6d2:	c2 81       	ldd	r28, Z+2	; 0x02
     6d4:	d3 81       	ldd	r29, Z+3	; 0x03
     6d6:	84 81       	ldd	r24, Z+4	; 0x04
     6d8:	95 81       	ldd	r25, Z+5	; 0x05
     6da:	9d 83       	std	Y+5, r25	; 0x05
     6dc:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6de:	c4 81       	ldd	r28, Z+4	; 0x04
     6e0:	d5 81       	ldd	r29, Z+5	; 0x05
     6e2:	82 81       	ldd	r24, Z+2	; 0x02
     6e4:	93 81       	ldd	r25, Z+3	; 0x03
     6e6:	9b 83       	std	Y+3, r25	; 0x03
     6e8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6ea:	11 96       	adiw	r26, 0x01	; 1
     6ec:	8d 91       	ld	r24, X+
     6ee:	9c 91       	ld	r25, X
     6f0:	12 97       	sbiw	r26, 0x02	; 2
     6f2:	e8 17       	cp	r30, r24
     6f4:	f9 07       	cpc	r31, r25
     6f6:	31 f4       	brne	.+12     	; 0x704 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     6f8:	84 81       	ldd	r24, Z+4	; 0x04
     6fa:	95 81       	ldd	r25, Z+5	; 0x05
     6fc:	12 96       	adiw	r26, 0x02	; 2
     6fe:	9c 93       	st	X, r25
     700:	8e 93       	st	-X, r24
     702:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     704:	11 86       	std	Z+9, r1	; 0x09
     706:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     708:	8c 91       	ld	r24, X
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     70e:	8c 91       	ld	r24, X
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     716:	dc 01       	movw	r26, r24
     718:	51 96       	adiw	r26, 0x11	; 17
     71a:	2c 91       	ld	r18, X
     71c:	51 97       	sbiw	r26, 0x11	; 17
     71e:	22 23       	and	r18, r18
     720:	41 f0       	breq	.+16     	; 0x732 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     722:	56 96       	adiw	r26, 0x16	; 22
     724:	ed 91       	ld	r30, X+
     726:	fc 91       	ld	r31, X
     728:	57 97       	sbiw	r26, 0x17	; 23
     72a:	90 81       	ld	r25, Z
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	89 1b       	sub	r24, r25
     730:	08 95       	ret
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	08 95       	ret

00000736 <prvIsQueueEmpty>:
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	0f 92       	push	r0
     73c:	fc 01       	movw	r30, r24
     73e:	82 8d       	ldd	r24, Z+26	; 0x1a
     740:	81 11       	cpse	r24, r1
     742:	02 c0       	rjmp	.+4      	; 0x748 <prvIsQueueEmpty+0x12>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	01 c0       	rjmp	.+2      	; 0x74a <prvIsQueueEmpty+0x14>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	08 95       	ret

00000750 <prvIsQueueFull>:
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	0f 92       	push	r0
     756:	fc 01       	movw	r30, r24
     758:	22 8d       	ldd	r18, Z+26	; 0x1a
     75a:	83 8d       	ldd	r24, Z+27	; 0x1b
     75c:	28 13       	cpse	r18, r24
     75e:	02 c0       	rjmp	.+4      	; 0x764 <prvIsQueueFull+0x14>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	01 c0       	rjmp	.+2      	; 0x766 <prvIsQueueFull+0x16>
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	08 95       	ret

0000076c <prvCopyDataToQueue>:
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	ec 01       	movw	r28, r24
     776:	04 2f       	mov	r16, r20
     778:	1a 8d       	ldd	r17, Y+26	; 0x1a
     77a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     77c:	41 11       	cpse	r20, r1
     77e:	0c c0       	rjmp	.+24     	; 0x798 <prvCopyDataToQueue+0x2c>
     780:	88 81       	ld	r24, Y
     782:	99 81       	ldd	r25, Y+1	; 0x01
     784:	89 2b       	or	r24, r25
     786:	09 f0       	breq	.+2      	; 0x78a <prvCopyDataToQueue+0x1e>
     788:	42 c0       	rjmp	.+132    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     78a:	8c 81       	ldd	r24, Y+4	; 0x04
     78c:	9d 81       	ldd	r25, Y+5	; 0x05
     78e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <xTaskPriorityDisinherit>
     792:	1d 82       	std	Y+5, r1	; 0x05
     794:	1c 82       	std	Y+4, r1	; 0x04
     796:	42 c0       	rjmp	.+132    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     798:	01 11       	cpse	r16, r1
     79a:	17 c0       	rjmp	.+46     	; 0x7ca <prvCopyDataToQueue+0x5e>
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	9b 81       	ldd	r25, Y+3	; 0x03
     7a2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <memcpy>
     7a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	9b 81       	ldd	r25, Y+3	; 0x03
     7ac:	82 0f       	add	r24, r18
     7ae:	91 1d       	adc	r25, r1
     7b0:	9b 83       	std	Y+3, r25	; 0x03
     7b2:	8a 83       	std	Y+2, r24	; 0x02
     7b4:	2c 81       	ldd	r18, Y+4	; 0x04
     7b6:	3d 81       	ldd	r19, Y+5	; 0x05
     7b8:	82 17       	cp	r24, r18
     7ba:	93 07       	cpc	r25, r19
     7bc:	50 f1       	brcs	.+84     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7be:	88 81       	ld	r24, Y
     7c0:	99 81       	ldd	r25, Y+1	; 0x01
     7c2:	9b 83       	std	Y+3, r25	; 0x03
     7c4:	8a 83       	std	Y+2, r24	; 0x02
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	29 c0       	rjmp	.+82     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	8e 81       	ldd	r24, Y+6	; 0x06
     7ce:	9f 81       	ldd	r25, Y+7	; 0x07
     7d0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <memcpy>
     7d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	91 95       	neg	r25
     7da:	81 95       	neg	r24
     7dc:	91 09       	sbc	r25, r1
     7de:	2e 81       	ldd	r18, Y+6	; 0x06
     7e0:	3f 81       	ldd	r19, Y+7	; 0x07
     7e2:	28 0f       	add	r18, r24
     7e4:	39 1f       	adc	r19, r25
     7e6:	3f 83       	std	Y+7, r19	; 0x07
     7e8:	2e 83       	std	Y+6, r18	; 0x06
     7ea:	48 81       	ld	r20, Y
     7ec:	59 81       	ldd	r21, Y+1	; 0x01
     7ee:	24 17       	cp	r18, r20
     7f0:	35 07       	cpc	r19, r21
     7f2:	30 f4       	brcc	.+12     	; 0x800 <__DATA_REGION_LENGTH__>
     7f4:	2c 81       	ldd	r18, Y+4	; 0x04
     7f6:	3d 81       	ldd	r19, Y+5	; 0x05
     7f8:	82 0f       	add	r24, r18
     7fa:	93 1f       	adc	r25, r19
     7fc:	9f 83       	std	Y+7, r25	; 0x07
     7fe:	8e 83       	std	Y+6, r24	; 0x06
     800:	02 30       	cpi	r16, 0x02	; 2
     802:	49 f4       	brne	.+18     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     804:	11 23       	and	r17, r17
     806:	49 f0       	breq	.+18     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     808:	11 50       	subi	r17, 0x01	; 1
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	07 c0       	rjmp	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	05 c0       	rjmp	.+10     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	03 c0       	rjmp	.+6      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	01 c0       	rjmp	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	1f 5f       	subi	r17, 0xFF	; 255
     81e:	1a 8f       	std	Y+26, r17	; 0x1a
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <prvUnlockQueue>:
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	ec 01       	movw	r28, r24
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	0f 92       	push	r0
     838:	1e 8d       	ldd	r17, Y+30	; 0x1e
     83a:	0b c0       	rjmp	.+22     	; 0x852 <prvUnlockQueue+0x28>
     83c:	89 89       	ldd	r24, Y+17	; 0x11
     83e:	88 23       	and	r24, r24
     840:	51 f0       	breq	.+20     	; 0x856 <prvUnlockQueue+0x2c>
     842:	ce 01       	movw	r24, r28
     844:	41 96       	adiw	r24, 0x11	; 17
     846:	0e 94 46 0b 	call	0x168c	; 0x168c <xTaskRemoveFromEventList>
     84a:	81 11       	cpse	r24, r1
     84c:	0e 94 4d 0c 	call	0x189a	; 0x189a <vTaskMissedYield>
     850:	11 50       	subi	r17, 0x01	; 1
     852:	11 16       	cp	r1, r17
     854:	9c f3       	brlt	.-26     	; 0x83c <prvUnlockQueue+0x12>
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	8e 8f       	std	Y+30, r24	; 0x1e
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	0f 92       	push	r0
     864:	1d 8d       	ldd	r17, Y+29	; 0x1d
     866:	0b c0       	rjmp	.+22     	; 0x87e <prvUnlockQueue+0x54>
     868:	88 85       	ldd	r24, Y+8	; 0x08
     86a:	88 23       	and	r24, r24
     86c:	51 f0       	breq	.+20     	; 0x882 <prvUnlockQueue+0x58>
     86e:	ce 01       	movw	r24, r28
     870:	08 96       	adiw	r24, 0x08	; 8
     872:	0e 94 46 0b 	call	0x168c	; 0x168c <xTaskRemoveFromEventList>
     876:	81 11       	cpse	r24, r1
     878:	0e 94 4d 0c 	call	0x189a	; 0x189a <vTaskMissedYield>
     87c:	11 50       	subi	r17, 0x01	; 1
     87e:	11 16       	cp	r1, r17
     880:	9c f3       	brlt	.-26     	; 0x868 <prvUnlockQueue+0x3e>
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	8d 8f       	std	Y+29, r24	; 0x1d
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <xQueueGenericReset>:
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	fc 01       	movw	r30, r24
     89c:	36 2f       	mov	r19, r22
     89e:	89 2b       	or	r24, r25
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <xQueueGenericReset+0x12>
     8a2:	4d c0       	rjmp	.+154    	; 0x93e <__stack+0x3f>
     8a4:	23 8d       	ldd	r18, Z+27	; 0x1b
     8a6:	22 23       	and	r18, r18
     8a8:	09 f4       	brne	.+2      	; 0x8ac <xQueueGenericReset+0x1a>
     8aa:	4b c0       	rjmp	.+150    	; 0x942 <__stack+0x43>
     8ac:	02 2f       	mov	r16, r18
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	9f ef       	ldi	r25, 0xFF	; 255
     8b4:	b8 01       	movw	r22, r16
     8b6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodhi4>
     8ba:	44 8d       	ldd	r20, Z+28	; 0x1c
     8bc:	84 2f       	mov	r24, r20
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	68 17       	cp	r22, r24
     8c2:	79 07       	cpc	r23, r25
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <xQueueGenericReset+0x36>
     8c6:	3f c0       	rjmp	.+126    	; 0x946 <__stack+0x47>
     8c8:	ef 01       	movw	r28, r30
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	0f 92       	push	r0
     8d0:	60 81       	ld	r22, Z
     8d2:	71 81       	ldd	r23, Z+1	; 0x01
     8d4:	fb 01       	movw	r30, r22
     8d6:	24 9f       	mul	r18, r20
     8d8:	e0 0d       	add	r30, r0
     8da:	f1 1d       	adc	r31, r1
     8dc:	11 24       	eor	r1, r1
     8de:	fd 83       	std	Y+5, r31	; 0x05
     8e0:	ec 83       	std	Y+4, r30	; 0x04
     8e2:	1a 8e       	std	Y+26, r1	; 0x1a
     8e4:	7b 83       	std	Y+3, r23	; 0x03
     8e6:	6a 83       	std	Y+2, r22	; 0x02
     8e8:	01 50       	subi	r16, 0x01	; 1
     8ea:	11 09       	sbc	r17, r1
     8ec:	80 9f       	mul	r24, r16
     8ee:	a0 01       	movw	r20, r0
     8f0:	81 9f       	mul	r24, r17
     8f2:	50 0d       	add	r21, r0
     8f4:	90 9f       	mul	r25, r16
     8f6:	50 0d       	add	r21, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	cb 01       	movw	r24, r22
     8fc:	84 0f       	add	r24, r20
     8fe:	95 1f       	adc	r25, r21
     900:	9f 83       	std	Y+7, r25	; 0x07
     902:	8e 83       	std	Y+6, r24	; 0x06
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	8d 8f       	std	Y+29, r24	; 0x1d
     908:	8e 8f       	std	Y+30, r24	; 0x1e
     90a:	31 11       	cpse	r19, r1
     90c:	0c c0       	rjmp	.+24     	; 0x926 <__stack+0x27>
     90e:	88 85       	ldd	r24, Y+8	; 0x08
     910:	88 23       	and	r24, r24
     912:	89 f0       	breq	.+34     	; 0x936 <__stack+0x37>
     914:	ce 01       	movw	r24, r28
     916:	08 96       	adiw	r24, 0x08	; 8
     918:	0e 94 46 0b 	call	0x168c	; 0x168c <xTaskRemoveFromEventList>
     91c:	88 23       	and	r24, r24
     91e:	59 f0       	breq	.+22     	; 0x936 <__stack+0x37>
     920:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     924:	08 c0       	rjmp	.+16     	; 0x936 <__stack+0x37>
     926:	ce 01       	movw	r24, r28
     928:	08 96       	adiw	r24, 0x08	; 8
     92a:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     92e:	ce 01       	movw	r24, r28
     930:	41 96       	adiw	r24, 0x11	; 17
     932:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	05 c0       	rjmp	.+10     	; 0x948 <__stack+0x49>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0x49>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	01 c0       	rjmp	.+2      	; 0x948 <__stack+0x49>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <prvInitialiseNewQueue>:
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	f8 01       	movw	r30, r16
     958:	61 11       	cpse	r22, r1
     95a:	03 c0       	rjmp	.+6      	; 0x962 <prvInitialiseNewQueue+0x10>
     95c:	11 83       	std	Z+1, r17	; 0x01
     95e:	00 83       	st	Z, r16
     960:	02 c0       	rjmp	.+4      	; 0x966 <prvInitialiseNewQueue+0x14>
     962:	51 83       	std	Z+1, r21	; 0x01
     964:	40 83       	st	Z, r20
     966:	83 8f       	std	Z+27, r24	; 0x1b
     968:	64 8f       	std	Z+28, r22	; 0x1c
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	cf 01       	movw	r24, r30
     96e:	0e 94 49 04 	call	0x892	; 0x892 <xQueueGenericReset>
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <xQueueGenericCreate>:
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	38 2f       	mov	r19, r24
     988:	e6 2f       	mov	r30, r22
     98a:	88 23       	and	r24, r24
     98c:	29 f1       	breq	.+74     	; 0x9d8 <xQueueGenericCreate+0x60>
     98e:	68 2f       	mov	r22, r24
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	9f ef       	ldi	r25, 0xFF	; 255
     996:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodhi4>
     99a:	8e 2f       	mov	r24, r30
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	68 17       	cp	r22, r24
     9a0:	79 07       	cpc	r23, r25
     9a2:	e8 f0       	brcs	.+58     	; 0x9de <xQueueGenericCreate+0x66>
     9a4:	3e 9f       	mul	r19, r30
     9a6:	c0 01       	movw	r24, r0
     9a8:	11 24       	eor	r1, r1
     9aa:	81 3e       	cpi	r24, 0xE1	; 225
     9ac:	2f ef       	ldi	r18, 0xFF	; 255
     9ae:	92 07       	cpc	r25, r18
     9b0:	c8 f4       	brcc	.+50     	; 0x9e4 <xQueueGenericCreate+0x6c>
     9b2:	d4 2e       	mov	r13, r20
     9b4:	de 2f       	mov	r29, r30
     9b6:	c3 2f       	mov	r28, r19
     9b8:	4f 96       	adiw	r24, 0x1f	; 31
     9ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <pvPortMalloc>
     9be:	7c 01       	movw	r14, r24
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	91 f0       	breq	.+36     	; 0x9e8 <xQueueGenericCreate+0x70>
     9c4:	8c 01       	movw	r16, r24
     9c6:	2d 2d       	mov	r18, r13
     9c8:	ac 01       	movw	r20, r24
     9ca:	41 5e       	subi	r20, 0xE1	; 225
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	6d 2f       	mov	r22, r29
     9d0:	8c 2f       	mov	r24, r28
     9d2:	0e 94 a9 04 	call	0x952	; 0x952 <prvInitialiseNewQueue>
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <xQueueGenericCreate+0x70>
     9d8:	e1 2c       	mov	r14, r1
     9da:	f1 2c       	mov	r15, r1
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <xQueueGenericCreate+0x70>
     9de:	e1 2c       	mov	r14, r1
     9e0:	f1 2c       	mov	r15, r1
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <xQueueGenericCreate+0x70>
     9e4:	e1 2c       	mov	r14, r1
     9e6:	f1 2c       	mov	r15, r1
     9e8:	c7 01       	movw	r24, r14
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	08 95       	ret

000009fa <xQueueGenericSend>:
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <xQueueGenericSend+0x12>
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <xQueueGenericSend+0x14>
     a0e:	1f 92       	push	r1
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	8c 01       	movw	r16, r24
     a16:	7b 01       	movw	r14, r22
     a18:	5d 83       	std	Y+5, r21	; 0x05
     a1a:	4c 83       	std	Y+4, r20	; 0x04
     a1c:	c2 2e       	mov	r12, r18
     a1e:	d1 2c       	mov	r13, r1
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	0f 92       	push	r0
     a26:	f8 01       	movw	r30, r16
     a28:	92 8d       	ldd	r25, Z+26	; 0x1a
     a2a:	83 8d       	ldd	r24, Z+27	; 0x1b
     a2c:	98 17       	cp	r25, r24
     a2e:	18 f0       	brcs	.+6      	; 0xa36 <xQueueGenericSend+0x3c>
     a30:	f2 e0       	ldi	r31, 0x02	; 2
     a32:	cf 12       	cpse	r12, r31
     a34:	19 c0       	rjmp	.+50     	; 0xa68 <xQueueGenericSend+0x6e>
     a36:	4c 2d       	mov	r20, r12
     a38:	b7 01       	movw	r22, r14
     a3a:	c8 01       	movw	r24, r16
     a3c:	0e 94 b6 03 	call	0x76c	; 0x76c <prvCopyDataToQueue>
     a40:	f8 01       	movw	r30, r16
     a42:	91 89       	ldd	r25, Z+17	; 0x11
     a44:	99 23       	and	r25, r25
     a46:	49 f0       	breq	.+18     	; 0xa5a <xQueueGenericSend+0x60>
     a48:	c8 01       	movw	r24, r16
     a4a:	41 96       	adiw	r24, 0x11	; 17
     a4c:	0e 94 46 0b 	call	0x168c	; 0x168c <xTaskRemoveFromEventList>
     a50:	88 23       	and	r24, r24
     a52:	31 f0       	breq	.+12     	; 0xa60 <xQueueGenericSend+0x66>
     a54:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <xQueueGenericSend+0x66>
     a5a:	81 11       	cpse	r24, r1
     a5c:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	4d c0       	rjmp	.+154    	; 0xb02 <xQueueGenericSend+0x108>
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	9d 81       	ldd	r25, Y+5	; 0x05
     a6c:	89 2b       	or	r24, r25
     a6e:	21 f4       	brne	.+8      	; 0xa78 <xQueueGenericSend+0x7e>
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	45 c0       	rjmp	.+138    	; 0xb02 <xQueueGenericSend+0x108>
     a78:	d1 10       	cpse	r13, r1
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <xQueueGenericSend+0x8e>
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 03 0c 	call	0x1806	; 0x1806 <vTaskInternalSetTimeOutState>
     a84:	dd 24       	eor	r13, r13
     a86:	d3 94       	inc	r13
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <vTaskSuspendAll>
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	0f 92       	push	r0
     a96:	f8 01       	movw	r30, r16
     a98:	85 8d       	ldd	r24, Z+29	; 0x1d
     a9a:	8f 3f       	cpi	r24, 0xFF	; 255
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <xQueueGenericSend+0xa6>
     a9e:	15 8e       	std	Z+29, r1	; 0x1d
     aa0:	f8 01       	movw	r30, r16
     aa2:	86 8d       	ldd	r24, Z+30	; 0x1e
     aa4:	8f 3f       	cpi	r24, 0xFF	; 255
     aa6:	09 f4       	brne	.+2      	; 0xaaa <xQueueGenericSend+0xb0>
     aa8:	16 8e       	std	Z+30, r1	; 0x1e
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	be 01       	movw	r22, r28
     ab0:	6c 5f       	subi	r22, 0xFC	; 252
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	0e 94 0e 0c 	call	0x181c	; 0x181c <xTaskCheckForTimeOut>
     abc:	81 11       	cpse	r24, r1
     abe:	1b c0       	rjmp	.+54     	; 0xaf6 <xQueueGenericSend+0xfc>
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 a8 03 	call	0x750	; 0x750 <prvIsQueueFull>
     ac6:	88 23       	and	r24, r24
     ac8:	81 f0       	breq	.+32     	; 0xaea <xQueueGenericSend+0xf0>
     aca:	6c 81       	ldd	r22, Y+4	; 0x04
     acc:	7d 81       	ldd	r23, Y+5	; 0x05
     ace:	c8 01       	movw	r24, r16
     ad0:	08 96       	adiw	r24, 0x08	; 8
     ad2:	0e 94 34 0b 	call	0x1668	; 0x1668 <vTaskPlaceOnEventList>
     ad6:	c8 01       	movw	r24, r16
     ad8:	0e 94 15 04 	call	0x82a	; 0x82a <prvUnlockQueue>
     adc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
     ae0:	81 11       	cpse	r24, r1
     ae2:	9e cf       	rjmp	.-196    	; 0xa20 <xQueueGenericSend+0x26>
     ae4:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     ae8:	9b cf       	rjmp	.-202    	; 0xa20 <xQueueGenericSend+0x26>
     aea:	c8 01       	movw	r24, r16
     aec:	0e 94 15 04 	call	0x82a	; 0x82a <prvUnlockQueue>
     af0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
     af4:	95 cf       	rjmp	.-214    	; 0xa20 <xQueueGenericSend+0x26>
     af6:	c8 01       	movw	r24, r16
     af8:	0e 94 15 04 	call	0x82a	; 0x82a <prvUnlockQueue>
     afc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	08 95       	ret

00000b1e <prvInitialiseMutex>:
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	69 f0       	breq	.+26     	; 0xb3c <prvInitialiseMutex+0x1e>
     b22:	fc 01       	movw	r30, r24
     b24:	15 82       	std	Z+5, r1	; 0x05
     b26:	14 82       	std	Z+4, r1	; 0x04
     b28:	11 82       	std	Z+1, r1	; 0x01
     b2a:	10 82       	st	Z, r1
     b2c:	16 82       	std	Z+6, r1	; 0x06
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	0e 94 fd 04 	call	0x9fa	; 0x9fa <xQueueGenericSend>
     b3c:	08 95       	ret

00000b3e <xQueueCreateMutex>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	48 2f       	mov	r20, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 bc 04 	call	0x978	; 0x978 <xQueueGenericCreate>
     b4c:	ec 01       	movw	r28, r24
     b4e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <prvInitialiseMutex>
     b52:	ce 01       	movw	r24, r28
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <xQueueSemaphoreTake+0xe>
     b68:	00 d0       	rcall	.+0      	; 0xb6a <xQueueSemaphoreTake+0x10>
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	8c 01       	movw	r16, r24
     b72:	7d 83       	std	Y+5, r23	; 0x05
     b74:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     b76:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     b78:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     b80:	f8 01       	movw	r30, r16
     b82:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     b84:	88 23       	and	r24, r24
     b86:	d1 f0       	breq	.+52     	; 0xbbc <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     b88:	81 50       	subi	r24, 0x01	; 1
     b8a:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	89 2b       	or	r24, r25
     b92:	29 f4       	brne	.+10     	; 0xb9e <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     b94:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <pvTaskIncrementMutexHeldCount>
     b98:	f8 01       	movw	r30, r16
     b9a:	95 83       	std	Z+5, r25	; 0x05
     b9c:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     b9e:	f8 01       	movw	r30, r16
     ba0:	80 85       	ldd	r24, Z+8	; 0x08
     ba2:	88 23       	and	r24, r24
     ba4:	39 f0       	breq	.+14     	; 0xbb4 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     ba6:	c8 01       	movw	r24, r16
     ba8:	08 96       	adiw	r24, 0x08	; 8
     baa:	0e 94 46 0b 	call	0x168c	; 0x168c <xTaskRemoveFromEventList>
     bae:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     bb0:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	74 c0       	rjmp	.+232    	; 0xca4 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	89 2b       	or	r24, r25
     bc2:	21 f4       	brne	.+8      	; 0xbcc <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	6c c0       	rjmp	.+216    	; 0xca4 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     bcc:	f1 10       	cpse	r15, r1
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	0e 94 03 0c 	call	0x1806	; 0x1806 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     bd8:	ff 24       	eor	r15, r15
     bda:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     be0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	0f 92       	push	r0
     bea:	f8 01       	movw	r30, r16
     bec:	85 8d       	ldd	r24, Z+29	; 0x1d
     bee:	8f 3f       	cpi	r24, 0xFF	; 255
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <xQueueSemaphoreTake+0x9a>
     bf2:	15 8e       	std	Z+29, r1	; 0x1d
     bf4:	f8 01       	movw	r30, r16
     bf6:	86 8d       	ldd	r24, Z+30	; 0x1e
     bf8:	8f 3f       	cpi	r24, 0xFF	; 255
     bfa:	09 f4       	brne	.+2      	; 0xbfe <xQueueSemaphoreTake+0xa4>
     bfc:	16 8e       	std	Z+30, r1	; 0x1e
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     c02:	be 01       	movw	r22, r28
     c04:	6c 5f       	subi	r22, 0xFC	; 252
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 0e 0c 	call	0x181c	; 0x181c <xTaskCheckForTimeOut>
     c10:	81 11       	cpse	r24, r1
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 9b 03 	call	0x736	; 0x736 <prvIsQueueEmpty>
     c1a:	88 23       	and	r24, r24
     c1c:	f9 f0       	breq	.+62     	; 0xc5c <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     c1e:	f8 01       	movw	r30, r16
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	89 2b       	or	r24, r25
     c26:	51 f4       	brne	.+20     	; 0xc3c <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     c2e:	84 81       	ldd	r24, Z+4	; 0x04
     c30:	95 81       	ldd	r25, Z+5	; 0x05
     c32:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xTaskPriorityInherit>
     c36:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c3c:	6c 81       	ldd	r22, Y+4	; 0x04
     c3e:	7d 81       	ldd	r23, Y+5	; 0x05
     c40:	c8 01       	movw	r24, r16
     c42:	41 96       	adiw	r24, 0x11	; 17
     c44:	0e 94 34 0b 	call	0x1668	; 0x1668 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     c48:	c8 01       	movw	r24, r16
     c4a:	0e 94 15 04 	call	0x82a	; 0x82a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     c4e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
     c52:	81 11       	cpse	r24, r1
     c54:	92 cf       	rjmp	.-220    	; 0xb7a <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     c56:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     c5a:	8f cf       	rjmp	.-226    	; 0xb7a <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 15 04 	call	0x82a	; 0x82a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     c62:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>
     c66:	89 cf       	rjmp	.-238    	; 0xb7a <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     c68:	c8 01       	movw	r24, r16
     c6a:	0e 94 15 04 	call	0x82a	; 0x82a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     c6e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 9b 03 	call	0x736	; 0x736 <prvIsQueueEmpty>
     c78:	88 23       	and	r24, r24
     c7a:	09 f4       	brne	.+2      	; 0xc7e <xQueueSemaphoreTake+0x124>
     c7c:	7e cf       	rjmp	.-260    	; 0xb7a <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     c7e:	ee 20       	and	r14, r14
     c80:	81 f0       	breq	.+32     	; 0xca2 <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     c88:	c8 01       	movw	r24, r16
     c8a:	0e 94 8b 03 	call	0x716	; 0x716 <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     c8e:	68 2f       	mov	r22, r24
     c90:	f8 01       	movw	r30, r16
     c92:	84 81       	ldd	r24, Z+4	; 0x04
     c94:	95 81       	ldd	r25, Z+5	; 0x05
     c96:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <xQueueSemaphoreTake+0x14a>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	08 95       	ret

00000cbc <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     cbc:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
     cc0:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
     cc4:	80 81       	ld	r24, Z
     cc6:	81 11       	cpse	r24, r1
     cc8:	07 c0       	rjmp	.+14     	; 0xcd8 <prvResetNextTaskUnblockTime+0x1c>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <xNextTaskUnblockTime+0x1>
     cd2:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <xNextTaskUnblockTime>
     cd6:	08 95       	ret
     cd8:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
     cdc:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
     ce0:	05 80       	ldd	r0, Z+5	; 0x05
     ce2:	f6 81       	ldd	r31, Z+6	; 0x06
     ce4:	e0 2d       	mov	r30, r0
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <xNextTaskUnblockTime+0x1>
     cee:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <xNextTaskUnblockTime>
     cf2:	08 95       	ret

00000cf4 <prvDeleteTCB>:
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	0e 94 ee 02 	call	0x5dc	; 0x5dc <vPortFree>
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 ee 02 	call	0x5dc	; 0x5dc <vPortFree>
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <prvInitialiseNewTask>:
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	4c 01       	movw	r8, r24
     d2e:	d5 01       	movw	r26, r10
     d30:	57 96       	adiw	r26, 0x17	; 23
     d32:	8d 91       	ld	r24, X+
     d34:	9c 91       	ld	r25, X
     d36:	58 97       	sbiw	r26, 0x18	; 24
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	31 09       	sbc	r19, r1
     d3c:	3c 01       	movw	r6, r24
     d3e:	62 0e       	add	r6, r18
     d40:	73 1e       	adc	r7, r19
     d42:	61 15       	cp	r22, r1
     d44:	71 05       	cpc	r23, r1
     d46:	89 f4       	brne	.+34     	; 0xd6a <prvInitialiseNewTask+0x5c>
     d48:	16 c0       	rjmp	.+44     	; 0xd76 <prvInitialiseNewTask+0x68>
     d4a:	82 2f       	mov	r24, r18
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	fb 01       	movw	r30, r22
     d50:	e8 0f       	add	r30, r24
     d52:	f9 1f       	adc	r31, r25
     d54:	30 81       	ld	r19, Z
     d56:	d5 01       	movw	r26, r10
     d58:	a8 0f       	add	r26, r24
     d5a:	b9 1f       	adc	r27, r25
     d5c:	59 96       	adiw	r26, 0x19	; 25
     d5e:	3c 93       	st	X, r19
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	29 f0       	breq	.+10     	; 0xd70 <prvInitialiseNewTask+0x62>
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <prvInitialiseNewTask+0x5e>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	28 30       	cpi	r18, 0x08	; 8
     d6e:	68 f3       	brcs	.-38     	; 0xd4a <prvInitialiseNewTask+0x3c>
     d70:	f5 01       	movw	r30, r10
     d72:	10 a2       	std	Z+32, r1	; 0x20
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <prvInitialiseNewTask+0x6e>
     d76:	d5 01       	movw	r26, r10
     d78:	59 96       	adiw	r26, 0x19	; 25
     d7a:	1c 92       	st	X, r1
     d7c:	b3 e0       	ldi	r27, 0x03	; 3
     d7e:	be 15       	cp	r27, r14
     d80:	20 f4       	brcc	.+8      	; 0xd8a <prvInitialiseNewTask+0x7c>
     d82:	0f 2e       	mov	r0, r31
     d84:	f3 e0       	ldi	r31, 0x03	; 3
     d86:	ef 2e       	mov	r14, r31
     d88:	f0 2d       	mov	r31, r0
     d8a:	f5 01       	movw	r30, r10
     d8c:	e6 8a       	std	Z+22, r14	; 0x16
     d8e:	e1 a2       	std	Z+33, r14	; 0x21
     d90:	12 a2       	std	Z+34, r1	; 0x22
     d92:	c5 01       	movw	r24, r10
     d94:	02 96       	adiw	r24, 0x02	; 2
     d96:	0e 94 2f 03 	call	0x65e	; 0x65e <vListInitialiseItem>
     d9a:	c5 01       	movw	r24, r10
     d9c:	0c 96       	adiw	r24, 0x0c	; 12
     d9e:	0e 94 2f 03 	call	0x65e	; 0x65e <vListInitialiseItem>
     da2:	d5 01       	movw	r26, r10
     da4:	19 96       	adiw	r26, 0x09	; 9
     da6:	bc 92       	st	X, r11
     da8:	ae 92       	st	-X, r10
     daa:	18 97       	sbiw	r26, 0x08	; 8
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	8e 19       	sub	r24, r14
     db2:	91 09       	sbc	r25, r1
     db4:	1d 96       	adiw	r26, 0x0d	; 13
     db6:	9c 93       	st	X, r25
     db8:	8e 93       	st	-X, r24
     dba:	1c 97       	sbiw	r26, 0x0c	; 12
     dbc:	53 96       	adiw	r26, 0x13	; 19
     dbe:	bc 92       	st	X, r11
     dc0:	ae 92       	st	-X, r10
     dc2:	52 97       	sbiw	r26, 0x12	; 18
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	f5 01       	movw	r30, r10
     dc8:	b3 96       	adiw	r30, 0x23	; 35
     dca:	df 01       	movw	r26, r30
     dcc:	1d 92       	st	X+, r1
     dce:	8a 95       	dec	r24
     dd0:	e9 f7       	brne	.-6      	; 0xdcc <prvInitialiseNewTask+0xbe>
     dd2:	f5 01       	movw	r30, r10
     dd4:	17 a2       	std	Z+39, r1	; 0x27
     dd6:	a8 01       	movw	r20, r16
     dd8:	b4 01       	movw	r22, r8
     dda:	c3 01       	movw	r24, r6
     ddc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <pxPortInitialiseStack>
     de0:	d5 01       	movw	r26, r10
     de2:	8d 93       	st	X+, r24
     de4:	9c 93       	st	X, r25
     de6:	c1 14       	cp	r12, r1
     de8:	d1 04       	cpc	r13, r1
     dea:	19 f0       	breq	.+6      	; 0xdf2 <prvInitialiseNewTask+0xe4>
     dec:	f6 01       	movw	r30, r12
     dee:	b1 82       	std	Z+1, r11	; 0x01
     df0:	a0 82       	st	Z, r10
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	bf 90       	pop	r11
     e02:	af 90       	pop	r10
     e04:	9f 90       	pop	r9
     e06:	8f 90       	pop	r8
     e08:	7f 90       	pop	r7
     e0a:	6f 90       	pop	r6
     e0c:	08 95       	ret

00000e0e <prvInitialiseTaskLists>:
     e0e:	cf 93       	push	r28
     e10:	c0 e0       	ldi	r28, 0x00	; 0
     e12:	10 c0       	rjmp	.+32     	; 0xe34 <prvInitialiseTaskLists+0x26>
     e14:	8c 2f       	mov	r24, r28
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 01       	movw	r18, r24
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	22 0f       	add	r18, r18
     e24:	33 1f       	adc	r19, r19
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	8c 54       	subi	r24, 0x4C	; 76
     e2c:	98 4f       	sbci	r25, 0xF8	; 248
     e2e:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     e32:	cf 5f       	subi	r28, 0xFF	; 255
     e34:	c4 30       	cpi	r28, 0x04	; 4
     e36:	70 f3       	brcs	.-36     	; 0xe14 <prvInitialiseTaskLists+0x6>
     e38:	8b ea       	ldi	r24, 0xAB	; 171
     e3a:	97 e0       	ldi	r25, 0x07	; 7
     e3c:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     e40:	82 ea       	ldi	r24, 0xA2	; 162
     e42:	97 e0       	ldi	r25, 0x07	; 7
     e44:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     e48:	85 e9       	ldi	r24, 0x95	; 149
     e4a:	97 e0       	ldi	r25, 0x07	; 7
     e4c:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     e50:	8c e8       	ldi	r24, 0x8C	; 140
     e52:	97 e0       	ldi	r25, 0x07	; 7
     e54:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     e58:	82 e8       	ldi	r24, 0x82	; 130
     e5a:	97 e0       	ldi	r25, 0x07	; 7
     e5c:	0e 94 21 03 	call	0x642	; 0x642 <vListInitialise>
     e60:	8b ea       	ldi	r24, 0xAB	; 171
     e62:	97 e0       	ldi	r25, 0x07	; 7
     e64:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <pxDelayedTaskList+0x1>
     e68:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <pxDelayedTaskList>
     e6c:	82 ea       	ldi	r24, 0xA2	; 162
     e6e:	97 e0       	ldi	r25, 0x07	; 7
     e70:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
     e74:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <prvAddNewTaskToReadyList>:
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	0f 92       	push	r0
     e88:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxCurrentNumberOfTasks>
     e92:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     e96:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     e9a:	89 2b       	or	r24, r25
     e9c:	59 f4       	brne	.+22     	; 0xeb4 <prvAddNewTaskToReadyList+0x38>
     e9e:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
     ea2:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>
     ea6:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	99 f4       	brne	.+38     	; 0xed4 <prvAddNewTaskToReadyList+0x58>
     eae:	0e 94 07 07 	call	0xe0e	; 0xe0e <prvInitialiseTaskLists>
     eb2:	10 c0       	rjmp	.+32     	; 0xed4 <prvAddNewTaskToReadyList+0x58>
     eb4:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xSchedulerRunning>
     eb8:	81 11       	cpse	r24, r1
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <prvAddNewTaskToReadyList+0x58>
     ebc:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     ec0:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     ec4:	96 89       	ldd	r25, Z+22	; 0x16
     ec6:	8e 89       	ldd	r24, Y+22	; 0x16
     ec8:	89 17       	cp	r24, r25
     eca:	20 f0       	brcs	.+8      	; 0xed4 <prvAddNewTaskToReadyList+0x58>
     ecc:	d0 93 d9 07 	sts	0x07D9, r29	; 0x8007d9 <pxCurrentTCB+0x1>
     ed0:	c0 93 d8 07 	sts	0x07D8, r28	; 0x8007d8 <pxCurrentTCB>
     ed4:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <uxTaskNumber>
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <uxTaskNumber>
     ede:	8e 89       	ldd	r24, Y+22	; 0x16
     ee0:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
     ee4:	98 17       	cp	r25, r24
     ee6:	10 f4       	brcc	.+4      	; 0xeec <prvAddNewTaskToReadyList+0x70>
     ee8:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	fc 01       	movw	r30, r24
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	8e 0f       	add	r24, r30
     efe:	9f 1f       	adc	r25, r31
     f00:	fc 01       	movw	r30, r24
     f02:	ec 54       	subi	r30, 0x4C	; 76
     f04:	f8 4f       	sbci	r31, 0xF8	; 248
     f06:	01 80       	ldd	r0, Z+1	; 0x01
     f08:	f2 81       	ldd	r31, Z+2	; 0x02
     f0a:	e0 2d       	mov	r30, r0
     f0c:	fd 83       	std	Y+5, r31	; 0x05
     f0e:	ec 83       	std	Y+4, r30	; 0x04
     f10:	84 81       	ldd	r24, Z+4	; 0x04
     f12:	95 81       	ldd	r25, Z+5	; 0x05
     f14:	9f 83       	std	Y+7, r25	; 0x07
     f16:	8e 83       	std	Y+6, r24	; 0x06
     f18:	a4 81       	ldd	r26, Z+4	; 0x04
     f1a:	b5 81       	ldd	r27, Z+5	; 0x05
     f1c:	ce 01       	movw	r24, r28
     f1e:	02 96       	adiw	r24, 0x02	; 2
     f20:	13 96       	adiw	r26, 0x03	; 3
     f22:	9c 93       	st	X, r25
     f24:	8e 93       	st	-X, r24
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	95 83       	std	Z+5, r25	; 0x05
     f2a:	84 83       	std	Z+4, r24	; 0x04
     f2c:	ee 89       	ldd	r30, Y+22	; 0x16
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	cf 01       	movw	r24, r30
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	e8 0f       	add	r30, r24
     f40:	f9 1f       	adc	r31, r25
     f42:	ec 54       	subi	r30, 0x4C	; 76
     f44:	f8 4f       	sbci	r31, 0xF8	; 248
     f46:	fb 87       	std	Y+11, r31	; 0x0b
     f48:	ea 87       	std	Y+10, r30	; 0x0a
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	80 83       	st	Z, r24
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <xSchedulerRunning>
     f58:	88 23       	and	r24, r24
     f5a:	51 f0       	breq	.+20     	; 0xf70 <prvAddNewTaskToReadyList+0xf4>
     f5c:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     f60:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     f64:	96 89       	ldd	r25, Z+22	; 0x16
     f66:	8e 89       	ldd	r24, Y+22	; 0x16
     f68:	98 17       	cp	r25, r24
     f6a:	10 f4       	brcc	.+4      	; 0xf70 <prvAddNewTaskToReadyList+0xf4>
     f6c:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <prvCheckTasksWaitingTermination>:
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	1c c0       	rjmp	.+56     	; 0xfb4 <prvCheckTasksWaitingTermination+0x3e>
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	0f 92       	push	r0
     f82:	e0 91 91 07 	lds	r30, 0x0791	; 0x800791 <xTasksWaitingTermination+0x5>
     f86:	f0 91 92 07 	lds	r31, 0x0792	; 0x800792 <xTasksWaitingTermination+0x6>
     f8a:	c6 81       	ldd	r28, Z+6	; 0x06
     f8c:	d7 81       	ldd	r29, Z+7	; 0x07
     f8e:	ce 01       	movw	r24, r28
     f90:	02 96       	adiw	r24, 0x02	; 2
     f92:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
     f96:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <uxCurrentNumberOfTasks>
     fa0:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <prvDeleteTCB>
     fb4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <uxDeletedTasksWaitingCleanUp>
     fb8:	81 11       	cpse	r24, r1
     fba:	e0 cf       	rjmp	.-64     	; 0xf7c <prvCheckTasksWaitingTermination+0x6>
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <prvIdleTask>:
     fc2:	0e 94 bb 07 	call	0xf76	; 0xf76 <prvCheckTasksWaitingTermination>
     fc6:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <pxReadyTasksLists>
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	d0 f3       	brcs	.-12     	; 0xfc2 <prvIdleTask>
     fce:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
     fd2:	f7 cf       	rjmp	.-18     	; 0xfc2 <prvIdleTask>

00000fd4 <prvAddCurrentTaskToDelayedList>:
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	ec 01       	movw	r28, r24
     fe0:	f6 2e       	mov	r15, r22
     fe2:	00 91 7f 07 	lds	r16, 0x077F	; 0x80077f <xTickCount>
     fe6:	10 91 80 07 	lds	r17, 0x0780	; 0x800780 <xTickCount+0x1>
     fea:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
     fee:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
     ff2:	02 96       	adiw	r24, 0x02	; 2
     ff4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
     ff8:	cf 3f       	cpi	r28, 0xFF	; 255
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	d8 07       	cpc	r29, r24
     ffe:	b1 f5       	brne	.+108    	; 0x106c <prvAddCurrentTaskToDelayedList+0x98>
    1000:	ff 20       	and	r15, r15
    1002:	a1 f1       	breq	.+104    	; 0x106c <prvAddCurrentTaskToDelayedList+0x98>
    1004:	e2 e8       	ldi	r30, 0x82	; 130
    1006:	f7 e0       	ldi	r31, 0x07	; 7
    1008:	a1 81       	ldd	r26, Z+1	; 0x01
    100a:	b2 81       	ldd	r27, Z+2	; 0x02
    100c:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1010:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1014:	bd 83       	std	Y+5, r27	; 0x05
    1016:	ac 83       	std	Y+4, r26	; 0x04
    1018:	c0 91 d8 07 	lds	r28, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    101c:	d0 91 d9 07 	lds	r29, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1020:	14 96       	adiw	r26, 0x04	; 4
    1022:	8d 91       	ld	r24, X+
    1024:	9c 91       	ld	r25, X
    1026:	15 97       	sbiw	r26, 0x05	; 5
    1028:	9f 83       	std	Y+7, r25	; 0x07
    102a:	8e 83       	std	Y+6, r24	; 0x06
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	cd 91       	ld	r28, X+
    1030:	dc 91       	ld	r29, X
    1032:	15 97       	sbiw	r26, 0x05	; 5
    1034:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1038:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    103c:	02 96       	adiw	r24, 0x02	; 2
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1046:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    104a:	02 96       	adiw	r24, 0x02	; 2
    104c:	15 96       	adiw	r26, 0x05	; 5
    104e:	9c 93       	st	X, r25
    1050:	8e 93       	st	-X, r24
    1052:	14 97       	sbiw	r26, 0x04	; 4
    1054:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1058:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    105c:	1b 96       	adiw	r26, 0x0b	; 11
    105e:	fc 93       	st	X, r31
    1060:	ee 93       	st	-X, r30
    1062:	1a 97       	sbiw	r26, 0x0a	; 10
    1064:	80 81       	ld	r24, Z
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24
    106a:	2f c0       	rjmp	.+94     	; 0x10ca <prvAddCurrentTaskToDelayedList+0xf6>
    106c:	c0 0f       	add	r28, r16
    106e:	d1 1f       	adc	r29, r17
    1070:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1074:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1078:	d3 83       	std	Z+3, r29	; 0x03
    107a:	c2 83       	std	Z+2, r28	; 0x02
    107c:	c0 17       	cp	r28, r16
    107e:	d1 07       	cpc	r29, r17
    1080:	68 f4       	brcc	.+26     	; 0x109c <prvAddCurrentTaskToDelayedList+0xc8>
    1082:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1086:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    108a:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    108e:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    1092:	6e 5f       	subi	r22, 0xFE	; 254
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	0e 94 33 03 	call	0x666	; 0x666 <vListInsert>
    109a:	17 c0       	rjmp	.+46     	; 0x10ca <prvAddCurrentTaskToDelayedList+0xf6>
    109c:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    10a0:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    10a4:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    10a8:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    10ac:	6e 5f       	subi	r22, 0xFE	; 254
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	0e 94 33 03 	call	0x666	; 0x666 <vListInsert>
    10b4:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <xNextTaskUnblockTime>
    10b8:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <xNextTaskUnblockTime+0x1>
    10bc:	c8 17       	cp	r28, r24
    10be:	d9 07       	cpc	r29, r25
    10c0:	20 f4       	brcc	.+8      	; 0x10ca <prvAddCurrentTaskToDelayedList+0xf6>
    10c2:	d0 93 77 07 	sts	0x0777, r29	; 0x800777 <xNextTaskUnblockTime+0x1>
    10c6:	c0 93 76 07 	sts	0x0776, r28	; 0x800776 <xNextTaskUnblockTime>
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	08 95       	ret

000010d6 <xTaskCreate>:
    10d6:	2f 92       	push	r2
    10d8:	3f 92       	push	r3
    10da:	4f 92       	push	r4
    10dc:	5f 92       	push	r5
    10de:	6f 92       	push	r6
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	3c 01       	movw	r6, r24
    10fc:	1b 01       	movw	r2, r22
    10fe:	5a 01       	movw	r10, r20
    1100:	29 01       	movw	r4, r18
    1102:	ca 01       	movw	r24, r20
    1104:	0e 94 59 02 	call	0x4b2	; 0x4b2 <pvPortMalloc>
    1108:	6c 01       	movw	r12, r24
    110a:	89 2b       	or	r24, r25
    110c:	71 f0       	breq	.+28     	; 0x112a <xTaskCreate+0x54>
    110e:	88 e2       	ldi	r24, 0x28	; 40
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 59 02 	call	0x4b2	; 0x4b2 <pvPortMalloc>
    1116:	ec 01       	movw	r28, r24
    1118:	89 2b       	or	r24, r25
    111a:	19 f0       	breq	.+6      	; 0x1122 <xTaskCreate+0x4c>
    111c:	d8 8e       	std	Y+24, r13	; 0x18
    111e:	cf 8a       	std	Y+23, r12	; 0x17
    1120:	06 c0       	rjmp	.+12     	; 0x112e <xTaskCreate+0x58>
    1122:	c6 01       	movw	r24, r12
    1124:	0e 94 ee 02 	call	0x5dc	; 0x5dc <vPortFree>
    1128:	02 c0       	rjmp	.+4      	; 0x112e <xTaskCreate+0x58>
    112a:	c0 e0       	ldi	r28, 0x00	; 0
    112c:	d0 e0       	ldi	r29, 0x00	; 0
    112e:	20 97       	sbiw	r28, 0x00	; 0
    1130:	91 f0       	breq	.+36     	; 0x1156 <xTaskCreate+0x80>
    1132:	95 01       	movw	r18, r10
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	81 2c       	mov	r8, r1
    113a:	91 2c       	mov	r9, r1
    113c:	5e 01       	movw	r10, r28
    113e:	67 01       	movw	r12, r14
    1140:	e0 2e       	mov	r14, r16
    1142:	82 01       	movw	r16, r4
    1144:	b1 01       	movw	r22, r2
    1146:	c3 01       	movw	r24, r6
    1148:	0e 94 87 06 	call	0xd0e	; 0xd0e <prvInitialiseNewTask>
    114c:	ce 01       	movw	r24, r28
    114e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <prvAddNewTaskToReadyList>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <xTaskCreate+0x82>
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	bf 90       	pop	r11
    116a:	af 90       	pop	r10
    116c:	9f 90       	pop	r9
    116e:	8f 90       	pop	r8
    1170:	7f 90       	pop	r7
    1172:	6f 90       	pop	r6
    1174:	5f 90       	pop	r5
    1176:	4f 90       	pop	r4
    1178:	3f 90       	pop	r3
    117a:	2f 90       	pop	r2
    117c:	08 95       	ret

0000117e <vTaskStartScheduler>:
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	0f 2e       	mov	r0, r31
    1186:	f4 e7       	ldi	r31, 0x74	; 116
    1188:	ef 2e       	mov	r14, r31
    118a:	f7 e0       	ldi	r31, 0x07	; 7
    118c:	ff 2e       	mov	r15, r31
    118e:	f0 2d       	mov	r31, r0
    1190:	00 e0       	ldi	r16, 0x00	; 0
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	45 e5       	ldi	r20, 0x55	; 85
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	6d e0       	ldi	r22, 0x0D	; 13
    119c:	71 e0       	ldi	r23, 0x01	; 1
    119e:	81 ee       	ldi	r24, 0xE1	; 225
    11a0:	97 e0       	ldi	r25, 0x07	; 7
    11a2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <xTaskCreate>
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	81 f4       	brne	.+32     	; 0x11ca <vTaskStartScheduler+0x4c>
    11aa:	f8 94       	cli
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <xNextTaskUnblockTime+0x1>
    11b4:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <xNextTaskUnblockTime>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 7d 07 	sts	0x077D, r24	; 0x80077d <xSchedulerRunning>
    11be:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <xTickCount+0x1>
    11c2:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <xTickCount>
    11c6:	0e 94 57 01 	call	0x2ae	; 0x2ae <xPortStartScheduler>
    11ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	08 95       	ret

000011d6 <vTaskSuspendAll>:
    11d6:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxSchedulerSuspended>
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <uxSchedulerSuspended>
    11e0:	08 95       	ret

000011e2 <xTaskIncrementTick>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxSchedulerSuspended>
    11ee:	81 11       	cpse	r24, r1
    11f0:	01 c1       	rjmp	.+514    	; 0x13f4 <xTaskIncrementTick+0x212>
    11f2:	c0 91 7f 07 	lds	r28, 0x077F	; 0x80077f <xTickCount>
    11f6:	d0 91 80 07 	lds	r29, 0x0780	; 0x800780 <xTickCount+0x1>
    11fa:	8e 01       	movw	r16, r28
    11fc:	0f 5f       	subi	r16, 0xFF	; 255
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	10 93 80 07 	sts	0x0780, r17	; 0x800780 <xTickCount+0x1>
    1204:	00 93 7f 07 	sts	0x077F, r16	; 0x80077f <xTickCount>
    1208:	01 15       	cp	r16, r1
    120a:	11 05       	cpc	r17, r1
    120c:	b9 f4       	brne	.+46     	; 0x123c <xTaskIncrementTick+0x5a>
    120e:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1212:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1216:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <pxOverflowDelayedTaskList>
    121a:	30 91 9f 07 	lds	r19, 0x079F	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    121e:	30 93 a1 07 	sts	0x07A1, r19	; 0x8007a1 <pxDelayedTaskList+0x1>
    1222:	20 93 a0 07 	sts	0x07A0, r18	; 0x8007a0 <pxDelayedTaskList>
    1226:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxOverflowDelayedTaskList+0x1>
    122a:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxOverflowDelayedTaskList>
    122e:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <xNumOfOverflows>
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <xNumOfOverflows>
    1238:	0e 94 5e 06 	call	0xcbc	; 0xcbc <prvResetNextTaskUnblockTime>
    123c:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <xNextTaskUnblockTime>
    1240:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <xNextTaskUnblockTime+0x1>
    1244:	08 17       	cp	r16, r24
    1246:	19 07       	cpc	r17, r25
    1248:	20 f4       	brcc	.+8      	; 0x1252 <xTaskIncrementTick+0x70>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	b8 c0       	rjmp	.+368    	; 0x13be <xTaskIncrementTick+0x1dc>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <xTaskIncrementTick+0x72>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1258:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    125c:	90 81       	ld	r25, Z
    125e:	91 11       	cpse	r25, r1
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <xTaskIncrementTick+0x8e>
    1262:	2f ef       	ldi	r18, 0xFF	; 255
    1264:	3f ef       	ldi	r19, 0xFF	; 255
    1266:	30 93 77 07 	sts	0x0777, r19	; 0x800777 <xNextTaskUnblockTime+0x1>
    126a:	20 93 76 07 	sts	0x0776, r18	; 0x800776 <xNextTaskUnblockTime>
    126e:	a7 c0       	rjmp	.+334    	; 0x13be <xTaskIncrementTick+0x1dc>
    1270:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <pxDelayedTaskList>
    1274:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <pxDelayedTaskList+0x1>
    1278:	05 80       	ldd	r0, Z+5	; 0x05
    127a:	f6 81       	ldd	r31, Z+6	; 0x06
    127c:	e0 2d       	mov	r30, r0
    127e:	06 80       	ldd	r0, Z+6	; 0x06
    1280:	f7 81       	ldd	r31, Z+7	; 0x07
    1282:	e0 2d       	mov	r30, r0
    1284:	22 81       	ldd	r18, Z+2	; 0x02
    1286:	33 81       	ldd	r19, Z+3	; 0x03
    1288:	02 17       	cp	r16, r18
    128a:	13 07       	cpc	r17, r19
    128c:	28 f4       	brcc	.+10     	; 0x1298 <xTaskIncrementTick+0xb6>
    128e:	30 93 77 07 	sts	0x0777, r19	; 0x800777 <xNextTaskUnblockTime+0x1>
    1292:	20 93 76 07 	sts	0x0776, r18	; 0x800776 <xNextTaskUnblockTime>
    1296:	93 c0       	rjmp	.+294    	; 0x13be <xTaskIncrementTick+0x1dc>
    1298:	a2 85       	ldd	r26, Z+10	; 0x0a
    129a:	b3 85       	ldd	r27, Z+11	; 0x0b
    129c:	24 81       	ldd	r18, Z+4	; 0x04
    129e:	35 81       	ldd	r19, Z+5	; 0x05
    12a0:	46 81       	ldd	r20, Z+6	; 0x06
    12a2:	57 81       	ldd	r21, Z+7	; 0x07
    12a4:	e9 01       	movw	r28, r18
    12a6:	5d 83       	std	Y+5, r21	; 0x05
    12a8:	4c 83       	std	Y+4, r20	; 0x04
    12aa:	26 81       	ldd	r18, Z+6	; 0x06
    12ac:	37 81       	ldd	r19, Z+7	; 0x07
    12ae:	44 81       	ldd	r20, Z+4	; 0x04
    12b0:	55 81       	ldd	r21, Z+5	; 0x05
    12b2:	e9 01       	movw	r28, r18
    12b4:	5b 83       	std	Y+3, r21	; 0x03
    12b6:	4a 83       	std	Y+2, r20	; 0x02
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	2d 91       	ld	r18, X+
    12bc:	3c 91       	ld	r19, X
    12be:	12 97       	sbiw	r26, 0x02	; 2
    12c0:	af 01       	movw	r20, r30
    12c2:	4e 5f       	subi	r20, 0xFE	; 254
    12c4:	5f 4f       	sbci	r21, 0xFF	; 255
    12c6:	24 17       	cp	r18, r20
    12c8:	35 07       	cpc	r19, r21
    12ca:	31 f4       	brne	.+12     	; 0x12d8 <xTaskIncrementTick+0xf6>
    12cc:	26 81       	ldd	r18, Z+6	; 0x06
    12ce:	37 81       	ldd	r19, Z+7	; 0x07
    12d0:	12 96       	adiw	r26, 0x02	; 2
    12d2:	3c 93       	st	X, r19
    12d4:	2e 93       	st	-X, r18
    12d6:	11 97       	sbiw	r26, 0x01	; 1
    12d8:	13 86       	std	Z+11, r1	; 0x0b
    12da:	12 86       	std	Z+10, r1	; 0x0a
    12dc:	9c 91       	ld	r25, X
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	9c 93       	st	X, r25
    12e2:	a4 89       	ldd	r26, Z+20	; 0x14
    12e4:	b5 89       	ldd	r27, Z+21	; 0x15
    12e6:	10 97       	sbiw	r26, 0x00	; 0
    12e8:	19 f1       	breq	.+70     	; 0x1330 <xTaskIncrementTick+0x14e>
    12ea:	26 85       	ldd	r18, Z+14	; 0x0e
    12ec:	37 85       	ldd	r19, Z+15	; 0x0f
    12ee:	60 89       	ldd	r22, Z+16	; 0x10
    12f0:	71 89       	ldd	r23, Z+17	; 0x11
    12f2:	e9 01       	movw	r28, r18
    12f4:	7d 83       	std	Y+5, r23	; 0x05
    12f6:	6c 83       	std	Y+4, r22	; 0x04
    12f8:	20 89       	ldd	r18, Z+16	; 0x10
    12fa:	31 89       	ldd	r19, Z+17	; 0x11
    12fc:	66 85       	ldd	r22, Z+14	; 0x0e
    12fe:	77 85       	ldd	r23, Z+15	; 0x0f
    1300:	e9 01       	movw	r28, r18
    1302:	7b 83       	std	Y+3, r23	; 0x03
    1304:	6a 83       	std	Y+2, r22	; 0x02
    1306:	11 96       	adiw	r26, 0x01	; 1
    1308:	6d 91       	ld	r22, X+
    130a:	7c 91       	ld	r23, X
    130c:	12 97       	sbiw	r26, 0x02	; 2
    130e:	9f 01       	movw	r18, r30
    1310:	24 5f       	subi	r18, 0xF4	; 244
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	62 17       	cp	r22, r18
    1316:	73 07       	cpc	r23, r19
    1318:	31 f4       	brne	.+12     	; 0x1326 <xTaskIncrementTick+0x144>
    131a:	20 89       	ldd	r18, Z+16	; 0x10
    131c:	31 89       	ldd	r19, Z+17	; 0x11
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	3c 93       	st	X, r19
    1322:	2e 93       	st	-X, r18
    1324:	11 97       	sbiw	r26, 0x01	; 1
    1326:	15 8a       	std	Z+21, r1	; 0x15
    1328:	14 8a       	std	Z+20, r1	; 0x14
    132a:	9c 91       	ld	r25, X
    132c:	91 50       	subi	r25, 0x01	; 1
    132e:	9c 93       	st	X, r25
    1330:	26 89       	ldd	r18, Z+22	; 0x16
    1332:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1336:	92 17       	cp	r25, r18
    1338:	10 f4       	brcc	.+4      	; 0x133e <xTaskIncrementTick+0x15c>
    133a:	20 93 7e 07 	sts	0x077E, r18	; 0x80077e <uxTopReadyPriority>
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	d9 01       	movw	r26, r18
    1342:	aa 0f       	add	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	aa 0f       	add	r26, r26
    1348:	bb 1f       	adc	r27, r27
    134a:	aa 0f       	add	r26, r26
    134c:	bb 1f       	adc	r27, r27
    134e:	2a 0f       	add	r18, r26
    1350:	3b 1f       	adc	r19, r27
    1352:	d9 01       	movw	r26, r18
    1354:	ac 54       	subi	r26, 0x4C	; 76
    1356:	b8 4f       	sbci	r27, 0xF8	; 248
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	0d 90       	ld	r0, X+
    135c:	bc 91       	ld	r27, X
    135e:	a0 2d       	mov	r26, r0
    1360:	b5 83       	std	Z+5, r27	; 0x05
    1362:	a4 83       	std	Z+4, r26	; 0x04
    1364:	14 96       	adiw	r26, 0x04	; 4
    1366:	2d 91       	ld	r18, X+
    1368:	3c 91       	ld	r19, X
    136a:	15 97       	sbiw	r26, 0x05	; 5
    136c:	37 83       	std	Z+7, r19	; 0x07
    136e:	26 83       	std	Z+6, r18	; 0x06
    1370:	14 96       	adiw	r26, 0x04	; 4
    1372:	2d 91       	ld	r18, X+
    1374:	3c 91       	ld	r19, X
    1376:	15 97       	sbiw	r26, 0x05	; 5
    1378:	e9 01       	movw	r28, r18
    137a:	5b 83       	std	Y+3, r21	; 0x03
    137c:	4a 83       	std	Y+2, r20	; 0x02
    137e:	15 96       	adiw	r26, 0x05	; 5
    1380:	5c 93       	st	X, r21
    1382:	4e 93       	st	-X, r20
    1384:	14 97       	sbiw	r26, 0x04	; 4
    1386:	a6 89       	ldd	r26, Z+22	; 0x16
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	9d 01       	movw	r18, r26
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	22 0f       	add	r18, r18
    1392:	33 1f       	adc	r19, r19
    1394:	22 0f       	add	r18, r18
    1396:	33 1f       	adc	r19, r19
    1398:	a2 0f       	add	r26, r18
    139a:	b3 1f       	adc	r27, r19
    139c:	ac 54       	subi	r26, 0x4C	; 76
    139e:	b8 4f       	sbci	r27, 0xF8	; 248
    13a0:	b3 87       	std	Z+11, r27	; 0x0b
    13a2:	a2 87       	std	Z+10, r26	; 0x0a
    13a4:	9c 91       	ld	r25, X
    13a6:	9f 5f       	subi	r25, 0xFF	; 255
    13a8:	9c 93       	st	X, r25
    13aa:	26 89       	ldd	r18, Z+22	; 0x16
    13ac:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    13b0:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    13b4:	96 89       	ldd	r25, Z+22	; 0x16
    13b6:	29 17       	cp	r18, r25
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <xTaskIncrementTick+0x1da>
    13ba:	49 cf       	rjmp	.-366    	; 0x124e <xTaskIncrementTick+0x6c>
    13bc:	4b cf       	rjmp	.-362    	; 0x1254 <xTaskIncrementTick+0x72>
    13be:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    13c2:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    13c6:	26 89       	ldd	r18, Z+22	; 0x16
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	2e 0f       	add	r18, r30
    13da:	3f 1f       	adc	r19, r31
    13dc:	f9 01       	movw	r30, r18
    13de:	ec 54       	subi	r30, 0x4C	; 76
    13e0:	f8 4f       	sbci	r31, 0xF8	; 248
    13e2:	90 81       	ld	r25, Z
    13e4:	92 30       	cpi	r25, 0x02	; 2
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <xTaskIncrementTick+0x208>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <xYieldPending>
    13ee:	91 11       	cpse	r25, r1
    13f0:	0c c0       	rjmp	.+24     	; 0x140a <xTaskIncrementTick+0x228>
    13f2:	0c c0       	rjmp	.+24     	; 0x140c <xTaskIncrementTick+0x22a>
    13f4:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <xPendedTicks>
    13f8:	90 91 7c 07 	lds	r25, 0x077C	; 0x80077c <xPendedTicks+0x1>
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <xPendedTicks+0x1>
    1402:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <xPendedTicks>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	01 c0       	rjmp	.+2      	; 0x140c <xTaskIncrementTick+0x22a>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <xTaskResumeAll>:
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	0f 92       	push	r0
    1420:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxSchedulerSuspended>
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <uxSchedulerSuspended>
    142a:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxSchedulerSuspended>
    142e:	81 11       	cpse	r24, r1
    1430:	bf c0       	rjmp	.+382    	; 0x15b0 <xTaskResumeAll+0x19a>
    1432:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <uxCurrentNumberOfTasks>
    1436:	81 11       	cpse	r24, r1
    1438:	96 c0       	rjmp	.+300    	; 0x1566 <xTaskResumeAll+0x150>
    143a:	bd c0       	rjmp	.+378    	; 0x15b6 <xTaskResumeAll+0x1a0>
    143c:	e0 91 9a 07 	lds	r30, 0x079A	; 0x80079a <xPendingReadyList+0x5>
    1440:	f0 91 9b 07 	lds	r31, 0x079B	; 0x80079b <xPendingReadyList+0x6>
    1444:	06 80       	ldd	r0, Z+6	; 0x06
    1446:	f7 81       	ldd	r31, Z+7	; 0x07
    1448:	e0 2d       	mov	r30, r0
    144a:	a4 89       	ldd	r26, Z+20	; 0x14
    144c:	b5 89       	ldd	r27, Z+21	; 0x15
    144e:	c6 85       	ldd	r28, Z+14	; 0x0e
    1450:	d7 85       	ldd	r29, Z+15	; 0x0f
    1452:	80 89       	ldd	r24, Z+16	; 0x10
    1454:	91 89       	ldd	r25, Z+17	; 0x11
    1456:	9d 83       	std	Y+5, r25	; 0x05
    1458:	8c 83       	std	Y+4, r24	; 0x04
    145a:	c0 89       	ldd	r28, Z+16	; 0x10
    145c:	d1 89       	ldd	r29, Z+17	; 0x11
    145e:	86 85       	ldd	r24, Z+14	; 0x0e
    1460:	97 85       	ldd	r25, Z+15	; 0x0f
    1462:	9b 83       	std	Y+3, r25	; 0x03
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	11 96       	adiw	r26, 0x01	; 1
    1468:	2d 91       	ld	r18, X+
    146a:	3c 91       	ld	r19, X
    146c:	12 97       	sbiw	r26, 0x02	; 2
    146e:	cf 01       	movw	r24, r30
    1470:	0c 96       	adiw	r24, 0x0c	; 12
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	31 f4       	brne	.+12     	; 0x1484 <xTaskResumeAll+0x6e>
    1478:	80 89       	ldd	r24, Z+16	; 0x10
    147a:	91 89       	ldd	r25, Z+17	; 0x11
    147c:	12 96       	adiw	r26, 0x02	; 2
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	11 97       	sbiw	r26, 0x01	; 1
    1484:	15 8a       	std	Z+21, r1	; 0x15
    1486:	14 8a       	std	Z+20, r1	; 0x14
    1488:	8c 91       	ld	r24, X
    148a:	81 50       	subi	r24, 0x01	; 1
    148c:	8c 93       	st	X, r24
    148e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1490:	b3 85       	ldd	r27, Z+11	; 0x0b
    1492:	c4 81       	ldd	r28, Z+4	; 0x04
    1494:	d5 81       	ldd	r29, Z+5	; 0x05
    1496:	86 81       	ldd	r24, Z+6	; 0x06
    1498:	97 81       	ldd	r25, Z+7	; 0x07
    149a:	9d 83       	std	Y+5, r25	; 0x05
    149c:	8c 83       	std	Y+4, r24	; 0x04
    149e:	c6 81       	ldd	r28, Z+6	; 0x06
    14a0:	d7 81       	ldd	r29, Z+7	; 0x07
    14a2:	84 81       	ldd	r24, Z+4	; 0x04
    14a4:	95 81       	ldd	r25, Z+5	; 0x05
    14a6:	9b 83       	std	Y+3, r25	; 0x03
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	11 96       	adiw	r26, 0x01	; 1
    14ac:	8d 91       	ld	r24, X+
    14ae:	9c 91       	ld	r25, X
    14b0:	12 97       	sbiw	r26, 0x02	; 2
    14b2:	9f 01       	movw	r18, r30
    14b4:	2e 5f       	subi	r18, 0xFE	; 254
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	82 17       	cp	r24, r18
    14ba:	93 07       	cpc	r25, r19
    14bc:	31 f4       	brne	.+12     	; 0x14ca <xTaskResumeAll+0xb4>
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	97 81       	ldd	r25, Z+7	; 0x07
    14c2:	12 96       	adiw	r26, 0x02	; 2
    14c4:	9c 93       	st	X, r25
    14c6:	8e 93       	st	-X, r24
    14c8:	11 97       	sbiw	r26, 0x01	; 1
    14ca:	13 86       	std	Z+11, r1	; 0x0b
    14cc:	12 86       	std	Z+10, r1	; 0x0a
    14ce:	8c 91       	ld	r24, X
    14d0:	81 50       	subi	r24, 0x01	; 1
    14d2:	8c 93       	st	X, r24
    14d4:	86 89       	ldd	r24, Z+22	; 0x16
    14d6:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    14da:	98 17       	cp	r25, r24
    14dc:	10 f4       	brcc	.+4      	; 0x14e2 <xTaskResumeAll+0xcc>
    14de:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	dc 01       	movw	r26, r24
    14e6:	aa 0f       	add	r26, r26
    14e8:	bb 1f       	adc	r27, r27
    14ea:	aa 0f       	add	r26, r26
    14ec:	bb 1f       	adc	r27, r27
    14ee:	aa 0f       	add	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	8a 0f       	add	r24, r26
    14f4:	9b 1f       	adc	r25, r27
    14f6:	dc 01       	movw	r26, r24
    14f8:	ac 54       	subi	r26, 0x4C	; 76
    14fa:	b8 4f       	sbci	r27, 0xF8	; 248
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	0d 90       	ld	r0, X+
    1500:	bc 91       	ld	r27, X
    1502:	a0 2d       	mov	r26, r0
    1504:	b5 83       	std	Z+5, r27	; 0x05
    1506:	a4 83       	std	Z+4, r26	; 0x04
    1508:	14 96       	adiw	r26, 0x04	; 4
    150a:	8d 91       	ld	r24, X+
    150c:	9c 91       	ld	r25, X
    150e:	15 97       	sbiw	r26, 0x05	; 5
    1510:	97 83       	std	Z+7, r25	; 0x07
    1512:	86 83       	std	Z+6, r24	; 0x06
    1514:	14 96       	adiw	r26, 0x04	; 4
    1516:	cd 91       	ld	r28, X+
    1518:	dc 91       	ld	r29, X
    151a:	15 97       	sbiw	r26, 0x05	; 5
    151c:	3b 83       	std	Y+3, r19	; 0x03
    151e:	2a 83       	std	Y+2, r18	; 0x02
    1520:	15 96       	adiw	r26, 0x05	; 5
    1522:	3c 93       	st	X, r19
    1524:	2e 93       	st	-X, r18
    1526:	14 97       	sbiw	r26, 0x04	; 4
    1528:	a6 89       	ldd	r26, Z+22	; 0x16
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	cd 01       	movw	r24, r26
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	a8 0f       	add	r26, r24
    153c:	b9 1f       	adc	r27, r25
    153e:	ac 54       	subi	r26, 0x4C	; 76
    1540:	b8 4f       	sbci	r27, 0xF8	; 248
    1542:	b3 87       	std	Z+11, r27	; 0x0b
    1544:	a2 87       	std	Z+10, r26	; 0x0a
    1546:	8c 91       	ld	r24, X
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	8c 93       	st	X, r24
    154c:	96 89       	ldd	r25, Z+22	; 0x16
    154e:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1552:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1556:	56 96       	adiw	r26, 0x16	; 22
    1558:	8c 91       	ld	r24, X
    155a:	98 17       	cp	r25, r24
    155c:	30 f0       	brcs	.+12     	; 0x156a <xTaskResumeAll+0x154>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xYieldPending>
    1564:	02 c0       	rjmp	.+4      	; 0x156a <xTaskResumeAll+0x154>
    1566:	e0 e0       	ldi	r30, 0x00	; 0
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <xPendingReadyList>
    156e:	81 11       	cpse	r24, r1
    1570:	65 cf       	rjmp	.-310    	; 0x143c <xTaskResumeAll+0x26>
    1572:	ef 2b       	or	r30, r31
    1574:	11 f0       	breq	.+4      	; 0x157a <xTaskResumeAll+0x164>
    1576:	0e 94 5e 06 	call	0xcbc	; 0xcbc <prvResetNextTaskUnblockTime>
    157a:	c0 91 7b 07 	lds	r28, 0x077B	; 0x80077b <xPendedTicks>
    157e:	d0 91 7c 07 	lds	r29, 0x077C	; 0x80077c <xPendedTicks+0x1>
    1582:	20 97       	sbiw	r28, 0x00	; 0
    1584:	69 f0       	breq	.+26     	; 0x15a0 <xTaskResumeAll+0x18a>
    1586:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xTaskIncrementTick>
    158a:	88 23       	and	r24, r24
    158c:	19 f0       	breq	.+6      	; 0x1594 <xTaskResumeAll+0x17e>
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xYieldPending>
    1594:	21 97       	sbiw	r28, 0x01	; 1
    1596:	b9 f7       	brne	.-18     	; 0x1586 <xTaskResumeAll+0x170>
    1598:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <xPendedTicks+0x1>
    159c:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <xPendedTicks>
    15a0:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <xYieldPending>
    15a4:	88 23       	and	r24, r24
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <xTaskResumeAll+0x19e>
    15a8:	0e 94 86 01 	call	0x30c	; 0x30c <vPortYield>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <xTaskResumeAll+0x1a0>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <xTaskResumeAll+0x1a0>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <vTaskSwitchContext>:
    15c0:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxSchedulerSuspended>
    15c4:	88 23       	and	r24, r24
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <vTaskSwitchContext+0x10>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xYieldPending>
    15ce:	08 95       	ret
    15d0:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <xYieldPending>
    15d4:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uxTopReadyPriority>
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <vTaskSwitchContext+0x1c>
    15da:	21 50       	subi	r18, 0x01	; 1
    15dc:	82 2f       	mov	r24, r18
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	fc 01       	movw	r30, r24
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	e8 0f       	add	r30, r24
    15f0:	f9 1f       	adc	r31, r25
    15f2:	ec 54       	subi	r30, 0x4C	; 76
    15f4:	f8 4f       	sbci	r31, 0xF8	; 248
    15f6:	30 81       	ld	r19, Z
    15f8:	33 23       	and	r19, r19
    15fa:	79 f3       	breq	.-34     	; 0x15da <vTaskSwitchContext+0x1a>
    15fc:	ac 01       	movw	r20, r24
    15fe:	44 0f       	add	r20, r20
    1600:	55 1f       	adc	r21, r21
    1602:	44 0f       	add	r20, r20
    1604:	55 1f       	adc	r21, r21
    1606:	44 0f       	add	r20, r20
    1608:	55 1f       	adc	r21, r21
    160a:	48 0f       	add	r20, r24
    160c:	59 1f       	adc	r21, r25
    160e:	df 01       	movw	r26, r30
    1610:	01 80       	ldd	r0, Z+1	; 0x01
    1612:	f2 81       	ldd	r31, Z+2	; 0x02
    1614:	e0 2d       	mov	r30, r0
    1616:	02 80       	ldd	r0, Z+2	; 0x02
    1618:	f3 81       	ldd	r31, Z+3	; 0x03
    161a:	e0 2d       	mov	r30, r0
    161c:	12 96       	adiw	r26, 0x02	; 2
    161e:	fc 93       	st	X, r31
    1620:	ee 93       	st	-X, r30
    1622:	11 97       	sbiw	r26, 0x01	; 1
    1624:	49 54       	subi	r20, 0x49	; 73
    1626:	58 4f       	sbci	r21, 0xF8	; 248
    1628:	e4 17       	cp	r30, r20
    162a:	f5 07       	cpc	r31, r21
    162c:	29 f4       	brne	.+10     	; 0x1638 <vTaskSwitchContext+0x78>
    162e:	42 81       	ldd	r20, Z+2	; 0x02
    1630:	53 81       	ldd	r21, Z+3	; 0x03
    1632:	fd 01       	movw	r30, r26
    1634:	52 83       	std	Z+2, r21	; 0x02
    1636:	41 83       	std	Z+1, r20	; 0x01
    1638:	fc 01       	movw	r30, r24
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	8e 0f       	add	r24, r30
    1648:	9f 1f       	adc	r25, r31
    164a:	fc 01       	movw	r30, r24
    164c:	ec 54       	subi	r30, 0x4C	; 76
    164e:	f8 4f       	sbci	r31, 0xF8	; 248
    1650:	01 80       	ldd	r0, Z+1	; 0x01
    1652:	f2 81       	ldd	r31, Z+2	; 0x02
    1654:	e0 2d       	mov	r30, r0
    1656:	86 81       	ldd	r24, Z+6	; 0x06
    1658:	97 81       	ldd	r25, Z+7	; 0x07
    165a:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxCurrentTCB+0x1>
    165e:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxCurrentTCB>
    1662:	20 93 7e 07 	sts	0x077E, r18	; 0x80077e <uxTopReadyPriority>
    1666:	08 95       	ret

00001668 <vTaskPlaceOnEventList>:
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	eb 01       	movw	r28, r22
    166e:	60 91 d8 07 	lds	r22, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1672:	70 91 d9 07 	lds	r23, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1676:	64 5f       	subi	r22, 0xF4	; 244
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	0e 94 33 03 	call	0x666	; 0x666 <vListInsert>
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	ce 01       	movw	r24, r28
    1682:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <prvAddCurrentTaskToDelayedList>
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <xTaskRemoveFromEventList>:
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	dc 01       	movw	r26, r24
    1692:	15 96       	adiw	r26, 0x05	; 5
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	16 97       	sbiw	r26, 0x06	; 6
    169a:	06 80       	ldd	r0, Z+6	; 0x06
    169c:	f7 81       	ldd	r31, Z+7	; 0x07
    169e:	e0 2d       	mov	r30, r0
    16a0:	a4 89       	ldd	r26, Z+20	; 0x14
    16a2:	b5 89       	ldd	r27, Z+21	; 0x15
    16a4:	c6 85       	ldd	r28, Z+14	; 0x0e
    16a6:	d7 85       	ldd	r29, Z+15	; 0x0f
    16a8:	80 89       	ldd	r24, Z+16	; 0x10
    16aa:	91 89       	ldd	r25, Z+17	; 0x11
    16ac:	9d 83       	std	Y+5, r25	; 0x05
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    16b0:	c0 89       	ldd	r28, Z+16	; 0x10
    16b2:	d1 89       	ldd	r29, Z+17	; 0x11
    16b4:	86 85       	ldd	r24, Z+14	; 0x0e
    16b6:	97 85       	ldd	r25, Z+15	; 0x0f
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	8d 91       	ld	r24, X+
    16c0:	9c 91       	ld	r25, X
    16c2:	12 97       	sbiw	r26, 0x02	; 2
    16c4:	9f 01       	movw	r18, r30
    16c6:	24 5f       	subi	r18, 0xF4	; 244
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	82 17       	cp	r24, r18
    16cc:	93 07       	cpc	r25, r19
    16ce:	31 f4       	brne	.+12     	; 0x16dc <xTaskRemoveFromEventList+0x50>
    16d0:	80 89       	ldd	r24, Z+16	; 0x10
    16d2:	91 89       	ldd	r25, Z+17	; 0x11
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
    16da:	11 97       	sbiw	r26, 0x01	; 1
    16dc:	15 8a       	std	Z+21, r1	; 0x15
    16de:	14 8a       	std	Z+20, r1	; 0x14
    16e0:	8c 91       	ld	r24, X
    16e2:	81 50       	subi	r24, 0x01	; 1
    16e4:	8c 93       	st	X, r24
    16e6:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxSchedulerSuspended>
    16ea:	81 11       	cpse	r24, r1
    16ec:	60 c0       	rjmp	.+192    	; 0x17ae <xTaskRemoveFromEventList+0x122>
    16ee:	a2 85       	ldd	r26, Z+10	; 0x0a
    16f0:	b3 85       	ldd	r27, Z+11	; 0x0b
    16f2:	c4 81       	ldd	r28, Z+4	; 0x04
    16f4:	d5 81       	ldd	r29, Z+5	; 0x05
    16f6:	86 81       	ldd	r24, Z+6	; 0x06
    16f8:	97 81       	ldd	r25, Z+7	; 0x07
    16fa:	9d 83       	std	Y+5, r25	; 0x05
    16fc:	8c 83       	std	Y+4, r24	; 0x04
    16fe:	c6 81       	ldd	r28, Z+6	; 0x06
    1700:	d7 81       	ldd	r29, Z+7	; 0x07
    1702:	84 81       	ldd	r24, Z+4	; 0x04
    1704:	95 81       	ldd	r25, Z+5	; 0x05
    1706:	9b 83       	std	Y+3, r25	; 0x03
    1708:	8a 83       	std	Y+2, r24	; 0x02
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	8d 91       	ld	r24, X+
    170e:	9c 91       	ld	r25, X
    1710:	12 97       	sbiw	r26, 0x02	; 2
    1712:	9f 01       	movw	r18, r30
    1714:	2e 5f       	subi	r18, 0xFE	; 254
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
    1718:	82 17       	cp	r24, r18
    171a:	93 07       	cpc	r25, r19
    171c:	31 f4       	brne	.+12     	; 0x172a <xTaskRemoveFromEventList+0x9e>
    171e:	86 81       	ldd	r24, Z+6	; 0x06
    1720:	97 81       	ldd	r25, Z+7	; 0x07
    1722:	12 96       	adiw	r26, 0x02	; 2
    1724:	9c 93       	st	X, r25
    1726:	8e 93       	st	-X, r24
    1728:	11 97       	sbiw	r26, 0x01	; 1
    172a:	13 86       	std	Z+11, r1	; 0x0b
    172c:	12 86       	std	Z+10, r1	; 0x0a
    172e:	8c 91       	ld	r24, X
    1730:	81 50       	subi	r24, 0x01	; 1
    1732:	8c 93       	st	X, r24
    1734:	86 89       	ldd	r24, Z+22	; 0x16
    1736:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    173a:	98 17       	cp	r25, r24
    173c:	10 f4       	brcc	.+4      	; 0x1742 <xTaskRemoveFromEventList+0xb6>
    173e:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	dc 01       	movw	r26, r24
    1746:	aa 0f       	add	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	aa 0f       	add	r26, r26
    174c:	bb 1f       	adc	r27, r27
    174e:	aa 0f       	add	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	8a 0f       	add	r24, r26
    1754:	9b 1f       	adc	r25, r27
    1756:	dc 01       	movw	r26, r24
    1758:	ac 54       	subi	r26, 0x4C	; 76
    175a:	b8 4f       	sbci	r27, 0xF8	; 248
    175c:	11 96       	adiw	r26, 0x01	; 1
    175e:	0d 90       	ld	r0, X+
    1760:	bc 91       	ld	r27, X
    1762:	a0 2d       	mov	r26, r0
    1764:	b5 83       	std	Z+5, r27	; 0x05
    1766:	a4 83       	std	Z+4, r26	; 0x04
    1768:	14 96       	adiw	r26, 0x04	; 4
    176a:	8d 91       	ld	r24, X+
    176c:	9c 91       	ld	r25, X
    176e:	15 97       	sbiw	r26, 0x05	; 5
    1770:	97 83       	std	Z+7, r25	; 0x07
    1772:	86 83       	std	Z+6, r24	; 0x06
    1774:	14 96       	adiw	r26, 0x04	; 4
    1776:	cd 91       	ld	r28, X+
    1778:	dc 91       	ld	r29, X
    177a:	15 97       	sbiw	r26, 0x05	; 5
    177c:	3b 83       	std	Y+3, r19	; 0x03
    177e:	2a 83       	std	Y+2, r18	; 0x02
    1780:	15 96       	adiw	r26, 0x05	; 5
    1782:	3c 93       	st	X, r19
    1784:	2e 93       	st	-X, r18
    1786:	14 97       	sbiw	r26, 0x04	; 4
    1788:	a6 89       	ldd	r26, Z+22	; 0x16
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	cd 01       	movw	r24, r26
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	a8 0f       	add	r26, r24
    179c:	b9 1f       	adc	r27, r25
    179e:	ac 54       	subi	r26, 0x4C	; 76
    17a0:	b8 4f       	sbci	r27, 0xF8	; 248
    17a2:	b3 87       	std	Z+11, r27	; 0x0b
    17a4:	a2 87       	std	Z+10, r26	; 0x0a
    17a6:	8c 91       	ld	r24, X
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8c 93       	st	X, r24
    17ac:	1c c0       	rjmp	.+56     	; 0x17e6 <xTaskRemoveFromEventList+0x15a>
    17ae:	45 e9       	ldi	r20, 0x95	; 149
    17b0:	57 e0       	ldi	r21, 0x07	; 7
    17b2:	da 01       	movw	r26, r20
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	cd 91       	ld	r28, X+
    17b8:	dc 91       	ld	r29, X
    17ba:	12 97       	sbiw	r26, 0x02	; 2
    17bc:	d7 87       	std	Z+15, r29	; 0x0f
    17be:	c6 87       	std	Z+14, r28	; 0x0e
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	91 8b       	std	Z+17, r25	; 0x11
    17c6:	80 8b       	std	Z+16, r24	; 0x10
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	dc 01       	movw	r26, r24
    17ce:	13 96       	adiw	r26, 0x03	; 3
    17d0:	3c 93       	st	X, r19
    17d2:	2e 93       	st	-X, r18
    17d4:	12 97       	sbiw	r26, 0x02	; 2
    17d6:	3d 83       	std	Y+5, r19	; 0x05
    17d8:	2c 83       	std	Y+4, r18	; 0x04
    17da:	55 8b       	std	Z+21, r21	; 0x15
    17dc:	44 8b       	std	Z+20, r20	; 0x14
    17de:	da 01       	movw	r26, r20
    17e0:	8c 91       	ld	r24, X
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	8c 93       	st	X, r24
    17e6:	96 89       	ldd	r25, Z+22	; 0x16
    17e8:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    17ec:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    17f0:	86 89       	ldd	r24, Z+22	; 0x16
    17f2:	89 17       	cp	r24, r25
    17f4:	20 f4       	brcc	.+8      	; 0x17fe <xTaskRemoveFromEventList+0x172>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xYieldPending>
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <xTaskRemoveFromEventList+0x174>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <vTaskInternalSetTimeOutState>:
    1806:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <xNumOfOverflows>
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18
    180e:	20 91 7f 07 	lds	r18, 0x077F	; 0x80077f <xTickCount>
    1812:	30 91 80 07 	lds	r19, 0x0780	; 0x800780 <xTickCount+0x1>
    1816:	32 83       	std	Z+2, r19	; 0x02
    1818:	21 83       	std	Z+1, r18	; 0x01
    181a:	08 95       	ret

0000181c <xTaskCheckForTimeOut>:
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	0f 92       	push	r0
    1828:	e0 91 7f 07 	lds	r30, 0x077F	; 0x80077f <xTickCount>
    182c:	f0 91 80 07 	lds	r31, 0x0780	; 0x800780 <xTickCount+0x1>
    1830:	dc 01       	movw	r26, r24
    1832:	11 96       	adiw	r26, 0x01	; 1
    1834:	4d 91       	ld	r20, X+
    1836:	5c 91       	ld	r21, X
    1838:	12 97       	sbiw	r26, 0x02	; 2
    183a:	df 01       	movw	r26, r30
    183c:	a4 1b       	sub	r26, r20
    183e:	b5 0b       	sbc	r27, r21
    1840:	eb 01       	movw	r28, r22
    1842:	28 81       	ld	r18, Y
    1844:	39 81       	ldd	r19, Y+1	; 0x01
    1846:	2f 3f       	cpi	r18, 0xFF	; 255
    1848:	df ef       	ldi	r29, 0xFF	; 255
    184a:	3d 07       	cpc	r19, r29
    184c:	f9 f0       	breq	.+62     	; 0x188c <xTaskCheckForTimeOut+0x70>
    184e:	ec 01       	movw	r28, r24
    1850:	18 81       	ld	r17, Y
    1852:	c0 91 79 07 	lds	r28, 0x0779	; 0x800779 <xNumOfOverflows>
    1856:	1c 17       	cp	r17, r28
    1858:	41 f0       	breq	.+16     	; 0x186a <xTaskCheckForTimeOut+0x4e>
    185a:	e4 17       	cp	r30, r20
    185c:	f5 07       	cpc	r31, r21
    185e:	28 f0       	brcs	.+10     	; 0x186a <xTaskCheckForTimeOut+0x4e>
    1860:	fb 01       	movw	r30, r22
    1862:	11 82       	std	Z+1, r1	; 0x01
    1864:	10 82       	st	Z, r1
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	12 c0       	rjmp	.+36     	; 0x188e <xTaskCheckForTimeOut+0x72>
    186a:	a2 17       	cp	r26, r18
    186c:	b3 07       	cpc	r27, r19
    186e:	48 f4       	brcc	.+18     	; 0x1882 <xTaskCheckForTimeOut+0x66>
    1870:	fb 01       	movw	r30, r22
    1872:	2a 1b       	sub	r18, r26
    1874:	3b 0b       	sbc	r19, r27
    1876:	31 83       	std	Z+1, r19	; 0x01
    1878:	20 83       	st	Z, r18
    187a:	0e 94 03 0c 	call	0x1806	; 0x1806 <vTaskInternalSetTimeOutState>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	06 c0       	rjmp	.+12     	; 0x188e <xTaskCheckForTimeOut+0x72>
    1882:	db 01       	movw	r26, r22
    1884:	1d 92       	st	X+, r1
    1886:	1c 92       	st	X, r1
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	01 c0       	rjmp	.+2      	; 0x188e <xTaskCheckForTimeOut+0x72>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	08 95       	ret

0000189a <vTaskMissedYield>:
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xYieldPending>
    18a0:	08 95       	ret

000018a2 <xTaskPriorityInherit>:
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	fc 01       	movw	r30, r24
    18ac:	89 2b       	or	r24, r25
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <xTaskPriorityInherit+0x10>
    18b0:	84 c0       	rjmp	.+264    	; 0x19ba <xTaskPriorityInherit+0x118>
    18b2:	26 89       	ldd	r18, Z+22	; 0x16
    18b4:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    18b8:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    18bc:	56 96       	adiw	r26, 0x16	; 22
    18be:	8c 91       	ld	r24, X
    18c0:	28 17       	cp	r18, r24
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <xTaskPriorityInherit+0x24>
    18c4:	70 c0       	rjmp	.+224    	; 0x19a6 <xTaskPriorityInherit+0x104>
    18c6:	84 85       	ldd	r24, Z+12	; 0x0c
    18c8:	95 85       	ldd	r25, Z+13	; 0x0d
    18ca:	99 23       	and	r25, r25
    18cc:	64 f0       	brlt	.+24     	; 0x18e6 <xTaskPriorityInherit+0x44>
    18ce:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    18d2:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    18d6:	56 96       	adiw	r26, 0x16	; 22
    18d8:	3c 91       	ld	r19, X
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	83 1b       	sub	r24, r19
    18e0:	91 09       	sbc	r25, r1
    18e2:	95 87       	std	Z+13, r25	; 0x0d
    18e4:	84 87       	std	Z+12, r24	; 0x0c
    18e6:	82 85       	ldd	r24, Z+10	; 0x0a
    18e8:	93 85       	ldd	r25, Z+11	; 0x0b
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	44 0f       	add	r20, r20
    18f0:	55 1f       	adc	r21, r21
    18f2:	44 0f       	add	r20, r20
    18f4:	55 1f       	adc	r21, r21
    18f6:	44 0f       	add	r20, r20
    18f8:	55 1f       	adc	r21, r21
    18fa:	24 0f       	add	r18, r20
    18fc:	35 1f       	adc	r19, r21
    18fe:	2c 54       	subi	r18, 0x4C	; 76
    1900:	38 4f       	sbci	r19, 0xF8	; 248
    1902:	82 17       	cp	r24, r18
    1904:	93 07       	cpc	r25, r19
    1906:	09 f0       	breq	.+2      	; 0x190a <xTaskPriorityInherit+0x68>
    1908:	45 c0       	rjmp	.+138    	; 0x1994 <xTaskPriorityInherit+0xf2>
    190a:	ef 01       	movw	r28, r30
    190c:	8f 01       	movw	r16, r30
    190e:	0e 5f       	subi	r16, 0xFE	; 254
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	c8 01       	movw	r24, r16
    1914:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    1918:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    191c:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1920:	86 89       	ldd	r24, Z+22	; 0x16
    1922:	8e 8b       	std	Y+22, r24	; 0x16
    1924:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1928:	98 17       	cp	r25, r24
    192a:	10 f4       	brcc	.+4      	; 0x1930 <xTaskPriorityInherit+0x8e>
    192c:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	fc 01       	movw	r30, r24
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	8e 0f       	add	r24, r30
    1942:	9f 1f       	adc	r25, r31
    1944:	fc 01       	movw	r30, r24
    1946:	ec 54       	subi	r30, 0x4C	; 76
    1948:	f8 4f       	sbci	r31, 0xF8	; 248
    194a:	01 80       	ldd	r0, Z+1	; 0x01
    194c:	f2 81       	ldd	r31, Z+2	; 0x02
    194e:	e0 2d       	mov	r30, r0
    1950:	fd 83       	std	Y+5, r31	; 0x05
    1952:	ec 83       	std	Y+4, r30	; 0x04
    1954:	84 81       	ldd	r24, Z+4	; 0x04
    1956:	95 81       	ldd	r25, Z+5	; 0x05
    1958:	9f 83       	std	Y+7, r25	; 0x07
    195a:	8e 83       	std	Y+6, r24	; 0x06
    195c:	a4 81       	ldd	r26, Z+4	; 0x04
    195e:	b5 81       	ldd	r27, Z+5	; 0x05
    1960:	13 96       	adiw	r26, 0x03	; 3
    1962:	1c 93       	st	X, r17
    1964:	0e 93       	st	-X, r16
    1966:	12 97       	sbiw	r26, 0x02	; 2
    1968:	15 83       	std	Z+5, r17	; 0x05
    196a:	04 83       	std	Z+4, r16	; 0x04
    196c:	8e 89       	ldd	r24, Y+22	; 0x16
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	fc 01       	movw	r30, r24
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	e8 0f       	add	r30, r24
    1980:	f9 1f       	adc	r31, r25
    1982:	ec 54       	subi	r30, 0x4C	; 76
    1984:	f8 4f       	sbci	r31, 0xF8	; 248
    1986:	fb 87       	std	Y+11, r31	; 0x0b
    1988:	ea 87       	std	Y+10, r30	; 0x0a
    198a:	80 81       	ld	r24, Z
    198c:	8f 5f       	subi	r24, 0xFF	; 255
    198e:	80 83       	st	Z, r24
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	16 c0       	rjmp	.+44     	; 0x19c0 <xTaskPriorityInherit+0x11e>
    1994:	a0 91 d8 07 	lds	r26, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1998:	b0 91 d9 07 	lds	r27, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    199c:	56 96       	adiw	r26, 0x16	; 22
    199e:	8c 91       	ld	r24, X
    19a0:	86 8b       	std	Z+22, r24	; 0x16
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <xTaskPriorityInherit+0x11e>
    19a6:	91 a1       	ldd	r25, Z+33	; 0x21
    19a8:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    19ac:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    19b0:	86 89       	ldd	r24, Z+22	; 0x16
    19b2:	98 17       	cp	r25, r24
    19b4:	20 f0       	brcs	.+8      	; 0x19be <xTaskPriorityInherit+0x11c>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <xTaskPriorityInherit+0x11e>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <xTaskPriorityInherit+0x11e>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <xTaskPriorityDisinherit>:
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	fc 01       	movw	r30, r24
    19d4:	89 2b       	or	r24, r25
    19d6:	09 f4       	brne	.+2      	; 0x19da <xTaskPriorityDisinherit+0x10>
    19d8:	51 c0       	rjmp	.+162    	; 0x1a7c <xTaskPriorityDisinherit+0xb2>
    19da:	82 a1       	ldd	r24, Z+34	; 0x22
    19dc:	81 50       	subi	r24, 0x01	; 1
    19de:	82 a3       	std	Z+34, r24	; 0x22
    19e0:	26 89       	ldd	r18, Z+22	; 0x16
    19e2:	91 a1       	ldd	r25, Z+33	; 0x21
    19e4:	29 17       	cp	r18, r25
    19e6:	09 f4       	brne	.+2      	; 0x19ea <xTaskPriorityDisinherit+0x20>
    19e8:	4b c0       	rjmp	.+150    	; 0x1a80 <xTaskPriorityDisinherit+0xb6>
    19ea:	81 11       	cpse	r24, r1
    19ec:	4b c0       	rjmp	.+150    	; 0x1a84 <xTaskPriorityDisinherit+0xba>
    19ee:	ef 01       	movw	r28, r30
    19f0:	8f 01       	movw	r16, r30
    19f2:	0e 5f       	subi	r16, 0xFE	; 254
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	c8 01       	movw	r24, r16
    19f8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    19fc:	89 a1       	ldd	r24, Y+33	; 0x21
    19fe:	8e 8b       	std	Y+22, r24	; 0x16
    1a00:	24 e0       	ldi	r18, 0x04	; 4
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	28 1b       	sub	r18, r24
    1a06:	31 09       	sbc	r19, r1
    1a08:	3d 87       	std	Y+13, r19	; 0x0d
    1a0a:	2c 87       	std	Y+12, r18	; 0x0c
    1a0c:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1a10:	98 17       	cp	r25, r24
    1a12:	10 f4       	brcc	.+4      	; 0x1a18 <xTaskPriorityDisinherit+0x4e>
    1a14:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	8e 0f       	add	r24, r30
    1a2a:	9f 1f       	adc	r25, r31
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	ec 54       	subi	r30, 0x4C	; 76
    1a30:	f8 4f       	sbci	r31, 0xF8	; 248
    1a32:	01 80       	ldd	r0, Z+1	; 0x01
    1a34:	f2 81       	ldd	r31, Z+2	; 0x02
    1a36:	e0 2d       	mov	r30, r0
    1a38:	fd 83       	std	Y+5, r31	; 0x05
    1a3a:	ec 83       	std	Y+4, r30	; 0x04
    1a3c:	84 81       	ldd	r24, Z+4	; 0x04
    1a3e:	95 81       	ldd	r25, Z+5	; 0x05
    1a40:	9f 83       	std	Y+7, r25	; 0x07
    1a42:	8e 83       	std	Y+6, r24	; 0x06
    1a44:	a4 81       	ldd	r26, Z+4	; 0x04
    1a46:	b5 81       	ldd	r27, Z+5	; 0x05
    1a48:	13 96       	adiw	r26, 0x03	; 3
    1a4a:	1c 93       	st	X, r17
    1a4c:	0e 93       	st	-X, r16
    1a4e:	12 97       	sbiw	r26, 0x02	; 2
    1a50:	15 83       	std	Z+5, r17	; 0x05
    1a52:	04 83       	std	Z+4, r16	; 0x04
    1a54:	ee 89       	ldd	r30, Y+22	; 0x16
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	cf 01       	movw	r24, r30
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	e8 0f       	add	r30, r24
    1a68:	f9 1f       	adc	r31, r25
    1a6a:	ec 54       	subi	r30, 0x4C	; 76
    1a6c:	f8 4f       	sbci	r31, 0xF8	; 248
    1a6e:	fb 87       	std	Y+11, r31	; 0x0b
    1a70:	ea 87       	std	Y+10, r30	; 0x0a
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <xTaskPriorityDisinherit+0xbc>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <xTaskPriorityDisinherit+0xbc>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <xTaskPriorityDisinherit+0xbc>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <vTaskPriorityDisinheritAfterTimeout>:
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	fc 01       	movw	r30, r24
    1a9a:	89 2b       	or	r24, r25
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1a9e:	66 c0       	rjmp	.+204    	; 0x1b6c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1aa0:	91 a1       	ldd	r25, Z+33	; 0x21
    1aa2:	96 17       	cp	r25, r22
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1aa6:	96 2f       	mov	r25, r22
    1aa8:	86 89       	ldd	r24, Z+22	; 0x16
    1aaa:	98 17       	cp	r25, r24
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1aae:	5e c0       	rjmp	.+188    	; 0x1b6c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1ab0:	22 a1       	ldd	r18, Z+34	; 0x22
    1ab2:	21 30       	cpi	r18, 0x01	; 1
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    1ab6:	5a c0       	rjmp	.+180    	; 0x1b6c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1ab8:	96 8b       	std	Z+22, r25	; 0x16
    1aba:	24 85       	ldd	r18, Z+12	; 0x0c
    1abc:	35 85       	ldd	r19, Z+13	; 0x0d
    1abe:	33 23       	and	r19, r19
    1ac0:	34 f0       	brlt	.+12     	; 0x1ace <vTaskPriorityDisinheritAfterTimeout+0x3e>
    1ac2:	24 e0       	ldi	r18, 0x04	; 4
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	29 1b       	sub	r18, r25
    1ac8:	31 09       	sbc	r19, r1
    1aca:	35 87       	std	Z+13, r19	; 0x0d
    1acc:	24 87       	std	Z+12, r18	; 0x0c
    1ace:	22 85       	ldd	r18, Z+10	; 0x0a
    1ad0:	33 85       	ldd	r19, Z+11	; 0x0b
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	ac 01       	movw	r20, r24
    1ad6:	44 0f       	add	r20, r20
    1ad8:	55 1f       	adc	r21, r21
    1ada:	44 0f       	add	r20, r20
    1adc:	55 1f       	adc	r21, r21
    1ade:	44 0f       	add	r20, r20
    1ae0:	55 1f       	adc	r21, r21
    1ae2:	84 0f       	add	r24, r20
    1ae4:	95 1f       	adc	r25, r21
    1ae6:	8c 54       	subi	r24, 0x4C	; 76
    1ae8:	98 4f       	sbci	r25, 0xF8	; 248
    1aea:	28 17       	cp	r18, r24
    1aec:	39 07       	cpc	r19, r25
    1aee:	f1 f5       	brne	.+124    	; 0x1b6c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    1af0:	ef 01       	movw	r28, r30
    1af2:	8f 01       	movw	r16, r30
    1af4:	0e 5f       	subi	r16, 0xFE	; 254
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	c8 01       	movw	r24, r16
    1afa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <uxListRemove>
    1afe:	8e 89       	ldd	r24, Y+22	; 0x16
    1b00:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <uxTopReadyPriority>
    1b04:	98 17       	cp	r25, r24
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1b08:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxTopReadyPriority>
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	fc 01       	movw	r30, r24
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	8e 0f       	add	r24, r30
    1b1e:	9f 1f       	adc	r25, r31
    1b20:	fc 01       	movw	r30, r24
    1b22:	ec 54       	subi	r30, 0x4C	; 76
    1b24:	f8 4f       	sbci	r31, 0xF8	; 248
    1b26:	01 80       	ldd	r0, Z+1	; 0x01
    1b28:	f2 81       	ldd	r31, Z+2	; 0x02
    1b2a:	e0 2d       	mov	r30, r0
    1b2c:	fd 83       	std	Y+5, r31	; 0x05
    1b2e:	ec 83       	std	Y+4, r30	; 0x04
    1b30:	84 81       	ldd	r24, Z+4	; 0x04
    1b32:	95 81       	ldd	r25, Z+5	; 0x05
    1b34:	9f 83       	std	Y+7, r25	; 0x07
    1b36:	8e 83       	std	Y+6, r24	; 0x06
    1b38:	a4 81       	ldd	r26, Z+4	; 0x04
    1b3a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b3c:	13 96       	adiw	r26, 0x03	; 3
    1b3e:	1c 93       	st	X, r17
    1b40:	0e 93       	st	-X, r16
    1b42:	12 97       	sbiw	r26, 0x02	; 2
    1b44:	15 83       	std	Z+5, r17	; 0x05
    1b46:	04 83       	std	Z+4, r16	; 0x04
    1b48:	8e 89       	ldd	r24, Y+22	; 0x16
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	e8 0f       	add	r30, r24
    1b5c:	f9 1f       	adc	r31, r25
    1b5e:	ec 54       	subi	r30, 0x4C	; 76
    1b60:	f8 4f       	sbci	r31, 0xF8	; 248
    1b62:	fb 87       	std	Y+11, r31	; 0x0b
    1b64:	ea 87       	std	Y+10, r30	; 0x0a
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	80 83       	st	Z, r24
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	08 95       	ret

00001b76 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1b76:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b7a:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b7e:	89 2b       	or	r24, r25
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1b82:	e0 91 d8 07 	lds	r30, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b86:	f0 91 d9 07 	lds	r31, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    1b8a:	82 a1       	ldd	r24, Z+34	; 0x22
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1b90:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxCurrentTCB>
    1b94:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxCurrentTCB+0x1>
    }
    1b98:	08 95       	ret

00001b9a <prints>:
uint16_t o_ctr=0,h_ctr=0;



void prints( char * msg)
{
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	8c 01       	movw	r16, r24
	uint8_t i =0;
    1ba2:	c0 e0       	ldi	r28, 0x00	; 0
	while(msg[i] != '\0')
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <prints+0x12>
	{
		UATR_SEND(msg[i]);
    1ba6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UATR_SEND>
		i++;
    1baa:	cf 5f       	subi	r28, 0xFF	; 255


void prints( char * msg)
{
	uint8_t i =0;
	while(msg[i] != '\0')
    1bac:	f8 01       	movw	r30, r16
    1bae:	ec 0f       	add	r30, r28
    1bb0:	f1 1d       	adc	r31, r1
    1bb2:	80 81       	ld	r24, Z
    1bb4:	81 11       	cpse	r24, r1
    1bb6:	f7 cf       	rjmp	.-18     	; 0x1ba6 <prints+0xc>
	{
		UATR_SEND(msg[i]);
		i++;
	}
	
}
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <printi>:
void printi(uint8_t x)
{
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	2a 97       	sbiw	r28, 0x0a	; 10
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
	char asci_num[]={'0','1','2','3','4','5','6','7','8','9'};
    1bd6:	9a e0       	ldi	r25, 0x0A	; 10
    1bd8:	e3 e0       	ldi	r30, 0x03	; 3
    1bda:	f1 e0       	ldi	r31, 0x01	; 1
    1bdc:	de 01       	movw	r26, r28
    1bde:	11 96       	adiw	r26, 0x01	; 1
    1be0:	01 90       	ld	r0, Z+
    1be2:	0d 92       	st	X+, r0
    1be4:	9a 95       	dec	r25
    1be6:	e1 f7       	brne	.-8      	; 0x1be0 <printi+0x20>
	uint8_t digit1=0,digit2=0;
	
	digit1 = x % 10;
    1be8:	3d ec       	ldi	r19, 0xCD	; 205
    1bea:	83 9f       	mul	r24, r19
    1bec:	91 2d       	mov	r25, r1
    1bee:	11 24       	eor	r1, r1
    1bf0:	96 95       	lsr	r25
    1bf2:	96 95       	lsr	r25
    1bf4:	96 95       	lsr	r25
    1bf6:	99 0f       	add	r25, r25
    1bf8:	29 2f       	mov	r18, r25
    1bfa:	22 0f       	add	r18, r18
    1bfc:	22 0f       	add	r18, r18
    1bfe:	92 0f       	add	r25, r18
    1c00:	28 2f       	mov	r18, r24
    1c02:	29 1b       	sub	r18, r25
    1c04:	92 2f       	mov	r25, r18
	digit2 = (x %100) / 10;
    1c06:	29 e2       	ldi	r18, 0x29	; 41
    1c08:	82 9f       	mul	r24, r18
    1c0a:	21 2d       	mov	r18, r1
    1c0c:	11 24       	eor	r1, r1
    1c0e:	22 95       	swap	r18
    1c10:	2f 70       	andi	r18, 0x0F	; 15
    1c12:	44 e6       	ldi	r20, 0x64	; 100
    1c14:	24 9f       	mul	r18, r20
    1c16:	80 19       	sub	r24, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	83 9f       	mul	r24, r19
    1c1c:	81 2d       	mov	r24, r1
    1c1e:	11 24       	eor	r1, r1
    1c20:	86 95       	lsr	r24
    1c22:	86 95       	lsr	r24
    1c24:	86 95       	lsr	r24
	
	char tmp[2] ;
	tmp[0] = asci_num[digit1];
    1c26:	e1 e0       	ldi	r30, 0x01	; 1
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	ec 0f       	add	r30, r28
    1c2c:	fd 1f       	adc	r31, r29
    1c2e:	e9 0f       	add	r30, r25
    1c30:	f1 1d       	adc	r31, r1
    1c32:	10 81       	ld	r17, Z
	tmp[1] = asci_num[digit2];
    1c34:	e1 e0       	ldi	r30, 0x01	; 1
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ec 0f       	add	r30, r28
    1c3a:	fd 1f       	adc	r31, r29
    1c3c:	e8 0f       	add	r30, r24
    1c3e:	f1 1d       	adc	r31, r1
	
	
	UATR_SEND(tmp[1]);
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UATR_SEND>
	UATR_SEND(tmp[0]);
    1c46:	81 2f       	mov	r24, r17
    1c48:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UATR_SEND>
	
	
	
}
    1c4c:	2a 96       	adiw	r28, 0x0a	; 10
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	08 95       	ret

00001c60 <task2>:

void task2(void)//button task
{
	while (1)
	{
		if (xSemaphoreTake(Mutex1,(TickType_t)1000)==pdTRUE)
    1c60:	68 ee       	ldi	r22, 0xE8	; 232
    1c62:	73 e0       	ldi	r23, 0x03	; 3
    1c64:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <Mutex1>
    1c68:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <Mutex1+0x1>
    1c6c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xQueueSemaphoreTake>
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	b1 f7       	brne	.-20     	; 0x1c60 <task2>
		{
			
			 o_ctr++;
    1c74:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <o_ctr>
    1c78:	90 91 dd 07 	lds	r25, 0x07DD	; 0x8007dd <o_ctr+0x1>
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	90 93 dd 07 	sts	0x07DD, r25	; 0x8007dd <o_ctr+0x1>
    1c82:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <o_ctr>
			 prints("o is incremented ... \n");
    1c86:	82 e1       	ldi	r24, 0x12	; 18
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
			 
			 prints("o = ");  printi(o_ctr);
    1c8e:	89 e4       	ldi	r24, 0x49	; 73
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
    1c96:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <o_ctr>
    1c9a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <printi>
			 prints('\n') ;
    1c9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
			 
			 if (water_condition)
    1ca6:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <h_ctr>
    1caa:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <h_ctr+0x1>
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	08 f4       	brcc	.+2      	; 0x1cb6 <task2+0x56>
    1cb4:	44 c0       	rjmp	.+136    	; 0x1d3e <task2+0xde>
    1cb6:	20 91 dc 07 	lds	r18, 0x07DC	; 0x8007dc <o_ctr>
    1cba:	30 91 dd 07 	lds	r19, 0x07DD	; 0x8007dd <o_ctr+0x1>
    1cbe:	21 15       	cp	r18, r1
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	e9 f1       	breq	.+122    	; 0x1d3e <task2+0xde>
			 {
				 o_ctr--; h_ctr-=2;
    1cc4:	21 50       	subi	r18, 0x01	; 1
    1cc6:	31 09       	sbc	r19, r1
    1cc8:	30 93 dd 07 	sts	0x07DD, r19	; 0x8007dd <o_ctr+0x1>
    1ccc:	20 93 dc 07 	sts	0x07DC, r18	; 0x8007dc <o_ctr>
    1cd0:	02 97       	sbiw	r24, 0x02	; 2
    1cd2:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <h_ctr+0x1>
    1cd6:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <h_ctr>
				 prints("new water created .... \n");
    1cda:	89 e2       	ldi	r24, 0x29	; 41
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
				 prints(" h = ");  printi(h_ctr);
    1ce2:	82 e4       	ldi	r24, 0x42	; 66
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
    1cea:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <h_ctr>
    1cee:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <printi>
				 // print('\n') ;
				 prints(" o = ");  printi(o_ctr);
    1cf2:	88 e4       	ldi	r24, 0x48	; 72
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
    1cfa:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <o_ctr>
    1cfe:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <printi>
				 prints('\n') ;
    1d02:	8a e0       	ldi	r24, 0x0A	; 10
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
				 
				 out(D4,'h');
    1d0a:	68 e6       	ldi	r22, 0x68	; 104
    1d0c:	8c e2       	ldi	r24, 0x2C	; 44
    1d0e:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d12:	2f ef       	ldi	r18, 0xFF	; 255
    1d14:	89 e6       	ldi	r24, 0x69	; 105
    1d16:	98 e1       	ldi	r25, 0x18	; 24
    1d18:	21 50       	subi	r18, 0x01	; 1
    1d1a:	80 40       	sbci	r24, 0x00	; 0
    1d1c:	90 40       	sbci	r25, 0x00	; 0
    1d1e:	e1 f7       	brne	.-8      	; 0x1d18 <task2+0xb8>
    1d20:	00 c0       	rjmp	.+0      	; 0x1d22 <task2+0xc2>
    1d22:	00 00       	nop
				 _delay_ms(500);
				 out(D4,'l');
    1d24:	6c e6       	ldi	r22, 0x6C	; 108
    1d26:	8c e2       	ldi	r24, 0x2C	; 44
    1d28:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
    1d2c:	2f ef       	ldi	r18, 0xFF	; 255
    1d2e:	89 e6       	ldi	r24, 0x69	; 105
    1d30:	98 e1       	ldi	r25, 0x18	; 24
    1d32:	21 50       	subi	r18, 0x01	; 1
    1d34:	80 40       	sbci	r24, 0x00	; 0
    1d36:	90 40       	sbci	r25, 0x00	; 0
    1d38:	e1 f7       	brne	.-8      	; 0x1d32 <task2+0xd2>
    1d3a:	00 c0       	rjmp	.+0      	; 0x1d3c <task2+0xdc>
    1d3c:	00 00       	nop
    1d3e:	2f ef       	ldi	r18, 0xFF	; 255
    1d40:	8b e7       	ldi	r24, 0x7B	; 123
    1d42:	92 e9       	ldi	r25, 0x92	; 146
    1d44:	21 50       	subi	r18, 0x01	; 1
    1d46:	80 40       	sbci	r24, 0x00	; 0
    1d48:	90 40       	sbci	r25, 0x00	; 0
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <task2+0xe4>
    1d4c:	00 c0       	rjmp	.+0      	; 0x1d4e <task2+0xee>
    1d4e:	00 00       	nop
				 _delay_ms(500);
			 }
			 
			 _delay_ms(3000);
			 
		 xSemaphoreGive(Mutex1);		
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <Mutex1>
    1d5e:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <Mutex1+0x1>
    1d62:	0e 94 fd 04 	call	0x9fa	; 0x9fa <xQueueGenericSend>
    1d66:	7c cf       	rjmp	.-264    	; 0x1c60 <task2>

00001d68 <task1>:
	
	   
	while (1)
	{
		
		h_ctr++;
    1d68:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <h_ctr>
    1d6c:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <h_ctr+0x1>
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <h_ctr+0x1>
    1d76:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <h_ctr>
		prints("h is incremented ... \n");
    1d7a:	8e e4       	ldi	r24, 0x4E	; 78
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
		prints("h = ");  printi(h_ctr);
    1d82:	83 e4       	ldi	r24, 0x43	; 67
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
    1d8a:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <h_ctr>
    1d8e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <printi>
		prints('\n') ;
    1d92:	8a e0       	ldi	r24, 0x0A	; 10
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
		if (water_condition)
    1d9a:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <h_ctr>
    1d9e:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <h_ctr+0x1>
    1da2:	82 30       	cpi	r24, 0x02	; 2
    1da4:	91 05       	cpc	r25, r1
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <task1+0x42>
    1da8:	44 c0       	rjmp	.+136    	; 0x1e32 <task1+0xca>
    1daa:	20 91 dc 07 	lds	r18, 0x07DC	; 0x8007dc <o_ctr>
    1dae:	30 91 dd 07 	lds	r19, 0x07DD	; 0x8007dd <o_ctr+0x1>
    1db2:	21 15       	cp	r18, r1
    1db4:	31 05       	cpc	r19, r1
    1db6:	e9 f1       	breq	.+122    	; 0x1e32 <task1+0xca>
		{ 	o_ctr--; h_ctr-=2;
    1db8:	21 50       	subi	r18, 0x01	; 1
    1dba:	31 09       	sbc	r19, r1
    1dbc:	30 93 dd 07 	sts	0x07DD, r19	; 0x8007dd <o_ctr+0x1>
    1dc0:	20 93 dc 07 	sts	0x07DC, r18	; 0x8007dc <o_ctr>
    1dc4:	02 97       	sbiw	r24, 0x02	; 2
    1dc6:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <h_ctr+0x1>
    1dca:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <h_ctr>
			prints("new water created ....\n");
    1dce:	85 e6       	ldi	r24, 0x65	; 101
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
			prints(" h = ");  printi(h_ctr);
    1dd6:	82 e4       	ldi	r24, 0x42	; 66
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
    1dde:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <h_ctr>
    1de2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <printi>
			// print('\n') ;
			prints(" o = ");  printi(o_ctr);
    1de6:	88 e4       	ldi	r24, 0x48	; 72
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
    1dee:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <o_ctr>
    1df2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <printi>
			prints('\n') ;
    1df6:	8a e0       	ldi	r24, 0x0A	; 10
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prints>
			
			out(D4,'h');
    1dfe:	68 e6       	ldi	r22, 0x68	; 104
    1e00:	8c e2       	ldi	r24, 0x2C	; 44
    1e02:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
    1e06:	2f ef       	ldi	r18, 0xFF	; 255
    1e08:	89 e6       	ldi	r24, 0x69	; 105
    1e0a:	98 e1       	ldi	r25, 0x18	; 24
    1e0c:	21 50       	subi	r18, 0x01	; 1
    1e0e:	80 40       	sbci	r24, 0x00	; 0
    1e10:	90 40       	sbci	r25, 0x00	; 0
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <task1+0xa4>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <task1+0xae>
    1e16:	00 00       	nop
			_delay_ms(500);
			out(D4,'l');
    1e18:	6c e6       	ldi	r22, 0x6C	; 108
    1e1a:	8c e2       	ldi	r24, 0x2C	; 44
    1e1c:	0e 94 53 00 	call	0xa6	; 0xa6 <out>
    1e20:	2f ef       	ldi	r18, 0xFF	; 255
    1e22:	89 e6       	ldi	r24, 0x69	; 105
    1e24:	98 e1       	ldi	r25, 0x18	; 24
    1e26:	21 50       	subi	r18, 0x01	; 1
    1e28:	80 40       	sbci	r24, 0x00	; 0
    1e2a:	90 40       	sbci	r25, 0x00	; 0
    1e2c:	e1 f7       	brne	.-8      	; 0x1e26 <task1+0xbe>
    1e2e:	00 c0       	rjmp	.+0      	; 0x1e30 <task1+0xc8>
    1e30:	00 00       	nop
    1e32:	2f ef       	ldi	r18, 0xFF	; 255
    1e34:	83 ed       	ldi	r24, 0xD3	; 211
    1e36:	90 e3       	ldi	r25, 0x30	; 48
    1e38:	21 50       	subi	r18, 0x01	; 1
    1e3a:	80 40       	sbci	r24, 0x00	; 0
    1e3c:	90 40       	sbci	r25, 0x00	; 0
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <task1+0xd0>
    1e40:	00 c0       	rjmp	.+0      	; 0x1e42 <task1+0xda>
    1e42:	00 00       	nop
			_delay_ms(500);
			
		}
		_delay_ms(1000);
			
			xSemaphoreGive(Mutex1);
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	50 e0       	ldi	r21, 0x00	; 0
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <Mutex1>
    1e52:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <Mutex1+0x1>
    1e56:	0e 94 fd 04 	call	0x9fa	; 0x9fa <xQueueGenericSend>
			
		}
    1e5a:	86 cf       	rjmp	.-244    	; 0x1d68 <task1>

00001e5c <init>:

 
 void init()
  {
	 
	 UART_init();
    1e5c:	0e 94 c5 00 	call	0x18a	; 0x18a <UART_init>
    1e60:	08 95       	ret

00001e62 <main>:
	



int main(void)
{
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <main+0xc>
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <main+0xe>
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    init();
    1e74:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <init>
	
	TaskHandle_t task1_h,task2_h;
	
	Mutex1 = xSemaphoreCreateMutex();
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xQueueCreateMutex>
    1e7e:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <Mutex1+0x1>
    1e82:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <Mutex1>
	xTaskCreate(task1,"process",250,NULL,1,&task1_h);
    1e86:	ce 01       	movw	r24, r28
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	7c 01       	movw	r14, r24
    1e8c:	01 e0       	ldi	r16, 0x01	; 1
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a ef       	ldi	r20, 0xFA	; 250
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	6d e7       	ldi	r22, 0x7D	; 125
    1e98:	71 e0       	ldi	r23, 0x01	; 1
    1e9a:	84 eb       	ldi	r24, 0xB4	; 180
    1e9c:	9e e0       	ldi	r25, 0x0E	; 14
    1e9e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <xTaskCreate>
	xTaskCreate(task2,"handler",250,NULL,1,&task2_h);
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	03 96       	adiw	r24, 0x03	; 3
    1ea6:	7c 01       	movw	r14, r24
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a ef       	ldi	r20, 0xFA	; 250
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	65 e8       	ldi	r22, 0x85	; 133
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	80 e3       	ldi	r24, 0x30	; 48
    1eb6:	9e e0       	ldi	r25, 0x0E	; 14
    1eb8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <xTaskCreate>
	
	
	vTaskStartScheduler();
    1ebc:	0e 94 bf 08 	call	0x117e	; 0x117e <vTaskStartScheduler>
	
	
	
   
}
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	08 95       	ret

00001ed8 <__udivmodhi4>:
    1ed8:	aa 1b       	sub	r26, r26
    1eda:	bb 1b       	sub	r27, r27
    1edc:	51 e1       	ldi	r21, 0x11	; 17
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <__udivmodhi4_ep>

00001ee0 <__udivmodhi4_loop>:
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	a6 17       	cp	r26, r22
    1ee6:	b7 07       	cpc	r27, r23
    1ee8:	10 f0       	brcs	.+4      	; 0x1eee <__udivmodhi4_ep>
    1eea:	a6 1b       	sub	r26, r22
    1eec:	b7 0b       	sbc	r27, r23

00001eee <__udivmodhi4_ep>:
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	5a 95       	dec	r21
    1ef4:	a9 f7       	brne	.-22     	; 0x1ee0 <__udivmodhi4_loop>
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	08 95       	ret

00001f00 <memcpy>:
    1f00:	fb 01       	movw	r30, r22
    1f02:	dc 01       	movw	r26, r24
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <memcpy+0xa>
    1f06:	01 90       	ld	r0, Z+
    1f08:	0d 92       	st	X+, r0
    1f0a:	41 50       	subi	r20, 0x01	; 1
    1f0c:	50 40       	sbci	r21, 0x00	; 0
    1f0e:	d8 f7       	brcc	.-10     	; 0x1f06 <memcpy+0x6>
    1f10:	08 95       	ret

00001f12 <_exit>:
    1f12:	f8 94       	cli

00001f14 <__stop_program>:
    1f14:	ff cf       	rjmp	.-2      	; 0x1f14 <__stop_program>
