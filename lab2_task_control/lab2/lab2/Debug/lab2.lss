
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001fc0  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000662  00800116  00800116  0000206a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003980  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb8  00000000  00000000  00005ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000230f  00000000  00000000  00006b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  00008e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011a3  00000000  00000000  00009628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003734  00000000  00000000  0000a7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000deff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_11>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	87 08       	sbc	r8, r7
      6a:	9b 08       	sbc	r9, r11
      6c:	89 08       	sbc	r8, r9
      6e:	8b 08       	sbc	r8, r11
      70:	8d 08       	sbc	r8, r13
      72:	8f 08       	sbc	r8, r15
      74:	91 08       	sbc	r9, r1
      76:	93 08       	sbc	r9, r3
      78:	95 08       	sbc	r9, r5
      7a:	97 08       	sbc	r9, r7

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 ec       	ldi	r30, 0xC0	; 192
      90:	ff e1       	ldi	r31, 0x1F	; 31
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 31       	cpi	r26, 0x16	; 22
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a6 e1       	ldi	r26, 0x16	; 22
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 37       	cpi	r26, 0x78	; 120
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <main>
      b2:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
      ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
      be:	8c e7       	ldi	r24, 0x7C	; 124
      c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
      c4:	8b e0       	ldi	r24, 0x0B	; 11
      c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
      ca:	ef e6       	ldi	r30, 0x6F	; 111
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	82 60       	ori	r24, 0x02	; 2
      d2:	80 83       	st	Z, r24
      d4:	08 95       	ret

000000d6 <pxPortInitialiseStack>:
      d6:	31 e1       	ldi	r19, 0x11	; 17
      d8:	fc 01       	movw	r30, r24
      da:	30 83       	st	Z, r19
      dc:	31 97       	sbiw	r30, 0x01	; 1
      de:	22 e2       	ldi	r18, 0x22	; 34
      e0:	20 83       	st	Z, r18
      e2:	31 97       	sbiw	r30, 0x01	; 1
      e4:	a3 e3       	ldi	r26, 0x33	; 51
      e6:	a0 83       	st	Z, r26
      e8:	31 97       	sbiw	r30, 0x01	; 1
      ea:	60 83       	st	Z, r22
      ec:	31 97       	sbiw	r30, 0x01	; 1
      ee:	70 83       	st	Z, r23
      f0:	31 97       	sbiw	r30, 0x01	; 1
      f2:	10 82       	st	Z, r1
      f4:	31 97       	sbiw	r30, 0x01	; 1
      f6:	60 e8       	ldi	r22, 0x80	; 128
      f8:	60 83       	st	Z, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	10 82       	st	Z, r1
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	62 e0       	ldi	r22, 0x02	; 2
     102:	60 83       	st	Z, r22
     104:	31 97       	sbiw	r30, 0x01	; 1
     106:	63 e0       	ldi	r22, 0x03	; 3
     108:	60 83       	st	Z, r22
     10a:	31 97       	sbiw	r30, 0x01	; 1
     10c:	64 e0       	ldi	r22, 0x04	; 4
     10e:	60 83       	st	Z, r22
     110:	31 97       	sbiw	r30, 0x01	; 1
     112:	65 e0       	ldi	r22, 0x05	; 5
     114:	60 83       	st	Z, r22
     116:	31 97       	sbiw	r30, 0x01	; 1
     118:	66 e0       	ldi	r22, 0x06	; 6
     11a:	60 83       	st	Z, r22
     11c:	31 97       	sbiw	r30, 0x01	; 1
     11e:	67 e0       	ldi	r22, 0x07	; 7
     120:	60 83       	st	Z, r22
     122:	31 97       	sbiw	r30, 0x01	; 1
     124:	68 e0       	ldi	r22, 0x08	; 8
     126:	60 83       	st	Z, r22
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	69 e0       	ldi	r22, 0x09	; 9
     12c:	60 83       	st	Z, r22
     12e:	31 97       	sbiw	r30, 0x01	; 1
     130:	60 e1       	ldi	r22, 0x10	; 16
     132:	60 83       	st	Z, r22
     134:	31 97       	sbiw	r30, 0x01	; 1
     136:	30 83       	st	Z, r19
     138:	31 97       	sbiw	r30, 0x01	; 1
     13a:	32 e1       	ldi	r19, 0x12	; 18
     13c:	30 83       	st	Z, r19
     13e:	31 97       	sbiw	r30, 0x01	; 1
     140:	33 e1       	ldi	r19, 0x13	; 19
     142:	30 83       	st	Z, r19
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	34 e1       	ldi	r19, 0x14	; 20
     148:	30 83       	st	Z, r19
     14a:	31 97       	sbiw	r30, 0x01	; 1
     14c:	35 e1       	ldi	r19, 0x15	; 21
     14e:	30 83       	st	Z, r19
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	36 e1       	ldi	r19, 0x16	; 22
     154:	30 83       	st	Z, r19
     156:	31 97       	sbiw	r30, 0x01	; 1
     158:	37 e1       	ldi	r19, 0x17	; 23
     15a:	30 83       	st	Z, r19
     15c:	31 97       	sbiw	r30, 0x01	; 1
     15e:	38 e1       	ldi	r19, 0x18	; 24
     160:	30 83       	st	Z, r19
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	39 e1       	ldi	r19, 0x19	; 25
     166:	30 83       	st	Z, r19
     168:	31 97       	sbiw	r30, 0x01	; 1
     16a:	30 e2       	ldi	r19, 0x20	; 32
     16c:	30 83       	st	Z, r19
     16e:	31 97       	sbiw	r30, 0x01	; 1
     170:	31 e2       	ldi	r19, 0x21	; 33
     172:	30 83       	st	Z, r19
     174:	31 97       	sbiw	r30, 0x01	; 1
     176:	20 83       	st	Z, r18
     178:	31 97       	sbiw	r30, 0x01	; 1
     17a:	23 e2       	ldi	r18, 0x23	; 35
     17c:	20 83       	st	Z, r18
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	40 83       	st	Z, r20
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	50 83       	st	Z, r21
     186:	31 97       	sbiw	r30, 0x01	; 1
     188:	26 e2       	ldi	r18, 0x26	; 38
     18a:	20 83       	st	Z, r18
     18c:	31 97       	sbiw	r30, 0x01	; 1
     18e:	27 e2       	ldi	r18, 0x27	; 39
     190:	20 83       	st	Z, r18
     192:	31 97       	sbiw	r30, 0x01	; 1
     194:	28 e2       	ldi	r18, 0x28	; 40
     196:	20 83       	st	Z, r18
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	29 e2       	ldi	r18, 0x29	; 41
     19c:	20 83       	st	Z, r18
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	20 e3       	ldi	r18, 0x30	; 48
     1a2:	20 83       	st	Z, r18
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	21 e3       	ldi	r18, 0x31	; 49
     1a8:	20 83       	st	Z, r18
     1aa:	86 97       	sbiw	r24, 0x26	; 38
     1ac:	08 95       	ret

000001ae <xPortStartScheduler>:
     1ae:	0e 94 5d 00 	call	0xba	; 0xba <prvSetupTimerInterrupt>
     1b2:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
     1b6:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     1ba:	cd 91       	ld	r28, X+
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	dd 91       	ld	r29, X+
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	ff 91       	pop	r31
     1c4:	ef 91       	pop	r30
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	bf 91       	pop	r27
     1cc:	af 91       	pop	r26
     1ce:	9f 91       	pop	r25
     1d0:	8f 91       	pop	r24
     1d2:	7f 91       	pop	r23
     1d4:	6f 91       	pop	r22
     1d6:	5f 91       	pop	r21
     1d8:	4f 91       	pop	r20
     1da:	3f 91       	pop	r19
     1dc:	2f 91       	pop	r18
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	df 90       	pop	r13
     1e8:	cf 90       	pop	r12
     1ea:	bf 90       	pop	r11
     1ec:	af 90       	pop	r10
     1ee:	9f 90       	pop	r9
     1f0:	8f 90       	pop	r8
     1f2:	7f 90       	pop	r7
     1f4:	6f 90       	pop	r6
     1f6:	5f 90       	pop	r5
     1f8:	4f 90       	pop	r4
     1fa:	3f 90       	pop	r3
     1fc:	2f 90       	pop	r2
     1fe:	1f 90       	pop	r1
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	08 95       	ret
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	08 95       	ret

0000020c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	0f 92       	push	r0
     214:	1f 92       	push	r1
     216:	11 24       	eor	r1, r1
     218:	2f 92       	push	r2
     21a:	3f 92       	push	r3
     21c:	4f 92       	push	r4
     21e:	5f 92       	push	r5
     220:	6f 92       	push	r6
     222:	7f 92       	push	r7
     224:	8f 92       	push	r8
     226:	9f 92       	push	r9
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	2f 93       	push	r18
     23a:	3f 93       	push	r19
     23c:	4f 93       	push	r20
     23e:	5f 93       	push	r21
     240:	6f 93       	push	r22
     242:	7f 93       	push	r23
     244:	8f 93       	push	r24
     246:	9f 93       	push	r25
     248:	af 93       	push	r26
     24a:	bf 93       	push	r27
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ef 93       	push	r30
     252:	ff 93       	push	r31
     254:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
     258:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     25c:	0d b6       	in	r0, 0x3d	; 61
     25e:	0d 92       	st	X+, r0
     260:	0e b6       	in	r0, 0x3e	; 62
     262:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     264:	0e 94 60 07 	call	0xec0	; 0xec0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     268:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
     26c:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     270:	cd 91       	ld	r28, X+
     272:	cd bf       	out	0x3d, r28	; 61
     274:	dd 91       	ld	r29, X+
     276:	de bf       	out	0x3e, r29	; 62
     278:	ff 91       	pop	r31
     27a:	ef 91       	pop	r30
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	ff 90       	pop	r15
     29a:	ef 90       	pop	r14
     29c:	df 90       	pop	r13
     29e:	cf 90       	pop	r12
     2a0:	bf 90       	pop	r11
     2a2:	af 90       	pop	r10
     2a4:	9f 90       	pop	r9
     2a6:	8f 90       	pop	r8
     2a8:	7f 90       	pop	r7
     2aa:	6f 90       	pop	r6
     2ac:	5f 90       	pop	r5
     2ae:	4f 90       	pop	r4
     2b0:	3f 90       	pop	r3
     2b2:	2f 90       	pop	r2
     2b4:	1f 90       	pop	r1
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0

	asm volatile ( "ret" );
     2bc:	08 95       	ret

000002be <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     2be:	0f 92       	push	r0
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	0f 92       	push	r0
     2c6:	1f 92       	push	r1
     2c8:	11 24       	eor	r1, r1
     2ca:	2f 92       	push	r2
     2cc:	3f 92       	push	r3
     2ce:	4f 92       	push	r4
     2d0:	5f 92       	push	r5
     2d2:	6f 92       	push	r6
     2d4:	7f 92       	push	r7
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	ef 93       	push	r30
     304:	ff 93       	push	r31
     306:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
     30a:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     30e:	0d b6       	in	r0, 0x3d	; 61
     310:	0d 92       	st	X+, r0
     312:	0e b6       	in	r0, 0x3e	; 62
     314:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     316:	0e 94 5b 05 	call	0xab6	; 0xab6 <xTaskIncrementTick>
     31a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     31c:	0e 94 60 07 	call	0xec0	; 0xec0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     320:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
     324:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     328:	cd 91       	ld	r28, X+
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	dd 91       	ld	r29, X+
     32e:	de bf       	out	0x3e, r29	; 62
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	bf 91       	pop	r27
     33a:	af 91       	pop	r26
     33c:	9f 91       	pop	r25
     33e:	8f 91       	pop	r24
     340:	7f 91       	pop	r23
     342:	6f 91       	pop	r22
     344:	5f 91       	pop	r21
     346:	4f 91       	pop	r20
     348:	3f 91       	pop	r19
     34a:	2f 91       	pop	r18
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	3f 90       	pop	r3
     36a:	2f 90       	pop	r2
     36c:	1f 90       	pop	r1
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0

	asm volatile ( "ret" );
     374:	08 95       	ret

00000376 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     376:	0e 94 5f 01 	call	0x2be	; 0x2be <vPortYieldFromTick>
		asm volatile ( "reti" );
     37a:	18 95       	reti

0000037c <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     37c:	ab e1       	ldi	r26, 0x1B	; 27
     37e:	b1 e0       	ldi	r27, 0x01	; 1
     380:	ef e1       	ldi	r30, 0x1F	; 31
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	11 96       	adiw	r26, 0x01	; 1
     386:	fc 93       	st	X, r31
     388:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     38a:	13 96       	adiw	r26, 0x03	; 3
     38c:	1c 92       	st	X, r1
     38e:	1e 92       	st	-X, r1
     390:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     392:	a7 e1       	ldi	r26, 0x17	; 23
     394:	b1 e0       	ldi	r27, 0x01	; 1
     396:	8b ed       	ldi	r24, 0xDB	; 219
     398:	95 e0       	ldi	r25, 0x05	; 5
     39a:	13 96       	adiw	r26, 0x03	; 3
     39c:	9c 93       	st	X, r25
     39e:	8e 93       	st	-X, r24
     3a0:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     3a2:	11 96       	adiw	r26, 0x01	; 1
     3a4:	1c 92       	st	X, r1
     3a6:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     3ac:	b1 83       	std	Z+1, r27	; 0x01
     3ae:	a0 83       	st	Z, r26
     3b0:	08 95       	ret

000003b2 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     3c0:	0e 94 55 05 	call	0xaaa	; 0xaaa <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     3c4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     3c8:	81 11       	cpse	r24, r1
     3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     3cc:	0e 94 be 01 	call	0x37c	; 0x37c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     3d6:	20 97       	sbiw	r28, 0x00	; 0
     3d8:	71 f0       	breq	.+28     	; 0x3f6 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     3da:	ce 01       	movw	r24, r28
     3dc:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     3de:	c8 17       	cp	r28, r24
     3e0:	d9 07       	cpc	r29, r25
     3e2:	38 f4       	brcc	.+14     	; 0x3f2 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     3e4:	25 96       	adiw	r28, 0x05	; 5
     3e6:	8c 17       	cp	r24, r28
     3e8:	9d 07       	cpc	r25, r29
     3ea:	28 f0       	brcs	.+10     	; 0x3f6 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     3ec:	c0 e0       	ldi	r28, 0x00	; 0
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     3f2:	c0 e0       	ldi	r28, 0x00	; 0
     3f4:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3f6:	20 97       	sbiw	r28, 0x00	; 0
     3f8:	09 f4       	brne	.+2      	; 0x3fc <pvPortMalloc+0x4a>
     3fa:	5e c0       	rjmp	.+188    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     3fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     400:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     404:	2c 17       	cp	r18, r28
     406:	3d 07       	cpc	r19, r29
     408:	08 f4       	brcc	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	59 c0       	rjmp	.+178    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     40c:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <xStart>
     410:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     414:	ab e1       	ldi	r26, 0x1B	; 27
     416:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
            {
                pxPreviousBlock = pxBlock;
     41a:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     41c:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     41e:	82 81       	ldd	r24, Z+2	; 0x02
     420:	93 81       	ldd	r25, Z+3	; 0x03
     422:	8c 17       	cp	r24, r28
     424:	9d 07       	cpc	r25, r29
     426:	20 f4       	brcc	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	a9 f7       	brne	.-22     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	e7 31       	cpi	r30, 0x17	; 23
     434:	f8 07       	cpc	r31, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     438:	45 c0       	rjmp	.+138    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     43a:	0d 91       	ld	r16, X+
     43c:	1c 91       	ld	r17, X
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	0c 5f       	subi	r16, 0xFC	; 252
     442:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	8d 93       	st	X+, r24
     44a:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	8c 1b       	sub	r24, r28
     452:	9d 0b       	sbc	r25, r29
     454:	89 30       	cpi	r24, 0x09	; 9
     456:	91 05       	cpc	r25, r1
     458:	30 f1       	brcs	.+76     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     45a:	bf 01       	movw	r22, r30
     45c:	6c 0f       	add	r22, r28
     45e:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     460:	db 01       	movw	r26, r22
     462:	13 96       	adiw	r26, 0x03	; 3
     464:	9c 93       	st	X, r25
     466:	8e 93       	st	-X, r24
     468:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     46a:	d3 83       	std	Z+3, r29	; 0x03
     46c:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     46e:	12 96       	adiw	r26, 0x02	; 2
     470:	4d 91       	ld	r20, X+
     472:	5c 91       	ld	r21, X
     474:	13 97       	sbiw	r26, 0x03	; 3
     476:	0f 2e       	mov	r0, r31
     478:	fb e1       	ldi	r31, 0x1B	; 27
     47a:	ef 2e       	mov	r14, r31
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	ff 2e       	mov	r15, r31
     480:	f0 2d       	mov	r31, r0
     482:	01 c0       	rjmp	.+2      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     484:	7d 01       	movw	r14, r26
     486:	e7 01       	movw	r28, r14
     488:	a8 81       	ld	r26, Y
     48a:	b9 81       	ldd	r27, Y+1	; 0x01
     48c:	12 96       	adiw	r26, 0x02	; 2
     48e:	8d 91       	ld	r24, X+
     490:	9c 91       	ld	r25, X
     492:	13 97       	sbiw	r26, 0x03	; 3
     494:	84 17       	cp	r24, r20
     496:	95 07       	cpc	r25, r21
     498:	a8 f3       	brcs	.-22     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     49a:	eb 01       	movw	r28, r22
     49c:	b9 83       	std	Y+1, r27	; 0x01
     49e:	a8 83       	st	Y, r26
     4a0:	d7 01       	movw	r26, r14
     4a2:	6d 93       	st	X+, r22
     4a4:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	28 1b       	sub	r18, r24
     4ac:	39 0b       	sbc	r19, r25
     4ae:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4b2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     4b8:	00 e0       	ldi	r16, 0x00	; 0
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4be:	00 e0       	ldi	r16, 0x00	; 0
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4c8:	0e 94 75 06 	call	0xcea	; 0xcea <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     4cc:	c8 01       	movw	r24, r16
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	41 f1       	breq	.+80     	; 0x538 <vPortFree+0x5c>
     4e8:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     4ea:	8c 01       	movw	r16, r24
     4ec:	04 50       	subi	r16, 0x04	; 4
     4ee:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     4f0:	0e 94 55 05 	call	0xaaa	; 0xaaa <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     4f4:	f8 01       	movw	r30, r16
     4f6:	42 81       	ldd	r20, Z+2	; 0x02
     4f8:	53 81       	ldd	r21, Z+3	; 0x03
     4fa:	ab e1       	ldi	r26, 0x1B	; 27
     4fc:	b1 e0       	ldi	r27, 0x01	; 1
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <vPortFree+0x26>
     500:	df 01       	movw	r26, r30
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	11 97       	sbiw	r26, 0x01	; 1
     508:	22 81       	ldd	r18, Z+2	; 0x02
     50a:	33 81       	ldd	r19, Z+3	; 0x03
     50c:	24 17       	cp	r18, r20
     50e:	35 07       	cpc	r19, r21
     510:	b8 f3       	brcs	.-18     	; 0x500 <vPortFree+0x24>
     512:	24 97       	sbiw	r28, 0x04	; 4
     514:	f9 83       	std	Y+1, r31	; 0x01
     516:	e8 83       	st	Y, r30
     518:	0d 93       	st	X+, r16
     51a:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	9b 81       	ldd	r25, Y+3	; 0x03
     520:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     524:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     530:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     534:	0e 94 75 06 	call	0xcea	; 0xcea <xTaskResumeAll>
    }
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     542:	fc 01       	movw	r30, r24
     544:	03 96       	adiw	r24, 0x03	; 3
     546:	92 83       	std	Z+2, r25	; 0x02
     548:	81 83       	std	Z+1, r24	; 0x01
     54a:	2f ef       	ldi	r18, 0xFF	; 255
     54c:	3f ef       	ldi	r19, 0xFF	; 255
     54e:	34 83       	std	Z+4, r19	; 0x04
     550:	23 83       	std	Z+3, r18	; 0x03
     552:	96 83       	std	Z+6, r25	; 0x06
     554:	85 83       	std	Z+5, r24	; 0x05
     556:	90 87       	std	Z+8, r25	; 0x08
     558:	87 83       	std	Z+7, r24	; 0x07
     55a:	10 82       	st	Z, r1
     55c:	08 95       	ret

0000055e <vListInitialiseItem>:
     55e:	fc 01       	movw	r30, r24
     560:	11 86       	std	Z+9, r1	; 0x09
     562:	10 86       	std	Z+8, r1	; 0x08
     564:	08 95       	ret

00000566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     56c:	48 81       	ld	r20, Y
     56e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     570:	4f 3f       	cpi	r20, 0xFF	; 255
     572:	2f ef       	ldi	r18, 0xFF	; 255
     574:	52 07       	cpc	r21, r18
     576:	21 f4       	brne	.+8      	; 0x580 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     578:	fc 01       	movw	r30, r24
     57a:	a7 81       	ldd	r26, Z+7	; 0x07
     57c:	b0 85       	ldd	r27, Z+8	; 0x08
     57e:	0d c0       	rjmp	.+26     	; 0x59a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     580:	dc 01       	movw	r26, r24
     582:	13 96       	adiw	r26, 0x03	; 3
     584:	01 c0       	rjmp	.+2      	; 0x588 <vListInsert+0x22>
     586:	df 01       	movw	r26, r30
     588:	12 96       	adiw	r26, 0x02	; 2
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	13 97       	sbiw	r26, 0x03	; 3
     590:	20 81       	ld	r18, Z
     592:	31 81       	ldd	r19, Z+1	; 0x01
     594:	42 17       	cp	r20, r18
     596:	53 07       	cpc	r21, r19
     598:	b0 f7       	brcc	.-20     	; 0x586 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	ed 91       	ld	r30, X+
     59e:	fc 91       	ld	r31, X
     5a0:	13 97       	sbiw	r26, 0x03	; 3
     5a2:	fb 83       	std	Y+3, r31	; 0x03
     5a4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5a6:	d5 83       	std	Z+5, r29	; 0x05
     5a8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     5aa:	bd 83       	std	Y+5, r27	; 0x05
     5ac:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     5ae:	13 96       	adiw	r26, 0x03	; 3
     5b0:	dc 93       	st	X, r29
     5b2:	ce 93       	st	-X, r28
     5b4:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5b6:	99 87       	std	Y+9, r25	; 0x09
     5b8:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 81       	ld	r18, Z
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	20 83       	st	Z, r18
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5ce:	a0 85       	ldd	r26, Z+8	; 0x08
     5d0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5d2:	c2 81       	ldd	r28, Z+2	; 0x02
     5d4:	d3 81       	ldd	r29, Z+3	; 0x03
     5d6:	84 81       	ldd	r24, Z+4	; 0x04
     5d8:	95 81       	ldd	r25, Z+5	; 0x05
     5da:	9d 83       	std	Y+5, r25	; 0x05
     5dc:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5de:	c4 81       	ldd	r28, Z+4	; 0x04
     5e0:	d5 81       	ldd	r29, Z+5	; 0x05
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	9b 83       	std	Y+3, r25	; 0x03
     5e8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5ea:	11 96       	adiw	r26, 0x01	; 1
     5ec:	8d 91       	ld	r24, X+
     5ee:	9c 91       	ld	r25, X
     5f0:	12 97       	sbiw	r26, 0x02	; 2
     5f2:	e8 17       	cp	r30, r24
     5f4:	f9 07       	cpc	r31, r25
     5f6:	31 f4       	brne	.+12     	; 0x604 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5f8:	84 81       	ldd	r24, Z+4	; 0x04
     5fa:	95 81       	ldd	r25, Z+5	; 0x05
     5fc:	12 96       	adiw	r26, 0x02	; 2
     5fe:	9c 93       	st	X, r25
     600:	8e 93       	st	-X, r24
     602:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     604:	11 86       	std	Z+9, r1	; 0x09
     606:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     608:	8c 91       	ld	r24, X
     60a:	81 50       	subi	r24, 0x01	; 1
     60c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     60e:	8c 91       	ld	r24, X
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     616:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
     61a:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
     61e:	80 81       	ld	r24, Z
     620:	81 11       	cpse	r24, r1
     622:	07 c0       	rjmp	.+14     	; 0x632 <prvResetNextTaskUnblockTime+0x1c>
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <xNextTaskUnblockTime+0x1>
     62c:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <xNextTaskUnblockTime>
     630:	08 95       	ret
     632:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
     636:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
     63a:	05 80       	ldd	r0, Z+5	; 0x05
     63c:	f6 81       	ldd	r31, Z+6	; 0x06
     63e:	e0 2d       	mov	r30, r0
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <xNextTaskUnblockTime+0x1>
     648:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <xNextTaskUnblockTime>
     64c:	08 95       	ret

0000064e <prvDeleteTCB>:
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ec 01       	movw	r28, r24
     654:	8f 89       	ldd	r24, Y+23	; 0x17
     656:	98 8d       	ldd	r25, Y+24	; 0x18
     658:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vPortFree>
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vPortFree>
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <prvInitialiseNewTask>:
     668:	6f 92       	push	r6
     66a:	7f 92       	push	r7
     66c:	8f 92       	push	r8
     66e:	9f 92       	push	r9
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	4c 01       	movw	r8, r24
     688:	d5 01       	movw	r26, r10
     68a:	57 96       	adiw	r26, 0x17	; 23
     68c:	8d 91       	ld	r24, X+
     68e:	9c 91       	ld	r25, X
     690:	58 97       	sbiw	r26, 0x18	; 24
     692:	21 50       	subi	r18, 0x01	; 1
     694:	31 09       	sbc	r19, r1
     696:	3c 01       	movw	r6, r24
     698:	62 0e       	add	r6, r18
     69a:	73 1e       	adc	r7, r19
     69c:	61 15       	cp	r22, r1
     69e:	71 05       	cpc	r23, r1
     6a0:	89 f4       	brne	.+34     	; 0x6c4 <prvInitialiseNewTask+0x5c>
     6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <prvInitialiseNewTask+0x68>
     6a4:	82 2f       	mov	r24, r18
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fb 01       	movw	r30, r22
     6aa:	e8 0f       	add	r30, r24
     6ac:	f9 1f       	adc	r31, r25
     6ae:	30 81       	ld	r19, Z
     6b0:	d5 01       	movw	r26, r10
     6b2:	a8 0f       	add	r26, r24
     6b4:	b9 1f       	adc	r27, r25
     6b6:	59 96       	adiw	r26, 0x19	; 25
     6b8:	3c 93       	st	X, r19
     6ba:	80 81       	ld	r24, Z
     6bc:	88 23       	and	r24, r24
     6be:	29 f0       	breq	.+10     	; 0x6ca <prvInitialiseNewTask+0x62>
     6c0:	2f 5f       	subi	r18, 0xFF	; 255
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <prvInitialiseNewTask+0x5e>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	28 30       	cpi	r18, 0x08	; 8
     6c8:	68 f3       	brcs	.-38     	; 0x6a4 <prvInitialiseNewTask+0x3c>
     6ca:	f5 01       	movw	r30, r10
     6cc:	10 a2       	std	Z+32, r1	; 0x20
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <prvInitialiseNewTask+0x6e>
     6d0:	d5 01       	movw	r26, r10
     6d2:	59 96       	adiw	r26, 0x19	; 25
     6d4:	1c 92       	st	X, r1
     6d6:	b3 e0       	ldi	r27, 0x03	; 3
     6d8:	be 15       	cp	r27, r14
     6da:	20 f4       	brcc	.+8      	; 0x6e4 <prvInitialiseNewTask+0x7c>
     6dc:	0f 2e       	mov	r0, r31
     6de:	f3 e0       	ldi	r31, 0x03	; 3
     6e0:	ef 2e       	mov	r14, r31
     6e2:	f0 2d       	mov	r31, r0
     6e4:	f5 01       	movw	r30, r10
     6e6:	e6 8a       	std	Z+22, r14	; 0x16
     6e8:	c5 01       	movw	r24, r10
     6ea:	02 96       	adiw	r24, 0x02	; 2
     6ec:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialiseItem>
     6f0:	c5 01       	movw	r24, r10
     6f2:	0c 96       	adiw	r24, 0x0c	; 12
     6f4:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialiseItem>
     6f8:	d5 01       	movw	r26, r10
     6fa:	19 96       	adiw	r26, 0x09	; 9
     6fc:	bc 92       	st	X, r11
     6fe:	ae 92       	st	-X, r10
     700:	18 97       	sbiw	r26, 0x08	; 8
     702:	84 e0       	ldi	r24, 0x04	; 4
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	8e 19       	sub	r24, r14
     708:	91 09       	sbc	r25, r1
     70a:	1d 96       	adiw	r26, 0x0d	; 13
     70c:	9c 93       	st	X, r25
     70e:	8e 93       	st	-X, r24
     710:	1c 97       	sbiw	r26, 0x0c	; 12
     712:	53 96       	adiw	r26, 0x13	; 19
     714:	bc 92       	st	X, r11
     716:	ae 92       	st	-X, r10
     718:	52 97       	sbiw	r26, 0x12	; 18
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	f5 01       	movw	r30, r10
     71e:	b1 96       	adiw	r30, 0x21	; 33
     720:	df 01       	movw	r26, r30
     722:	1d 92       	st	X+, r1
     724:	8a 95       	dec	r24
     726:	e9 f7       	brne	.-6      	; 0x722 <prvInitialiseNewTask+0xba>
     728:	f5 01       	movw	r30, r10
     72a:	15 a2       	std	Z+37, r1	; 0x25
     72c:	a8 01       	movw	r20, r16
     72e:	b4 01       	movw	r22, r8
     730:	c3 01       	movw	r24, r6
     732:	0e 94 6b 00 	call	0xd6	; 0xd6 <pxPortInitialiseStack>
     736:	d5 01       	movw	r26, r10
     738:	8d 93       	st	X+, r24
     73a:	9c 93       	st	X, r25
     73c:	c1 14       	cp	r12, r1
     73e:	d1 04       	cpc	r13, r1
     740:	19 f0       	breq	.+6      	; 0x748 <prvInitialiseNewTask+0xe0>
     742:	f6 01       	movw	r30, r12
     744:	b1 82       	std	Z+1, r11	; 0x01
     746:	a0 82       	st	Z, r10
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	9f 90       	pop	r9
     75c:	8f 90       	pop	r8
     75e:	7f 90       	pop	r7
     760:	6f 90       	pop	r6
     762:	08 95       	ret

00000764 <prvInitialiseTaskLists>:
     764:	cf 93       	push	r28
     766:	c0 e0       	ldi	r28, 0x00	; 0
     768:	10 c0       	rjmp	.+32     	; 0x78a <prvInitialiseTaskLists+0x26>
     76a:	8c 2f       	mov	r24, r28
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9c 01       	movw	r18, r24
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	82 0f       	add	r24, r18
     77e:	93 1f       	adc	r25, r19
     780:	8d 5c       	subi	r24, 0xCD	; 205
     782:	98 4f       	sbci	r25, 0xF8	; 248
     784:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     788:	cf 5f       	subi	r28, 0xFF	; 255
     78a:	c4 30       	cpi	r28, 0x04	; 4
     78c:	70 f3       	brcs	.-36     	; 0x76a <prvInitialiseTaskLists+0x6>
     78e:	8a e2       	ldi	r24, 0x2A	; 42
     790:	97 e0       	ldi	r25, 0x07	; 7
     792:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     796:	81 e2       	ldi	r24, 0x21	; 33
     798:	97 e0       	ldi	r25, 0x07	; 7
     79a:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     79e:	84 e1       	ldi	r24, 0x14	; 20
     7a0:	97 e0       	ldi	r25, 0x07	; 7
     7a2:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     7a6:	8b e0       	ldi	r24, 0x0B	; 11
     7a8:	97 e0       	ldi	r25, 0x07	; 7
     7aa:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     7ae:	8a e2       	ldi	r24, 0x2A	; 42
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <pxDelayedTaskList+0x1>
     7b6:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <pxDelayedTaskList>
     7ba:	81 e2       	ldi	r24, 0x21	; 33
     7bc:	97 e0       	ldi	r25, 0x07	; 7
     7be:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <pxOverflowDelayedTaskList+0x1>
     7c2:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <pxOverflowDelayedTaskList>
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <prvAddNewTaskToReadyList>:
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	0f 92       	push	r0
     7d6:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxCurrentNumberOfTasks>
     7e0:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxCurrentTCB>
     7e4:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     7e8:	89 2b       	or	r24, r25
     7ea:	59 f4       	brne	.+22     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7ec:	d0 93 58 07 	sts	0x0758, r29	; 0x800758 <pxCurrentTCB+0x1>
     7f0:	c0 93 57 07 	sts	0x0757, r28	; 0x800757 <pxCurrentTCB>
     7f4:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	99 f4       	brne	.+38     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     7fc:	0e 94 b2 03 	call	0x764	; 0x764 <prvInitialiseTaskLists>
     800:	10 c0       	rjmp	.+32     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     802:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xSchedulerRunning>
     806:	81 11       	cpse	r24, r1
     808:	0c c0       	rjmp	.+24     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     80a:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
     80e:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     812:	96 89       	ldd	r25, Z+22	; 0x16
     814:	8e 89       	ldd	r24, Y+22	; 0x16
     816:	89 17       	cp	r24, r25
     818:	20 f0       	brcs	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81a:	d0 93 58 07 	sts	0x0758, r29	; 0x800758 <pxCurrentTCB+0x1>
     81e:	c0 93 57 07 	sts	0x0757, r28	; 0x800757 <pxCurrentTCB>
     822:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxTaskNumber>
     826:	8f 5f       	subi	r24, 0xFF	; 255
     828:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <uxTaskNumber>
     82c:	8e 89       	ldd	r24, Y+22	; 0x16
     82e:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <uxTopReadyPriority>
     832:	98 17       	cp	r25, r24
     834:	10 f4       	brcc	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxTopReadyPriority>
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	fc 01       	movw	r30, r24
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	8e 0f       	add	r24, r30
     84c:	9f 1f       	adc	r25, r31
     84e:	fc 01       	movw	r30, r24
     850:	ed 5c       	subi	r30, 0xCD	; 205
     852:	f8 4f       	sbci	r31, 0xF8	; 248
     854:	01 80       	ldd	r0, Z+1	; 0x01
     856:	f2 81       	ldd	r31, Z+2	; 0x02
     858:	e0 2d       	mov	r30, r0
     85a:	fd 83       	std	Y+5, r31	; 0x05
     85c:	ec 83       	std	Y+4, r30	; 0x04
     85e:	84 81       	ldd	r24, Z+4	; 0x04
     860:	95 81       	ldd	r25, Z+5	; 0x05
     862:	9f 83       	std	Y+7, r25	; 0x07
     864:	8e 83       	std	Y+6, r24	; 0x06
     866:	a4 81       	ldd	r26, Z+4	; 0x04
     868:	b5 81       	ldd	r27, Z+5	; 0x05
     86a:	ce 01       	movw	r24, r28
     86c:	02 96       	adiw	r24, 0x02	; 2
     86e:	13 96       	adiw	r26, 0x03	; 3
     870:	9c 93       	st	X, r25
     872:	8e 93       	st	-X, r24
     874:	12 97       	sbiw	r26, 0x02	; 2
     876:	95 83       	std	Z+5, r25	; 0x05
     878:	84 83       	std	Z+4, r24	; 0x04
     87a:	ee 89       	ldd	r30, Y+22	; 0x16
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	cf 01       	movw	r24, r30
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	e8 0f       	add	r30, r24
     88e:	f9 1f       	adc	r31, r25
     890:	ed 5c       	subi	r30, 0xCD	; 205
     892:	f8 4f       	sbci	r31, 0xF8	; 248
     894:	fb 87       	std	Y+11, r31	; 0x0b
     896:	ea 87       	std	Y+10, r30	; 0x0a
     898:	80 81       	ld	r24, Z
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	80 83       	st	Z, r24
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xSchedulerRunning>
     8a6:	88 23       	and	r24, r24
     8a8:	51 f0       	breq	.+20     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8aa:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
     8ae:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     8b2:	96 89       	ldd	r25, Z+22	; 0x16
     8b4:	8e 89       	ldd	r24, Y+22	; 0x16
     8b6:	98 17       	cp	r25, r24
     8b8:	10 f4       	brcc	.+4      	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8ba:	0e 94 06 01 	call	0x20c	; 0x20c <vPortYield>
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <prvCheckTasksWaitingTermination>:
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	1c c0       	rjmp	.+56     	; 0x902 <__stack+0x3>
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	0f 92       	push	r0
     8d0:	e0 91 10 07 	lds	r30, 0x0710	; 0x800710 <xTasksWaitingTermination+0x5>
     8d4:	f0 91 11 07 	lds	r31, 0x0711	; 0x800711 <xTasksWaitingTermination+0x6>
     8d8:	c6 81       	ldd	r28, Z+6	; 0x06
     8da:	d7 81       	ldd	r29, Z+7	; 0x07
     8dc:	ce 01       	movw	r24, r28
     8de:	02 96       	adiw	r24, 0x02	; 2
     8e0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <uxListRemove>
     8e4:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <uxCurrentNumberOfTasks>
     8ee:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxDeletedTasksWaitingCleanUp>
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxDeletedTasksWaitingCleanUp>
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	ce 01       	movw	r24, r28
     8fe:	0e 94 27 03 	call	0x64e	; 0x64e <prvDeleteTCB>
     902:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxDeletedTasksWaitingCleanUp>
     906:	81 11       	cpse	r24, r1
     908:	e0 cf       	rjmp	.-64     	; 0x8ca <prvCheckTasksWaitingTermination+0x6>
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <prvIdleTask>:
     910:	0e 94 62 04 	call	0x8c4	; 0x8c4 <prvCheckTasksWaitingTermination>
     914:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <pxReadyTasksLists>
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	d0 f3       	brcs	.-12     	; 0x910 <prvIdleTask>
     91c:	0e 94 06 01 	call	0x20c	; 0x20c <vPortYield>
     920:	f7 cf       	rjmp	.-18     	; 0x910 <prvIdleTask>

00000922 <prvAddCurrentTaskToDelayedList>:
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
     92c:	00 91 07 07 	lds	r16, 0x0707	; 0x800707 <xTickCount>
     930:	10 91 08 07 	lds	r17, 0x0708	; 0x800708 <xTickCount+0x1>
     934:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <pxCurrentTCB>
     938:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     93c:	02 96       	adiw	r24, 0x02	; 2
     93e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <uxListRemove>
     942:	c0 0f       	add	r28, r16
     944:	d1 1f       	adc	r29, r17
     946:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
     94a:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     94e:	d3 83       	std	Z+3, r29	; 0x03
     950:	c2 83       	std	Z+2, r28	; 0x02
     952:	c0 17       	cp	r28, r16
     954:	d1 07       	cpc	r29, r17
     956:	68 f4       	brcc	.+26     	; 0x972 <prvAddCurrentTaskToDelayedList+0x50>
     958:	60 91 57 07 	lds	r22, 0x0757	; 0x800757 <pxCurrentTCB>
     95c:	70 91 58 07 	lds	r23, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     960:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <pxOverflowDelayedTaskList>
     964:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <pxOverflowDelayedTaskList+0x1>
     968:	6e 5f       	subi	r22, 0xFE	; 254
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	0e 94 b3 02 	call	0x566	; 0x566 <vListInsert>
     970:	17 c0       	rjmp	.+46     	; 0x9a0 <prvAddCurrentTaskToDelayedList+0x7e>
     972:	60 91 57 07 	lds	r22, 0x0757	; 0x800757 <pxCurrentTCB>
     976:	70 91 58 07 	lds	r23, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     97a:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <pxDelayedTaskList>
     97e:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
     982:	6e 5f       	subi	r22, 0xFE	; 254
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	0e 94 b3 02 	call	0x566	; 0x566 <vListInsert>
     98a:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xNextTaskUnblockTime>
     98e:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xNextTaskUnblockTime+0x1>
     992:	c8 17       	cp	r28, r24
     994:	d9 07       	cpc	r29, r25
     996:	20 f4       	brcc	.+8      	; 0x9a0 <prvAddCurrentTaskToDelayedList+0x7e>
     998:	d0 93 ff 06 	sts	0x06FF, r29	; 0x8006ff <xNextTaskUnblockTime+0x1>
     99c:	c0 93 fe 06 	sts	0x06FE, r28	; 0x8006fe <xNextTaskUnblockTime>
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	08 95       	ret

000009aa <xTaskCreate>:
     9aa:	2f 92       	push	r2
     9ac:	3f 92       	push	r3
     9ae:	4f 92       	push	r4
     9b0:	5f 92       	push	r5
     9b2:	6f 92       	push	r6
     9b4:	7f 92       	push	r7
     9b6:	8f 92       	push	r8
     9b8:	9f 92       	push	r9
     9ba:	af 92       	push	r10
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	3c 01       	movw	r6, r24
     9d0:	1b 01       	movw	r2, r22
     9d2:	5a 01       	movw	r10, r20
     9d4:	29 01       	movw	r4, r18
     9d6:	ca 01       	movw	r24, r20
     9d8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <pvPortMalloc>
     9dc:	6c 01       	movw	r12, r24
     9de:	89 2b       	or	r24, r25
     9e0:	71 f0       	breq	.+28     	; 0x9fe <xTaskCreate+0x54>
     9e2:	86 e2       	ldi	r24, 0x26	; 38
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <pvPortMalloc>
     9ea:	ec 01       	movw	r28, r24
     9ec:	89 2b       	or	r24, r25
     9ee:	19 f0       	breq	.+6      	; 0x9f6 <xTaskCreate+0x4c>
     9f0:	d8 8e       	std	Y+24, r13	; 0x18
     9f2:	cf 8a       	std	Y+23, r12	; 0x17
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <xTaskCreate+0x58>
     9f6:	c6 01       	movw	r24, r12
     9f8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <vPortFree>
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <xTaskCreate+0x58>
     9fe:	c0 e0       	ldi	r28, 0x00	; 0
     a00:	d0 e0       	ldi	r29, 0x00	; 0
     a02:	20 97       	sbiw	r28, 0x00	; 0
     a04:	91 f0       	breq	.+36     	; 0xa2a <xTaskCreate+0x80>
     a06:	95 01       	movw	r18, r10
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	81 2c       	mov	r8, r1
     a0e:	91 2c       	mov	r9, r1
     a10:	5e 01       	movw	r10, r28
     a12:	67 01       	movw	r12, r14
     a14:	e0 2e       	mov	r14, r16
     a16:	82 01       	movw	r16, r4
     a18:	b1 01       	movw	r22, r2
     a1a:	c3 01       	movw	r24, r6
     a1c:	0e 94 34 03 	call	0x668	; 0x668 <prvInitialiseNewTask>
     a20:	ce 01       	movw	r24, r28
     a22:	0e 94 e5 03 	call	0x7ca	; 0x7ca <prvAddNewTaskToReadyList>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <xTaskCreate+0x82>
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	7f 90       	pop	r7
     a46:	6f 90       	pop	r6
     a48:	5f 90       	pop	r5
     a4a:	4f 90       	pop	r4
     a4c:	3f 90       	pop	r3
     a4e:	2f 90       	pop	r2
     a50:	08 95       	ret

00000a52 <vTaskStartScheduler>:
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	0f 2e       	mov	r0, r31
     a5a:	fc ef       	ldi	r31, 0xFC	; 252
     a5c:	ef 2e       	mov	r14, r31
     a5e:	f6 e0       	ldi	r31, 0x06	; 6
     a60:	ff 2e       	mov	r15, r31
     a62:	f0 2d       	mov	r31, r0
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	45 e5       	ldi	r20, 0x55	; 85
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	63 e0       	ldi	r22, 0x03	; 3
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	88 e8       	ldi	r24, 0x88	; 136
     a74:	94 e0       	ldi	r25, 0x04	; 4
     a76:	0e 94 d5 04 	call	0x9aa	; 0x9aa <xTaskCreate>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	81 f4       	brne	.+32     	; 0xa9e <vTaskStartScheduler+0x4c>
     a7e:	f8 94       	cli
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <xNextTaskUnblockTime+0x1>
     a88:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <xNextTaskUnblockTime>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xSchedulerRunning>
     a92:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <xTickCount+0x1>
     a96:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <xTickCount>
     a9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <xPortStartScheduler>
     a9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	08 95       	ret

00000aaa <vTaskSuspendAll>:
     aaa:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxSchedulerSuspended>
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxSchedulerSuspended>
     ab4:	08 95       	ret

00000ab6 <xTaskIncrementTick>:
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxSchedulerSuspended>
     ac2:	81 11       	cpse	r24, r1
     ac4:	01 c1       	rjmp	.+514    	; 0xcc8 <xTaskIncrementTick+0x212>
     ac6:	c0 91 07 07 	lds	r28, 0x0707	; 0x800707 <xTickCount>
     aca:	d0 91 08 07 	lds	r29, 0x0708	; 0x800708 <xTickCount+0x1>
     ace:	8e 01       	movw	r16, r28
     ad0:	0f 5f       	subi	r16, 0xFF	; 255
     ad2:	1f 4f       	sbci	r17, 0xFF	; 255
     ad4:	10 93 08 07 	sts	0x0708, r17	; 0x800708 <xTickCount+0x1>
     ad8:	00 93 07 07 	sts	0x0707, r16	; 0x800707 <xTickCount>
     adc:	01 15       	cp	r16, r1
     ade:	11 05       	cpc	r17, r1
     ae0:	b9 f4       	brne	.+46     	; 0xb10 <xTaskIncrementTick+0x5a>
     ae2:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <pxDelayedTaskList>
     ae6:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
     aea:	20 91 1d 07 	lds	r18, 0x071D	; 0x80071d <pxOverflowDelayedTaskList>
     aee:	30 91 1e 07 	lds	r19, 0x071E	; 0x80071e <pxOverflowDelayedTaskList+0x1>
     af2:	30 93 20 07 	sts	0x0720, r19	; 0x800720 <pxDelayedTaskList+0x1>
     af6:	20 93 1f 07 	sts	0x071F, r18	; 0x80071f <pxDelayedTaskList>
     afa:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <pxOverflowDelayedTaskList+0x1>
     afe:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <pxOverflowDelayedTaskList>
     b02:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <xNumOfOverflows>
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <xNumOfOverflows>
     b0c:	0e 94 0b 03 	call	0x616	; 0x616 <prvResetNextTaskUnblockTime>
     b10:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xNextTaskUnblockTime>
     b14:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xNextTaskUnblockTime+0x1>
     b18:	08 17       	cp	r16, r24
     b1a:	19 07       	cpc	r17, r25
     b1c:	20 f4       	brcc	.+8      	; 0xb26 <xTaskIncrementTick+0x70>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	b8 c0       	rjmp	.+368    	; 0xc92 <xTaskIncrementTick+0x1dc>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <xTaskIncrementTick+0x72>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
     b2c:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
     b30:	90 81       	ld	r25, Z
     b32:	91 11       	cpse	r25, r1
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <xTaskIncrementTick+0x8e>
     b36:	2f ef       	ldi	r18, 0xFF	; 255
     b38:	3f ef       	ldi	r19, 0xFF	; 255
     b3a:	30 93 ff 06 	sts	0x06FF, r19	; 0x8006ff <xNextTaskUnblockTime+0x1>
     b3e:	20 93 fe 06 	sts	0x06FE, r18	; 0x8006fe <xNextTaskUnblockTime>
     b42:	a7 c0       	rjmp	.+334    	; 0xc92 <xTaskIncrementTick+0x1dc>
     b44:	e0 91 1f 07 	lds	r30, 0x071F	; 0x80071f <pxDelayedTaskList>
     b48:	f0 91 20 07 	lds	r31, 0x0720	; 0x800720 <pxDelayedTaskList+0x1>
     b4c:	05 80       	ldd	r0, Z+5	; 0x05
     b4e:	f6 81       	ldd	r31, Z+6	; 0x06
     b50:	e0 2d       	mov	r30, r0
     b52:	06 80       	ldd	r0, Z+6	; 0x06
     b54:	f7 81       	ldd	r31, Z+7	; 0x07
     b56:	e0 2d       	mov	r30, r0
     b58:	22 81       	ldd	r18, Z+2	; 0x02
     b5a:	33 81       	ldd	r19, Z+3	; 0x03
     b5c:	02 17       	cp	r16, r18
     b5e:	13 07       	cpc	r17, r19
     b60:	28 f4       	brcc	.+10     	; 0xb6c <xTaskIncrementTick+0xb6>
     b62:	30 93 ff 06 	sts	0x06FF, r19	; 0x8006ff <xNextTaskUnblockTime+0x1>
     b66:	20 93 fe 06 	sts	0x06FE, r18	; 0x8006fe <xNextTaskUnblockTime>
     b6a:	93 c0       	rjmp	.+294    	; 0xc92 <xTaskIncrementTick+0x1dc>
     b6c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b6e:	b3 85       	ldd	r27, Z+11	; 0x0b
     b70:	24 81       	ldd	r18, Z+4	; 0x04
     b72:	35 81       	ldd	r19, Z+5	; 0x05
     b74:	46 81       	ldd	r20, Z+6	; 0x06
     b76:	57 81       	ldd	r21, Z+7	; 0x07
     b78:	e9 01       	movw	r28, r18
     b7a:	5d 83       	std	Y+5, r21	; 0x05
     b7c:	4c 83       	std	Y+4, r20	; 0x04
     b7e:	26 81       	ldd	r18, Z+6	; 0x06
     b80:	37 81       	ldd	r19, Z+7	; 0x07
     b82:	44 81       	ldd	r20, Z+4	; 0x04
     b84:	55 81       	ldd	r21, Z+5	; 0x05
     b86:	e9 01       	movw	r28, r18
     b88:	5b 83       	std	Y+3, r21	; 0x03
     b8a:	4a 83       	std	Y+2, r20	; 0x02
     b8c:	11 96       	adiw	r26, 0x01	; 1
     b8e:	2d 91       	ld	r18, X+
     b90:	3c 91       	ld	r19, X
     b92:	12 97       	sbiw	r26, 0x02	; 2
     b94:	af 01       	movw	r20, r30
     b96:	4e 5f       	subi	r20, 0xFE	; 254
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
     b9a:	24 17       	cp	r18, r20
     b9c:	35 07       	cpc	r19, r21
     b9e:	31 f4       	brne	.+12     	; 0xbac <xTaskIncrementTick+0xf6>
     ba0:	26 81       	ldd	r18, Z+6	; 0x06
     ba2:	37 81       	ldd	r19, Z+7	; 0x07
     ba4:	12 96       	adiw	r26, 0x02	; 2
     ba6:	3c 93       	st	X, r19
     ba8:	2e 93       	st	-X, r18
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	13 86       	std	Z+11, r1	; 0x0b
     bae:	12 86       	std	Z+10, r1	; 0x0a
     bb0:	9c 91       	ld	r25, X
     bb2:	91 50       	subi	r25, 0x01	; 1
     bb4:	9c 93       	st	X, r25
     bb6:	a4 89       	ldd	r26, Z+20	; 0x14
     bb8:	b5 89       	ldd	r27, Z+21	; 0x15
     bba:	10 97       	sbiw	r26, 0x00	; 0
     bbc:	19 f1       	breq	.+70     	; 0xc04 <xTaskIncrementTick+0x14e>
     bbe:	26 85       	ldd	r18, Z+14	; 0x0e
     bc0:	37 85       	ldd	r19, Z+15	; 0x0f
     bc2:	60 89       	ldd	r22, Z+16	; 0x10
     bc4:	71 89       	ldd	r23, Z+17	; 0x11
     bc6:	e9 01       	movw	r28, r18
     bc8:	7d 83       	std	Y+5, r23	; 0x05
     bca:	6c 83       	std	Y+4, r22	; 0x04
     bcc:	20 89       	ldd	r18, Z+16	; 0x10
     bce:	31 89       	ldd	r19, Z+17	; 0x11
     bd0:	66 85       	ldd	r22, Z+14	; 0x0e
     bd2:	77 85       	ldd	r23, Z+15	; 0x0f
     bd4:	e9 01       	movw	r28, r18
     bd6:	7b 83       	std	Y+3, r23	; 0x03
     bd8:	6a 83       	std	Y+2, r22	; 0x02
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	6d 91       	ld	r22, X+
     bde:	7c 91       	ld	r23, X
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9f 01       	movw	r18, r30
     be4:	24 5f       	subi	r18, 0xF4	; 244
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	62 17       	cp	r22, r18
     bea:	73 07       	cpc	r23, r19
     bec:	31 f4       	brne	.+12     	; 0xbfa <xTaskIncrementTick+0x144>
     bee:	20 89       	ldd	r18, Z+16	; 0x10
     bf0:	31 89       	ldd	r19, Z+17	; 0x11
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	3c 93       	st	X, r19
     bf6:	2e 93       	st	-X, r18
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	15 8a       	std	Z+21, r1	; 0x15
     bfc:	14 8a       	std	Z+20, r1	; 0x14
     bfe:	9c 91       	ld	r25, X
     c00:	91 50       	subi	r25, 0x01	; 1
     c02:	9c 93       	st	X, r25
     c04:	26 89       	ldd	r18, Z+22	; 0x16
     c06:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <uxTopReadyPriority>
     c0a:	92 17       	cp	r25, r18
     c0c:	10 f4       	brcc	.+4      	; 0xc12 <xTaskIncrementTick+0x15c>
     c0e:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <uxTopReadyPriority>
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	d9 01       	movw	r26, r18
     c16:	aa 0f       	add	r26, r26
     c18:	bb 1f       	adc	r27, r27
     c1a:	aa 0f       	add	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	aa 0f       	add	r26, r26
     c20:	bb 1f       	adc	r27, r27
     c22:	2a 0f       	add	r18, r26
     c24:	3b 1f       	adc	r19, r27
     c26:	d9 01       	movw	r26, r18
     c28:	ad 5c       	subi	r26, 0xCD	; 205
     c2a:	b8 4f       	sbci	r27, 0xF8	; 248
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	0d 90       	ld	r0, X+
     c30:	bc 91       	ld	r27, X
     c32:	a0 2d       	mov	r26, r0
     c34:	b5 83       	std	Z+5, r27	; 0x05
     c36:	a4 83       	std	Z+4, r26	; 0x04
     c38:	14 96       	adiw	r26, 0x04	; 4
     c3a:	2d 91       	ld	r18, X+
     c3c:	3c 91       	ld	r19, X
     c3e:	15 97       	sbiw	r26, 0x05	; 5
     c40:	37 83       	std	Z+7, r19	; 0x07
     c42:	26 83       	std	Z+6, r18	; 0x06
     c44:	14 96       	adiw	r26, 0x04	; 4
     c46:	2d 91       	ld	r18, X+
     c48:	3c 91       	ld	r19, X
     c4a:	15 97       	sbiw	r26, 0x05	; 5
     c4c:	e9 01       	movw	r28, r18
     c4e:	5b 83       	std	Y+3, r21	; 0x03
     c50:	4a 83       	std	Y+2, r20	; 0x02
     c52:	15 96       	adiw	r26, 0x05	; 5
     c54:	5c 93       	st	X, r21
     c56:	4e 93       	st	-X, r20
     c58:	14 97       	sbiw	r26, 0x04	; 4
     c5a:	a6 89       	ldd	r26, Z+22	; 0x16
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	9d 01       	movw	r18, r26
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	a2 0f       	add	r26, r18
     c6e:	b3 1f       	adc	r27, r19
     c70:	ad 5c       	subi	r26, 0xCD	; 205
     c72:	b8 4f       	sbci	r27, 0xF8	; 248
     c74:	b3 87       	std	Z+11, r27	; 0x0b
     c76:	a2 87       	std	Z+10, r26	; 0x0a
     c78:	9c 91       	ld	r25, X
     c7a:	9f 5f       	subi	r25, 0xFF	; 255
     c7c:	9c 93       	st	X, r25
     c7e:	26 89       	ldd	r18, Z+22	; 0x16
     c80:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
     c84:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     c88:	96 89       	ldd	r25, Z+22	; 0x16
     c8a:	29 17       	cp	r18, r25
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <xTaskIncrementTick+0x1da>
     c8e:	49 cf       	rjmp	.-366    	; 0xb22 <xTaskIncrementTick+0x6c>
     c90:	4b cf       	rjmp	.-362    	; 0xb28 <xTaskIncrementTick+0x72>
     c92:	e0 91 57 07 	lds	r30, 0x0757	; 0x800757 <pxCurrentTCB>
     c96:	f0 91 58 07 	lds	r31, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     c9a:	26 89       	ldd	r18, Z+22	; 0x16
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	2e 0f       	add	r18, r30
     cae:	3f 1f       	adc	r19, r31
     cb0:	f9 01       	movw	r30, r18
     cb2:	ed 5c       	subi	r30, 0xCD	; 205
     cb4:	f8 4f       	sbci	r31, 0xF8	; 248
     cb6:	90 81       	ld	r25, Z
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	08 f0       	brcs	.+2      	; 0xcbe <xTaskIncrementTick+0x208>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <xYieldPending>
     cc2:	91 11       	cpse	r25, r1
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <xTaskIncrementTick+0x228>
     cc6:	0c c0       	rjmp	.+24     	; 0xce0 <xTaskIncrementTick+0x22a>
     cc8:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <xPendedTicks>
     ccc:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <xPendedTicks+0x1>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <xPendedTicks+0x1>
     cd6:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <xPendedTicks>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <xTaskIncrementTick+0x22a>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <xTaskResumeAll>:
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	0f 92       	push	r0
     cf4:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxSchedulerSuspended>
     cf8:	81 50       	subi	r24, 0x01	; 1
     cfa:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <uxSchedulerSuspended>
     cfe:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxSchedulerSuspended>
     d02:	81 11       	cpse	r24, r1
     d04:	bf c0       	rjmp	.+382    	; 0xe84 <xTaskResumeAll+0x19a>
     d06:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <uxCurrentNumberOfTasks>
     d0a:	81 11       	cpse	r24, r1
     d0c:	96 c0       	rjmp	.+300    	; 0xe3a <xTaskResumeAll+0x150>
     d0e:	bd c0       	rjmp	.+378    	; 0xe8a <xTaskResumeAll+0x1a0>
     d10:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <xPendingReadyList+0x5>
     d14:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <xPendingReadyList+0x6>
     d18:	06 80       	ldd	r0, Z+6	; 0x06
     d1a:	f7 81       	ldd	r31, Z+7	; 0x07
     d1c:	e0 2d       	mov	r30, r0
     d1e:	a4 89       	ldd	r26, Z+20	; 0x14
     d20:	b5 89       	ldd	r27, Z+21	; 0x15
     d22:	c6 85       	ldd	r28, Z+14	; 0x0e
     d24:	d7 85       	ldd	r29, Z+15	; 0x0f
     d26:	80 89       	ldd	r24, Z+16	; 0x10
     d28:	91 89       	ldd	r25, Z+17	; 0x11
     d2a:	9d 83       	std	Y+5, r25	; 0x05
     d2c:	8c 83       	std	Y+4, r24	; 0x04
     d2e:	c0 89       	ldd	r28, Z+16	; 0x10
     d30:	d1 89       	ldd	r29, Z+17	; 0x11
     d32:	86 85       	ldd	r24, Z+14	; 0x0e
     d34:	97 85       	ldd	r25, Z+15	; 0x0f
     d36:	9b 83       	std	Y+3, r25	; 0x03
     d38:	8a 83       	std	Y+2, r24	; 0x02
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	2d 91       	ld	r18, X+
     d3e:	3c 91       	ld	r19, X
     d40:	12 97       	sbiw	r26, 0x02	; 2
     d42:	cf 01       	movw	r24, r30
     d44:	0c 96       	adiw	r24, 0x0c	; 12
     d46:	28 17       	cp	r18, r24
     d48:	39 07       	cpc	r19, r25
     d4a:	31 f4       	brne	.+12     	; 0xd58 <xTaskResumeAll+0x6e>
     d4c:	80 89       	ldd	r24, Z+16	; 0x10
     d4e:	91 89       	ldd	r25, Z+17	; 0x11
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	9c 93       	st	X, r25
     d54:	8e 93       	st	-X, r24
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	15 8a       	std	Z+21, r1	; 0x15
     d5a:	14 8a       	std	Z+20, r1	; 0x14
     d5c:	8c 91       	ld	r24, X
     d5e:	81 50       	subi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	a2 85       	ldd	r26, Z+10	; 0x0a
     d64:	b3 85       	ldd	r27, Z+11	; 0x0b
     d66:	c4 81       	ldd	r28, Z+4	; 0x04
     d68:	d5 81       	ldd	r29, Z+5	; 0x05
     d6a:	86 81       	ldd	r24, Z+6	; 0x06
     d6c:	97 81       	ldd	r25, Z+7	; 0x07
     d6e:	9d 83       	std	Y+5, r25	; 0x05
     d70:	8c 83       	std	Y+4, r24	; 0x04
     d72:	c6 81       	ldd	r28, Z+6	; 0x06
     d74:	d7 81       	ldd	r29, Z+7	; 0x07
     d76:	84 81       	ldd	r24, Z+4	; 0x04
     d78:	95 81       	ldd	r25, Z+5	; 0x05
     d7a:	9b 83       	std	Y+3, r25	; 0x03
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	11 96       	adiw	r26, 0x01	; 1
     d80:	8d 91       	ld	r24, X+
     d82:	9c 91       	ld	r25, X
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9f 01       	movw	r18, r30
     d88:	2e 5f       	subi	r18, 0xFE	; 254
     d8a:	3f 4f       	sbci	r19, 0xFF	; 255
     d8c:	82 17       	cp	r24, r18
     d8e:	93 07       	cpc	r25, r19
     d90:	31 f4       	brne	.+12     	; 0xd9e <xTaskResumeAll+0xb4>
     d92:	86 81       	ldd	r24, Z+6	; 0x06
     d94:	97 81       	ldd	r25, Z+7	; 0x07
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	11 97       	sbiw	r26, 0x01	; 1
     d9e:	13 86       	std	Z+11, r1	; 0x0b
     da0:	12 86       	std	Z+10, r1	; 0x0a
     da2:	8c 91       	ld	r24, X
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	86 89       	ldd	r24, Z+22	; 0x16
     daa:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <uxTopReadyPriority>
     dae:	98 17       	cp	r25, r24
     db0:	10 f4       	brcc	.+4      	; 0xdb6 <xTaskResumeAll+0xcc>
     db2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxTopReadyPriority>
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	dc 01       	movw	r26, r24
     dba:	aa 0f       	add	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	aa 0f       	add	r26, r26
     dc0:	bb 1f       	adc	r27, r27
     dc2:	aa 0f       	add	r26, r26
     dc4:	bb 1f       	adc	r27, r27
     dc6:	8a 0f       	add	r24, r26
     dc8:	9b 1f       	adc	r25, r27
     dca:	dc 01       	movw	r26, r24
     dcc:	ad 5c       	subi	r26, 0xCD	; 205
     dce:	b8 4f       	sbci	r27, 0xF8	; 248
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	0d 90       	ld	r0, X+
     dd4:	bc 91       	ld	r27, X
     dd6:	a0 2d       	mov	r26, r0
     dd8:	b5 83       	std	Z+5, r27	; 0x05
     dda:	a4 83       	std	Z+4, r26	; 0x04
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	8d 91       	ld	r24, X+
     de0:	9c 91       	ld	r25, X
     de2:	15 97       	sbiw	r26, 0x05	; 5
     de4:	97 83       	std	Z+7, r25	; 0x07
     de6:	86 83       	std	Z+6, r24	; 0x06
     de8:	14 96       	adiw	r26, 0x04	; 4
     dea:	cd 91       	ld	r28, X+
     dec:	dc 91       	ld	r29, X
     dee:	15 97       	sbiw	r26, 0x05	; 5
     df0:	3b 83       	std	Y+3, r19	; 0x03
     df2:	2a 83       	std	Y+2, r18	; 0x02
     df4:	15 96       	adiw	r26, 0x05	; 5
     df6:	3c 93       	st	X, r19
     df8:	2e 93       	st	-X, r18
     dfa:	14 97       	sbiw	r26, 0x04	; 4
     dfc:	a6 89       	ldd	r26, Z+22	; 0x16
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	cd 01       	movw	r24, r26
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	a8 0f       	add	r26, r24
     e10:	b9 1f       	adc	r27, r25
     e12:	ad 5c       	subi	r26, 0xCD	; 205
     e14:	b8 4f       	sbci	r27, 0xF8	; 248
     e16:	b3 87       	std	Z+11, r27	; 0x0b
     e18:	a2 87       	std	Z+10, r26	; 0x0a
     e1a:	8c 91       	ld	r24, X
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	8c 93       	st	X, r24
     e20:	96 89       	ldd	r25, Z+22	; 0x16
     e22:	a0 91 57 07 	lds	r26, 0x0757	; 0x800757 <pxCurrentTCB>
     e26:	b0 91 58 07 	lds	r27, 0x0758	; 0x800758 <pxCurrentTCB+0x1>
     e2a:	56 96       	adiw	r26, 0x16	; 22
     e2c:	8c 91       	ld	r24, X
     e2e:	98 17       	cp	r25, r24
     e30:	30 f0       	brcs	.+12     	; 0xe3e <xTaskResumeAll+0x154>
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xYieldPending>
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <xTaskResumeAll+0x154>
     e3a:	e0 e0       	ldi	r30, 0x00	; 0
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <xPendingReadyList>
     e42:	81 11       	cpse	r24, r1
     e44:	65 cf       	rjmp	.-310    	; 0xd10 <xTaskResumeAll+0x26>
     e46:	ef 2b       	or	r30, r31
     e48:	11 f0       	breq	.+4      	; 0xe4e <xTaskResumeAll+0x164>
     e4a:	0e 94 0b 03 	call	0x616	; 0x616 <prvResetNextTaskUnblockTime>
     e4e:	c0 91 03 07 	lds	r28, 0x0703	; 0x800703 <xPendedTicks>
     e52:	d0 91 04 07 	lds	r29, 0x0704	; 0x800704 <xPendedTicks+0x1>
     e56:	20 97       	sbiw	r28, 0x00	; 0
     e58:	69 f0       	breq	.+26     	; 0xe74 <xTaskResumeAll+0x18a>
     e5a:	0e 94 5b 05 	call	0xab6	; 0xab6 <xTaskIncrementTick>
     e5e:	88 23       	and	r24, r24
     e60:	19 f0       	breq	.+6      	; 0xe68 <xTaskResumeAll+0x17e>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xYieldPending>
     e68:	21 97       	sbiw	r28, 0x01	; 1
     e6a:	b9 f7       	brne	.-18     	; 0xe5a <xTaskResumeAll+0x170>
     e6c:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <xPendedTicks+0x1>
     e70:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <xPendedTicks>
     e74:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <xYieldPending>
     e78:	88 23       	and	r24, r24
     e7a:	31 f0       	breq	.+12     	; 0xe88 <xTaskResumeAll+0x19e>
     e7c:	0e 94 06 01 	call	0x20c	; 0x20c <vPortYield>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <xTaskResumeAll+0x1a0>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <xTaskResumeAll+0x1a0>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <vTaskDelay>:
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
     e9a:	89 2b       	or	r24, r25
     e9c:	49 f0       	breq	.+18     	; 0xeb0 <vTaskDelay+0x1c>
     e9e:	0e 94 55 05 	call	0xaaa	; 0xaaa <vTaskSuspendAll>
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	ce 01       	movw	r24, r28
     ea6:	0e 94 91 04 	call	0x922	; 0x922 <prvAddCurrentTaskToDelayedList>
     eaa:	0e 94 75 06 	call	0xcea	; 0xcea <xTaskResumeAll>
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <vTaskDelay+0x1e>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	81 11       	cpse	r24, r1
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vTaskDelay+0x26>
     eb6:	0e 94 06 01 	call	0x20c	; 0x20c <vPortYield>
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     ec0:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <uxSchedulerSuspended>
     ec4:	88 23       	and	r24, r24
     ec6:	21 f0       	breq	.+8      	; 0xed0 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xYieldPending>
     ece:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
     ed0:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     ed4:	20 91 06 07 	lds	r18, 0x0706	; 0x800706 <uxTopReadyPriority>
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <vTaskSwitchContext+0x1c>
     eda:	21 50       	subi	r18, 0x01	; 1
     edc:	82 2f       	mov	r24, r18
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	fc 01       	movw	r30, r24
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e8 0f       	add	r30, r24
     ef0:	f9 1f       	adc	r31, r25
     ef2:	ed 5c       	subi	r30, 0xCD	; 205
     ef4:	f8 4f       	sbci	r31, 0xF8	; 248
     ef6:	30 81       	ld	r19, Z
     ef8:	33 23       	and	r19, r19
     efa:	79 f3       	breq	.-34     	; 0xeda <vTaskSwitchContext+0x1a>
     efc:	ac 01       	movw	r20, r24
     efe:	44 0f       	add	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	44 0f       	add	r20, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	48 0f       	add	r20, r24
     f0c:	59 1f       	adc	r21, r25
     f0e:	df 01       	movw	r26, r30
     f10:	01 80       	ldd	r0, Z+1	; 0x01
     f12:	f2 81       	ldd	r31, Z+2	; 0x02
     f14:	e0 2d       	mov	r30, r0
     f16:	02 80       	ldd	r0, Z+2	; 0x02
     f18:	f3 81       	ldd	r31, Z+3	; 0x03
     f1a:	e0 2d       	mov	r30, r0
     f1c:	12 96       	adiw	r26, 0x02	; 2
     f1e:	fc 93       	st	X, r31
     f20:	ee 93       	st	-X, r30
     f22:	11 97       	sbiw	r26, 0x01	; 1
     f24:	4a 5c       	subi	r20, 0xCA	; 202
     f26:	58 4f       	sbci	r21, 0xF8	; 248
     f28:	e4 17       	cp	r30, r20
     f2a:	f5 07       	cpc	r31, r21
     f2c:	29 f4       	brne	.+10     	; 0xf38 <vTaskSwitchContext+0x78>
     f2e:	42 81       	ldd	r20, Z+2	; 0x02
     f30:	53 81       	ldd	r21, Z+3	; 0x03
     f32:	fd 01       	movw	r30, r26
     f34:	52 83       	std	Z+2, r21	; 0x02
     f36:	41 83       	std	Z+1, r20	; 0x01
     f38:	fc 01       	movw	r30, r24
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	8e 0f       	add	r24, r30
     f48:	9f 1f       	adc	r25, r31
     f4a:	fc 01       	movw	r30, r24
     f4c:	ed 5c       	subi	r30, 0xCD	; 205
     f4e:	f8 4f       	sbci	r31, 0xF8	; 248
     f50:	01 80       	ldd	r0, Z+1	; 0x01
     f52:	f2 81       	ldd	r31, Z+2	; 0x02
     f54:	e0 2d       	mov	r30, r0
     f56:	86 81       	ldd	r24, Z+6	; 0x06
     f58:	97 81       	ldd	r25, Z+7	; 0x07
     f5a:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <pxCurrentTCB+0x1>
     f5e:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <pxCurrentTCB>
     f62:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <uxTopReadyPriority>
     f66:	08 95       	ret

00000f68 <init_rgb_led>:
	
	}l1;
void init_rgb_led()
{
	//static RGBled_type l1;
	l1.red_ddr    = &DDRB; l1.red_data    = &PORTB ;  l1.red_pin    = 0x08 ;
     f68:	e9 e5       	ldi	r30, 0x59	; 89
     f6a:	f7 e0       	ldi	r31, 0x07	; 7
     f6c:	24 e2       	ldi	r18, 0x24	; 36
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 83       	st	Z, r18
     f74:	85 e2       	ldi	r24, 0x25	; 37
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	97 83       	std	Z+7, r25	; 0x07
     f7a:	86 83       	std	Z+6, r24	; 0x06
     f7c:	48 e0       	ldi	r20, 0x08	; 8
     f7e:	44 87       	std	Z+12, r20	; 0x0c
	l1.green_ddr  = &DDRB; l1.green_data  = &PORTB ;  l1.green_pin  = 0x04 ;
     f80:	33 83       	std	Z+3, r19	; 0x03
     f82:	22 83       	std	Z+2, r18	; 0x02
     f84:	91 87       	std	Z+9, r25	; 0x09
     f86:	80 87       	std	Z+8, r24	; 0x08
     f88:	44 e0       	ldi	r20, 0x04	; 4
     f8a:	45 87       	std	Z+13, r20	; 0x0d
	l1.blue_ddr   = &DDRB; l1.blue_data   = &PORTB ;  l1.blue_pin   = 0x02 ;
     f8c:	35 83       	std	Z+5, r19	; 0x05
     f8e:	24 83       	std	Z+4, r18	; 0x04
     f90:	93 87       	std	Z+11, r25	; 0x0b
     f92:	82 87       	std	Z+10, r24	; 0x0a
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	86 87       	std	Z+14, r24	; 0x0e

	l1.red = 0; l1.green = 0; l1.blue = 0;
     f98:	17 86       	std	Z+15, r1	; 0x0f
     f9a:	10 8a       	std	Z+16, r1	; 0x10
     f9c:	11 8a       	std	Z+17, r1	; 0x11
	
	*(l1.red_ddr)   |= l1.red_pin  ;  
     f9e:	84 b1       	in	r24, 0x04	; 4
	*(l1.green_ddr) |= l1.green_pin;
	*(l1.blue_ddr)  |= l1.blue_pin ;
     fa0:	8e 60       	ori	r24, 0x0E	; 14
     fa2:	84 b9       	out	0x04, r24	; 4
	
	*(l1.red_data)   |= l1.red_pin;
     fa4:	25 b1       	in	r18, 0x05	; 5
     fa6:	28 60       	ori	r18, 0x08	; 8
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	88 e8       	ldi	r24, 0x88	; 136
     faa:	93 e1       	ldi	r25, 0x13	; 19
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <init_rgb_led+0x50>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fae:	e0 e9       	ldi	r30, 0x90	; 144
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	31 97       	sbiw	r30, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <init_rgb_led+0x4a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	c9 f7       	brne	.-14     	; 0xfae <init_rgb_led+0x46>
	_delay_ms(500);
	*(l1.green_data) |= l1.green_pin;
     fbc:	24 60       	ori	r18, 0x04	; 4
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbe:	88 e8       	ldi	r24, 0x88	; 136
     fc0:	93 e1       	ldi	r25, 0x13	; 19
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <init_rgb_led+0x66>
     fc4:	e0 e9       	ldi	r30, 0x90	; 144
     fc6:	f1 e0       	ldi	r31, 0x01	; 1
     fc8:	31 97       	sbiw	r30, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <init_rgb_led+0x60>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fcc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <init_rgb_led+0x5c>
    _delay_ms(500);
	*(l1.blue_data)  |= l1.blue_pin;
     fd2:	22 60       	ori	r18, 0x02	; 2
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd4:	88 e8       	ldi	r24, 0x88	; 136
     fd6:	93 e1       	ldi	r25, 0x13	; 19
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <init_rgb_led+0x7c>
     fda:	e0 e9       	ldi	r30, 0x90	; 144
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <init_rgb_led+0x76>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	c9 f7       	brne	.-14     	; 0xfda <init_rgb_led+0x72>
    _delay_ms(500);
	
	*(l1.blue_data)  &=~ l1.blue_pin;
     fe8:	2d 7f       	andi	r18, 0xFD	; 253
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	88 e8       	ldi	r24, 0x88	; 136
     fec:	93 e1       	ldi	r25, 0x13	; 19
     fee:	05 c0       	rjmp	.+10     	; 0xffa <init_rgb_led+0x92>
     ff0:	e0 e9       	ldi	r30, 0x90	; 144
     ff2:	f1 e0       	ldi	r31, 0x01	; 1
     ff4:	31 97       	sbiw	r30, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <init_rgb_led+0x8c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <init_rgb_led+0x88>
	_delay_ms(500);
	*(l1.green_data) &=~ l1.green_pin;
     ffe:	2b 7f       	andi	r18, 0xFB	; 251
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	88 e8       	ldi	r24, 0x88	; 136
    1002:	93 e1       	ldi	r25, 0x13	; 19
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <init_rgb_led+0xa8>
    1006:	e0 e9       	ldi	r30, 0x90	; 144
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <init_rgb_led+0xa2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	c9 f7       	brne	.-14     	; 0x1006 <init_rgb_led+0x9e>
	_delay_ms(500);
	*(l1.red_data)   &=~ l1.red_pin;
    1014:	82 2f       	mov	r24, r18
    1016:	87 7f       	andi	r24, 0xF7	; 247
    1018:	85 b9       	out	0x05, r24	; 5
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101a:	88 e8       	ldi	r24, 0x88	; 136
    101c:	93 e1       	ldi	r25, 0x13	; 19
    101e:	05 c0       	rjmp	.+10     	; 0x102a <init_rgb_led+0xc2>
    1020:	e0 e9       	ldi	r30, 0x90	; 144
    1022:	f1 e0       	ldi	r31, 0x01	; 1
    1024:	31 97       	sbiw	r30, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <init_rgb_led+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	c9 f7       	brne	.-14     	; 0x1020 <init_rgb_led+0xb8>
	_delay_ms(500);
	
}
    102e:	08 95       	ret

00001030 <init_SevenSegment>:
void init_SevenSegment()
{
	
	//DDRC   =0x0c;
	//PORTC  = 0x0c;
	sev.ddr      =& DDRD ;  sev.data_port =& PORTD ;
    1030:	eb e6       	ldi	r30, 0x6B	; 107
    1032:	f7 e0       	ldi	r31, 0x07	; 7
    1034:	8a e2       	ldi	r24, 0x2A	; 42
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	80 83       	st	Z, r24
    103c:	8b e2       	ldi	r24, 0x2B	; 43
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	93 83       	std	Z+3, r25	; 0x03
    1042:	82 83       	std	Z+2, r24	; 0x02
	sev.ctrl_ddr =& DDRC ;  sev.ctrl_port =& PORTC ;
    1044:	87 e2       	ldi	r24, 0x27	; 39
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	95 83       	std	Z+5, r25	; 0x05
    104a:	84 83       	std	Z+4, r24	; 0x04
    104c:	88 e2       	ldi	r24, 0x28	; 40
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	97 83       	std	Z+7, r25	; 0x07
    1052:	86 83       	std	Z+6, r24	; 0x06
	sev.s0 = 0x08  ; sev.s1 = 0x04;     
    1054:	88 e0       	ldi	r24, 0x08	; 8
    1056:	80 87       	std	Z+8, r24	; 0x08
    1058:	84 e0       	ldi	r24, 0x04	; 4
    105a:	81 87       	std	Z+9, r24	; 0x09
	
	*(sev.ddr)       = 0xff;
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	8a b9       	out	0x0a, r24	; 10
    *(sev.data_port) = 0x00;
    1060:	1b b8       	out	0x0b, r1	; 11
	 sev.data=0;
    1062:	12 86       	std	Z+10, r1	; 0x0a
	 
	 
	 *(sev.ctrl_ddr)   |= sev.s0 | sev.s1;
    1064:	87 b1       	in	r24, 0x07	; 7
    1066:	8c 60       	ori	r24, 0x0C	; 12
    1068:	87 b9       	out	0x07, r24	; 7
	 *(sev.ctrl_port)  |= sev.s0 | sev.s1;
	 
	  
	 
	*(sev.ctrl_port) = sev.s0  ; 
	 for (int i=0;i<8;i++)
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	13 c0       	rjmp	.+38     	; 0x1096 <init_SevenSegment+0x66>
	 {
		 *(sev.data_port) =(1<<i);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	02 2e       	mov	r0, r18
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <init_SevenSegment+0x48>
    1076:	88 0f       	add	r24, r24
    1078:	0a 94       	dec	r0
    107a:	ea f7       	brpl	.-6      	; 0x1076 <init_SevenSegment+0x46>
    107c:	8b b9       	out	0x0b, r24	; 11
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107e:	88 ee       	ldi	r24, 0xE8	; 232
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	05 c0       	rjmp	.+10     	; 0x108e <init_SevenSegment+0x5e>
    1084:	e0 e9       	ldi	r30, 0x90	; 144
    1086:	f1 e0       	ldi	r31, 0x01	; 1
    1088:	31 97       	sbiw	r30, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <init_SevenSegment+0x58>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	c9 f7       	brne	.-14     	; 0x1084 <init_SevenSegment+0x54>
	 *(sev.ctrl_port)  |= sev.s0 | sev.s1;
	 
	  
	 
	*(sev.ctrl_port) = sev.s0  ; 
	 for (int i=0;i<8;i++)
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	28 30       	cpi	r18, 0x08	; 8
    1098:	31 05       	cpc	r19, r1
    109a:	54 f3       	brlt	.-44     	; 0x1070 <init_SevenSegment+0x40>
    109c:	84 ef       	ldi	r24, 0xF4	; 244
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <init_SevenSegment+0x7c>
    10a2:	e0 e9       	ldi	r30, 0x90	; 144
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <init_SevenSegment+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <init_SevenSegment+0x72>
		 _delay_ms(100);
	 }
	 _delay_ms(50);
	 //PORTC = 0x00;
	 	 
	*(sev.ctrl_port) = sev.s1  ;  
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	88 b9       	out	0x08, r24	; 8
	 
	
	 for (int i=0;i<8;i++)
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	13 c0       	rjmp	.+38     	; 0x10e0 <init_SevenSegment+0xb0>
	 {
		 *(sev.data_port) =(1<<i);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	02 2e       	mov	r0, r18
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <init_SevenSegment+0x92>
    10c0:	88 0f       	add	r24, r24
    10c2:	0a 94       	dec	r0
    10c4:	ea f7       	brpl	.-6      	; 0x10c0 <init_SevenSegment+0x90>
    10c6:	8b b9       	out	0x0b, r24	; 11
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c8:	88 ee       	ldi	r24, 0xE8	; 232
    10ca:	93 e0       	ldi	r25, 0x03	; 3
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <init_SevenSegment+0xa8>
    10ce:	e0 e9       	ldi	r30, 0x90	; 144
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	31 97       	sbiw	r30, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <init_SevenSegment+0xa2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	c9 f7       	brne	.-14     	; 0x10ce <init_SevenSegment+0x9e>
	 //PORTC = 0x00;
	 	 
	*(sev.ctrl_port) = sev.s1  ;  
	 
	
	 for (int i=0;i<8;i++)
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	28 30       	cpi	r18, 0x08	; 8
    10e2:	31 05       	cpc	r19, r1
    10e4:	54 f3       	brlt	.-44     	; 0x10ba <init_SevenSegment+0x8a>
    10e6:	84 ef       	ldi	r24, 0xF4	; 244
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <init_SevenSegment+0xc6>
    10ec:	e0 e9       	ldi	r30, 0x90	; 144
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	31 97       	sbiw	r30, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <init_SevenSegment+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <init_SevenSegment+0xbc>
		 _delay_ms(100);
	 }
	// PORTC = 0x08;
     _delay_ms(50);
	// PORTC = 0x00;
}
    10fa:	08 95       	ret

000010fc <evaluate>:

uint8_t evaluate(unsigned char x)
{
	uint8_t DATA_7SEG=0;
	switch(x)
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	8a 30       	cpi	r24, 0x0A	; 10
    1100:	91 05       	cpc	r25, r1
    1102:	b8 f4       	brcc	.+46     	; 0x1132 <evaluate+0x36>
    1104:	fc 01       	movw	r30, r24
    1106:	ec 5c       	subi	r30, 0xCC	; 204
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__tablejump2__>
	{
		case 0  : DATA_7SEG = 0x3f;     break;
    110e:	8f e3       	ldi	r24, 0x3F	; 63
    1110:	08 95       	ret
		case 1  : DATA_7SEG = 0x06;     break;
		case 2  : DATA_7SEG = 0x5b;     break;
    1112:	8b e5       	ldi	r24, 0x5B	; 91
    1114:	08 95       	ret
		case 3  : DATA_7SEG = 0x4f;     break;
    1116:	8f e4       	ldi	r24, 0x4F	; 79
    1118:	08 95       	ret
		
		case 4  : DATA_7SEG = 0x66;     break;
    111a:	86 e6       	ldi	r24, 0x66	; 102
    111c:	08 95       	ret
		case 5  : DATA_7SEG = 0x6d;     break;
    111e:	8d e6       	ldi	r24, 0x6D	; 109
    1120:	08 95       	ret
		case 6  : DATA_7SEG = 0x7d;     break;
    1122:	8d e7       	ldi	r24, 0x7D	; 125
    1124:	08 95       	ret
		
		case 7  : DATA_7SEG = 0x07;     break;
    1126:	87 e0       	ldi	r24, 0x07	; 7
    1128:	08 95       	ret
		case 8  : DATA_7SEG = 0x7f;     break;
    112a:	8f e7       	ldi	r24, 0x7F	; 127
    112c:	08 95       	ret
		case 9  : DATA_7SEG = 0x6f;     break;
    112e:	8f e6       	ldi	r24, 0x6F	; 111
    1130:	08 95       	ret
		
		default :
		DATA_7SEG = 0xfc;     break;
    1132:	8c ef       	ldi	r24, 0xFC	; 252
    1134:	08 95       	ret
{
	uint8_t DATA_7SEG=0;
	switch(x)
	{
		case 0  : DATA_7SEG = 0x3f;     break;
		case 1  : DATA_7SEG = 0x06;     break;
    1136:	86 e0       	ldi	r24, 0x06	; 6
		
	}
	
	return DATA_7SEG;
	
}
    1138:	08 95       	ret

0000113a <seventask>:

void seventask(void)
{
	init_SevenSegment();
    113a:	0e 94 18 08 	call	0x1030	; 0x1030 <init_SevenSegment>

	while (1)
	{
		
		
		for (int i=0;i<100;i++)
    113e:	c1 2c       	mov	r12, r1
    1140:	d1 2c       	mov	r13, r1
    1142:	3b c0       	rjmp	.+118    	; 0x11ba <seventask+0x80>
		{
			for (int j=0;j<50;j++)
			{
				*(sev.ctrl_port) = sev.s0  ; 
    1144:	cb e6       	ldi	r28, 0x6B	; 107
    1146:	d7 e0       	ldi	r29, 0x07	; 7
    1148:	ee 81       	ldd	r30, Y+6	; 0x06
    114a:	ff 81       	ldd	r31, Y+7	; 0x07
    114c:	88 85       	ldd	r24, Y+8	; 0x08
    114e:	80 83       	st	Z, r24
				*(sev.data_port) = evaluate(i%10);
    1150:	aa 80       	ldd	r10, Y+2	; 0x02
    1152:	bb 80       	ldd	r11, Y+3	; 0x03
    1154:	0f 2e       	mov	r0, r31
    1156:	fa e0       	ldi	r31, 0x0A	; 10
    1158:	ef 2e       	mov	r14, r31
    115a:	f1 2c       	mov	r15, r1
    115c:	f0 2d       	mov	r31, r0
    115e:	c6 01       	movw	r24, r12
    1160:	b7 01       	movw	r22, r14
    1162:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
    1166:	0e 94 7e 08 	call	0x10fc	; 0x10fc <evaluate>
    116a:	f5 01       	movw	r30, r10
    116c:	80 83       	st	Z, r24
				vTaskDelay( pdMS_TO_TICKS(5));
    116e:	8a e0       	ldi	r24, 0x0A	; 10
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 4a 07 	call	0xe94	; 0xe94 <vTaskDelay>
			
				
				*(sev.ctrl_port) = sev.s1  ; 
    1176:	ee 81       	ldd	r30, Y+6	; 0x06
    1178:	ff 81       	ldd	r31, Y+7	; 0x07
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	80 83       	st	Z, r24
				*(sev.data_port) = evaluate((i%100)/10);
    117e:	0a 80       	ldd	r0, Y+2	; 0x02
    1180:	db 81       	ldd	r29, Y+3	; 0x03
    1182:	c0 2d       	mov	r28, r0
    1184:	c6 01       	movw	r24, r12
    1186:	64 e6       	ldi	r22, 0x64	; 100
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
    1194:	86 2f       	mov	r24, r22
    1196:	0e 94 7e 08 	call	0x10fc	; 0x10fc <evaluate>
    119a:	88 83       	st	Y, r24
				vTaskDelay( pdMS_TO_TICKS(5));
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 4a 07 	call	0xe94	; 0xe94 <vTaskDelay>
	{
		
		
		for (int i=0;i<100;i++)
		{
			for (int j=0;j<50;j++)
    11a4:	0f 5f       	subi	r16, 0xFF	; 255
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <seventask+0x74>
    11aa:	00 e0       	ldi	r16, 0x00	; 0
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	02 33       	cpi	r16, 0x32	; 50
    11b0:	11 05       	cpc	r17, r1
    11b2:	44 f2       	brlt	.-112    	; 0x1144 <seventask+0xa>

	while (1)
	{
		
		
		for (int i=0;i<100;i++)
    11b4:	ff ef       	ldi	r31, 0xFF	; 255
    11b6:	cf 1a       	sub	r12, r31
    11b8:	df 0a       	sbc	r13, r31
    11ba:	84 e6       	ldi	r24, 0x64	; 100
    11bc:	c8 16       	cp	r12, r24
    11be:	d1 04       	cpc	r13, r1
    11c0:	a4 f3       	brlt	.-24     	; 0x11aa <seventask+0x70>
    11c2:	bd cf       	rjmp	.-134    	; 0x113e <seventask+0x4>

000011c4 <color2pwm>:
	}
	
}

void color2pwm(uint8_t color_val,color c,uint16_t frequency)
{
    11c4:	2f 92       	push	r2
    11c6:	3f 92       	push	r3
    11c8:	4f 92       	push	r4
    11ca:	5f 92       	push	r5
    11cc:	6f 92       	push	r6
    11ce:	7f 92       	push	r7
    11d0:	8f 92       	push	r8
    11d2:	9f 92       	push	r9
    11d4:	af 92       	push	r10
    11d6:	bf 92       	push	r11
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	29 97       	sbiw	r28, 0x09	; 9
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	08 2f       	mov	r16, r24
    11fa:	16 2f       	mov	r17, r22
	uint32_t T =  ( (1.0 / frequency) * 1000000);
    11fc:	ba 01       	movw	r22, r20
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	9f e3       	ldi	r25, 0x3F	; 63
    1212:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	34 e2       	ldi	r19, 0x24	; 36
    121a:	44 e7       	ldi	r20, 0x74	; 116
    121c:	59 e4       	ldi	r21, 0x49	; 73
    121e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1222:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
	
	uint8_t ds=0;
	
	
	ds = (color_val *100)/255;
    122a:	24 e6       	ldi	r18, 0x64	; 100
    122c:	02 9f       	mul	r16, r18
    122e:	c0 01       	movw	r24, r0
    1230:	11 24       	eor	r1, r1
    1232:	6f ef       	ldi	r22, 0xFF	; 255
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
	uint32_t t_on  = ((ds * T) /100);
    123a:	a6 2f       	mov	r26, r22
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	a7 01       	movw	r20, r14
    1240:	96 01       	movw	r18, r12
    1242:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__muluhisi3>
    1246:	24 e6       	ldi	r18, 0x64	; 100
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__udivmodsi4>
	uint32_t t_off = T-t_on;
    1252:	c2 1a       	sub	r12, r18
    1254:	d3 0a       	sbc	r13, r19
    1256:	e4 0a       	sbc	r14, r20
    1258:	f5 0a       	sbc	r15, r21

	switch(c)
    125a:	11 30       	cpi	r17, 0x01	; 1
    125c:	09 f4       	brne	.+2      	; 0x1260 <color2pwm+0x9c>
    125e:	3d c1       	rjmp	.+634    	; 0x14da <color2pwm+0x316>
    1260:	20 f0       	brcs	.+8      	; 0x126a <color2pwm+0xa6>
    1262:	12 30       	cpi	r17, 0x02	; 2
    1264:	09 f4       	brne	.+2      	; 0x1268 <color2pwm+0xa4>
    1266:	6d c2       	rjmp	.+1242   	; 0x1742 <color2pwm+0x57e>
    1268:	9f c3       	rjmp	.+1854   	; 0x19a8 <color2pwm+0x7e4>
	{
		
		case red:
		
		*(l1.red_data)   |= l1.red_pin;
    126a:	a9 e5       	ldi	r26, 0x59	; 89
    126c:	b7 e0       	ldi	r27, 0x07	; 7
    126e:	16 96       	adiw	r26, 0x06	; 6
    1270:	ed 91       	ld	r30, X+
    1272:	fc 91       	ld	r31, X
    1274:	17 97       	sbiw	r26, 0x07	; 7
    1276:	1c 96       	adiw	r26, 0x0c	; 12
    1278:	1c 91       	ld	r17, X
    127a:	80 81       	ld	r24, Z
    127c:	81 2b       	or	r24, r17
    127e:	80 83       	st	Z, r24
		_delay_us(t_on);
    1280:	ca 01       	movw	r24, r20
    1282:	b9 01       	movw	r22, r18
    1284:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    1288:	4b 01       	movw	r8, r22
    128a:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    128c:	2b ea       	ldi	r18, 0xAB	; 171
    128e:	3a ea       	ldi	r19, 0xAA	; 170
    1290:	4a ea       	ldi	r20, 0xAA	; 170
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1298:	2b 01       	movw	r4, r22
    129a:	3c 01       	movw	r6, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	50 e4       	ldi	r21, 0x40	; 64
    12a4:	c5 01       	movw	r24, r10
    12a6:	b4 01       	movw	r22, r8
    12a8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    12ac:	69 83       	std	Y+1, r22	; 0x01
    12ae:	7a 83       	std	Y+2, r23	; 0x02
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	c3 01       	movw	r24, r6
    12be:	b2 01       	movw	r22, r4
    12c0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	0c f4       	brge	.+2      	; 0x12ca <color2pwm+0x106>
    12c8:	6b c0       	rjmp	.+214    	; 0x13a0 <color2pwm+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	69 81       	ldd	r22, Y+1	; 0x01
    12d4:	7a 81       	ldd	r23, Y+2	; 0x02
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    12de:	18 16       	cp	r1, r24
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <color2pwm+0x120>
    12e2:	44 c0       	rjmp	.+136    	; 0x136c <color2pwm+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a e7       	ldi	r20, 0x7A	; 122
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	c5 01       	movw	r24, r10
    12ee:	b4 01       	movw	r22, r8
    12f0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    12f4:	2b 01       	movw	r4, r22
    12f6:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a e7       	ldi	r20, 0x7A	; 122
    12fe:	55 e4       	ldi	r21, 0x45	; 69
    1300:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1304:	4b 01       	movw	r8, r22
    1306:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    1314:	88 23       	and	r24, r24
    1316:	24 f1       	brlt	.+72     	; 0x1360 <color2pwm+0x19c>
		__ticks = 1;
	else if (__tmp > 65535)
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	3f ef       	ldi	r19, 0xFF	; 255
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	57 e4       	ldi	r21, 0x47	; 71
    1320:	c5 01       	movw	r24, r10
    1322:	b4 01       	movw	r22, r8
    1324:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1328:	18 16       	cp	r1, r24
    132a:	ac f4       	brge	.+42     	; 0x1356 <color2pwm+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	51 e4       	ldi	r21, 0x41	; 65
    1334:	c3 01       	movw	r24, r6
    1336:	b2 01       	movw	r22, r4
    1338:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    133c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1340:	06 c0       	rjmp	.+12     	; 0x134e <color2pwm+0x18a>
    1342:	80 e9       	ldi	r24, 0x90	; 144
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <color2pwm+0x182>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134a:	61 50       	subi	r22, 0x01	; 1
    134c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134e:	61 15       	cp	r22, r1
    1350:	71 05       	cpc	r23, r1
    1352:	b9 f7       	brne	.-18     	; 0x1342 <color2pwm+0x17e>
    1354:	27 c0       	rjmp	.+78     	; 0x13a4 <color2pwm+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1356:	c5 01       	movw	r24, r10
    1358:	b4 01       	movw	r22, r8
    135a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <color2pwm+0x1a0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	cb 01       	movw	r24, r22
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <color2pwm+0x1a2>
    136a:	1c c0       	rjmp	.+56     	; 0x13a4 <color2pwm+0x1e0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	53 e4       	ldi	r21, 0x43	; 67
    1374:	c3 01       	movw	r24, r6
    1376:	b2 01       	movw	r22, r4
    1378:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    137c:	18 16       	cp	r1, r24
    137e:	54 f4       	brge	.+20     	; 0x1394 <color2pwm+0x1d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1380:	69 81       	ldd	r22, Y+1	; 0x01
    1382:	7a 81       	ldd	r23, Y+2	; 0x02
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    138c:	cb 01       	movw	r24, r22
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <color2pwm+0x1ca>
    1392:	0b c0       	rjmp	.+22     	; 0x13aa <color2pwm+0x1e6>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1394:	c3 01       	movw	r24, r6
    1396:	b2 01       	movw	r22, r4
    1398:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    139c:	69 87       	std	Y+9, r22	; 0x09
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <color2pwm+0x1e0>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 87       	std	Y+9, r24	; 0x09
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13a4:	99 85       	ldd	r25, Y+9	; 0x09
    13a6:	9a 95       	dec	r25
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <color2pwm+0x1e2>
		
		*(l1.blue_data)  &=~ l1.red_pin;
    13aa:	e0 91 63 07 	lds	r30, 0x0763	; 0x800763 <l1+0xa>
    13ae:	f0 91 64 07 	lds	r31, 0x0764	; 0x800764 <l1+0xb>
    13b2:	10 95       	com	r17
    13b4:	80 81       	ld	r24, Z
    13b6:	18 23       	and	r17, r24
    13b8:	10 83       	st	Z, r17
		_delay_us(t_off);
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    13c2:	6b 01       	movw	r12, r22
    13c4:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    13c6:	2b ea       	ldi	r18, 0xAB	; 171
    13c8:	3a ea       	ldi	r19, 0xAA	; 170
    13ca:	4a ea       	ldi	r20, 0xAA	; 170
    13cc:	50 e4       	ldi	r21, 0x40	; 64
    13ce:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	50 e4       	ldi	r21, 0x40	; 64
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    13e6:	2b 01       	movw	r4, r22
    13e8:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	c5 01       	movw	r24, r10
    13f4:	b4 01       	movw	r22, r8
    13f6:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	0c f4       	brge	.+2      	; 0x1400 <color2pwm+0x23c>
    13fe:	67 c0       	rjmp	.+206    	; 0x14ce <color2pwm+0x30a>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	c3 01       	movw	r24, r6
    140a:	b2 01       	movw	r22, r4
    140c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1410:	18 16       	cp	r1, r24
    1412:	0c f0       	brlt	.+2      	; 0x1416 <color2pwm+0x252>
    1414:	44 c0       	rjmp	.+136    	; 0x149e <color2pwm+0x2da>
	{
		_delay_ms(__us / 1000.0);
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	4a e7       	ldi	r20, 0x7A	; 122
    141c:	54 e4       	ldi	r21, 0x44	; 68
    141e:	c7 01       	movw	r24, r14
    1420:	b6 01       	movw	r22, r12
    1422:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    1426:	4b 01       	movw	r8, r22
    1428:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	55 e4       	ldi	r21, 0x45	; 69
    1432:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1436:	6b 01       	movw	r12, r22
    1438:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e8       	ldi	r20, 0x80	; 128
    1440:	5f e3       	ldi	r21, 0x3F	; 63
    1442:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    1446:	88 23       	and	r24, r24
    1448:	24 f1       	brlt	.+72     	; 0x1492 <color2pwm+0x2ce>
		__ticks = 1;
	else if (__tmp > 65535)
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    145a:	18 16       	cp	r1, r24
    145c:	ac f4       	brge	.+42     	; 0x1488 <color2pwm+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	c5 01       	movw	r24, r10
    1468:	b4 01       	movw	r22, r8
    146a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    146e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <color2pwm+0x2bc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1474:	80 e9       	ldi	r24, 0x90	; 144
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <color2pwm+0x2b4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	61 50       	subi	r22, 0x01	; 1
    147e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	61 15       	cp	r22, r1
    1482:	71 05       	cpc	r23, r1
    1484:	b9 f7       	brne	.-18     	; 0x1474 <color2pwm+0x2b0>
    1486:	25 c0       	rjmp	.+74     	; 0x14d2 <color2pwm+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	c7 01       	movw	r24, r14
    148a:	b6 01       	movw	r22, r12
    148c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <color2pwm+0x2d2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	cb 01       	movw	r24, r22
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <color2pwm+0x2d4>
    149c:	1a c0       	rjmp	.+52     	; 0x14d2 <color2pwm+0x30e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	53 e4       	ldi	r21, 0x43	; 67
    14a6:	c5 01       	movw	r24, r10
    14a8:	b4 01       	movw	r22, r8
    14aa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	44 f4       	brge	.+16     	; 0x14c2 <color2pwm+0x2fe>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    14b2:	c3 01       	movw	r24, r6
    14b4:	b2 01       	movw	r22, r4
    14b6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    14ba:	cb 01       	movw	r24, r22
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <color2pwm+0x2f8>
    14c0:	73 c2       	rjmp	.+1254   	; 0x19a8 <color2pwm+0x7e4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14c2:	c5 01       	movw	r24, r10
    14c4:	b4 01       	movw	r22, r8
    14c6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    14ca:	6f 83       	std	Y+7, r22	; 0x07
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <color2pwm+0x30e>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    14ce:	e1 e0       	ldi	r30, 0x01	; 1
    14d0:	ef 83       	std	Y+7, r30	; 0x07
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14d2:	ff 81       	ldd	r31, Y+7	; 0x07
    14d4:	fa 95       	dec	r31
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <color2pwm+0x310>
    14d8:	67 c2       	rjmp	.+1230   	; 0x19a8 <color2pwm+0x7e4>
		break;
		
		case green:
		
		*(l1.green_data)   |= l1.green_pin;
    14da:	e9 e5       	ldi	r30, 0x59	; 89
    14dc:	f7 e0       	ldi	r31, 0x07	; 7
    14de:	80 85       	ldd	r24, Z+8	; 0x08
    14e0:	91 85       	ldd	r25, Z+9	; 0x09
    14e2:	98 87       	std	Y+8, r25	; 0x08
    14e4:	8f 83       	std	Y+7, r24	; 0x07
    14e6:	15 85       	ldd	r17, Z+13	; 0x0d
    14e8:	fc 01       	movw	r30, r24
    14ea:	00 81       	ld	r16, Z
    14ec:	01 2b       	or	r16, r17
    14ee:	00 83       	st	Z, r16
		_delay_us(t_on);
    14f0:	ca 01       	movw	r24, r20
    14f2:	b9 01       	movw	r22, r18
    14f4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    14f8:	4b 01       	movw	r8, r22
    14fa:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    14fc:	2b ea       	ldi	r18, 0xAB	; 171
    14fe:	3a ea       	ldi	r19, 0xAA	; 170
    1500:	4a ea       	ldi	r20, 0xAA	; 170
    1502:	50 e4       	ldi	r21, 0x40	; 64
    1504:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1508:	2b 01       	movw	r4, r22
    150a:	3c 01       	movw	r6, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	c5 01       	movw	r24, r10
    1516:	b4 01       	movw	r22, r8
    1518:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    151c:	69 83       	std	Y+1, r22	; 0x01
    151e:	7a 83       	std	Y+2, r23	; 0x02
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	5f e3       	ldi	r21, 0x3F	; 63
    152c:	c3 01       	movw	r24, r6
    152e:	b2 01       	movw	r22, r4
    1530:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    1534:	88 23       	and	r24, r24
    1536:	0c f4       	brge	.+2      	; 0x153a <color2pwm+0x376>
    1538:	6b c0       	rjmp	.+214    	; 0x1610 <color2pwm+0x44c>
		__ticks = 1;
	else if (__tmp2 > 65535)
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	69 81       	ldd	r22, Y+1	; 0x01
    1544:	7a 81       	ldd	r23, Y+2	; 0x02
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    154e:	18 16       	cp	r1, r24
    1550:	0c f0       	brlt	.+2      	; 0x1554 <color2pwm+0x390>
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <color2pwm+0x418>
	{
		_delay_ms(__us / 1000.0);
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	4a e7       	ldi	r20, 0x7A	; 122
    155a:	54 e4       	ldi	r21, 0x44	; 68
    155c:	c5 01       	movw	r24, r10
    155e:	b4 01       	movw	r22, r8
    1560:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    1564:	2b 01       	movw	r4, r22
    1566:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a e7       	ldi	r20, 0x7A	; 122
    156e:	55 e4       	ldi	r21, 0x45	; 69
    1570:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1574:	4b 01       	movw	r8, r22
    1576:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    1584:	88 23       	and	r24, r24
    1586:	24 f1       	brlt	.+72     	; 0x15d0 <color2pwm+0x40c>
		__ticks = 1;
	else if (__tmp > 65535)
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	c5 01       	movw	r24, r10
    1592:	b4 01       	movw	r22, r8
    1594:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1598:	18 16       	cp	r1, r24
    159a:	ac f4       	brge	.+42     	; 0x15c6 <color2pwm+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	c3 01       	movw	r24, r6
    15a6:	b2 01       	movw	r22, r4
    15a8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    15ac:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <color2pwm+0x3fa>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b2:	80 e9       	ldi	r24, 0x90	; 144
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <color2pwm+0x3f2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ba:	61 50       	subi	r22, 0x01	; 1
    15bc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15be:	61 15       	cp	r22, r1
    15c0:	71 05       	cpc	r23, r1
    15c2:	b9 f7       	brne	.-18     	; 0x15b2 <color2pwm+0x3ee>
    15c4:	27 c0       	rjmp	.+78     	; 0x1614 <color2pwm+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	c5 01       	movw	r24, r10
    15c8:	b4 01       	movw	r22, r8
    15ca:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <color2pwm+0x410>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	cb 01       	movw	r24, r22
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <color2pwm+0x412>
    15da:	1c c0       	rjmp	.+56     	; 0x1614 <color2pwm+0x450>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	53 e4       	ldi	r21, 0x43	; 67
    15e4:	c3 01       	movw	r24, r6
    15e6:	b2 01       	movw	r22, r4
    15e8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	54 f4       	brge	.+20     	; 0x1604 <color2pwm+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    15f0:	69 81       	ldd	r22, Y+1	; 0x01
    15f2:	7a 81       	ldd	r23, Y+2	; 0x02
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    15fc:	cb 01       	movw	r24, r22
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <color2pwm+0x43a>
    1602:	0b c0       	rjmp	.+22     	; 0x161a <color2pwm+0x456>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1604:	c3 01       	movw	r24, r6
    1606:	b2 01       	movw	r22, r4
    1608:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    160c:	6d 83       	std	Y+5, r22	; 0x05
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <color2pwm+0x450>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1610:	f1 e0       	ldi	r31, 0x01	; 1
    1612:	fd 83       	std	Y+5, r31	; 0x05
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	8a 95       	dec	r24
    1618:	f1 f7       	brne	.-4      	; 0x1616 <color2pwm+0x452>
		
		*(l1.green_data)  &=~ l1.green_pin;
    161a:	10 95       	com	r17
    161c:	01 23       	and	r16, r17
    161e:	ef 81       	ldd	r30, Y+7	; 0x07
    1620:	f8 85       	ldd	r31, Y+8	; 0x08
    1622:	00 83       	st	Z, r16
		_delay_us(t_off);
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    162c:	6b 01       	movw	r12, r22
    162e:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1630:	2b ea       	ldi	r18, 0xAB	; 171
    1632:	3a ea       	ldi	r19, 0xAA	; 170
    1634:	4a ea       	ldi	r20, 0xAA	; 170
    1636:	50 e4       	ldi	r21, 0x40	; 64
    1638:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    163c:	4b 01       	movw	r8, r22
    163e:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	50 e4       	ldi	r21, 0x40	; 64
    1648:	c7 01       	movw	r24, r14
    164a:	b6 01       	movw	r22, r12
    164c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1650:	2b 01       	movw	r4, r22
    1652:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	c5 01       	movw	r24, r10
    165e:	b4 01       	movw	r22, r8
    1660:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    1664:	88 23       	and	r24, r24
    1666:	0c f4       	brge	.+2      	; 0x166a <color2pwm+0x4a6>
    1668:	67 c0       	rjmp	.+206    	; 0x1738 <color2pwm+0x574>
		__ticks = 1;
	else if (__tmp2 > 65535)
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	c3 01       	movw	r24, r6
    1674:	b2 01       	movw	r22, r4
    1676:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    167a:	18 16       	cp	r1, r24
    167c:	0c f0       	brlt	.+2      	; 0x1680 <color2pwm+0x4bc>
    167e:	44 c0       	rjmp	.+136    	; 0x1708 <color2pwm+0x544>
	{
		_delay_ms(__us / 1000.0);
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a e7       	ldi	r20, 0x7A	; 122
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	c7 01       	movw	r24, r14
    168a:	b6 01       	movw	r22, r12
    168c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    1690:	4b 01       	movw	r8, r22
    1692:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a e7       	ldi	r20, 0x7A	; 122
    169a:	55 e4       	ldi	r21, 0x45	; 69
    169c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    16a0:	6b 01       	movw	r12, r22
    16a2:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	24 f1       	brlt	.+72     	; 0x16fc <color2pwm+0x538>
		__ticks = 1;
	else if (__tmp > 65535)
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	ac f4       	brge	.+42     	; 0x16f2 <color2pwm+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	c5 01       	movw	r24, r10
    16d2:	b4 01       	movw	r22, r8
    16d4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    16d8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <color2pwm+0x526>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16de:	80 e9       	ldi	r24, 0x90	; 144
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <color2pwm+0x51e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	61 50       	subi	r22, 0x01	; 1
    16e8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	61 15       	cp	r22, r1
    16ec:	71 05       	cpc	r23, r1
    16ee:	b9 f7       	brne	.-18     	; 0x16de <color2pwm+0x51a>
    16f0:	25 c0       	rjmp	.+74     	; 0x173c <color2pwm+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <color2pwm+0x53c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	cb 01       	movw	r24, r22
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <color2pwm+0x53e>
    1706:	1a c0       	rjmp	.+52     	; 0x173c <color2pwm+0x578>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	c5 01       	movw	r24, r10
    1712:	b4 01       	movw	r22, r8
    1714:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1718:	18 16       	cp	r1, r24
    171a:	44 f4       	brge	.+16     	; 0x172c <color2pwm+0x568>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    171c:	c3 01       	movw	r24, r6
    171e:	b2 01       	movw	r22, r4
    1720:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1724:	cb 01       	movw	r24, r22
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <color2pwm+0x562>
    172a:	3e c1       	rjmp	.+636    	; 0x19a8 <color2pwm+0x7e4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    172c:	c5 01       	movw	r24, r10
    172e:	b4 01       	movw	r22, r8
    1730:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1734:	26 2e       	mov	r2, r22
    1736:	02 c0       	rjmp	.+4      	; 0x173c <color2pwm+0x578>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1738:	22 24       	eor	r2, r2
    173a:	23 94       	inc	r2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    173c:	2a 94       	dec	r2
    173e:	f1 f7       	brne	.-4      	; 0x173c <color2pwm+0x578>
    1740:	33 c1       	rjmp	.+614    	; 0x19a8 <color2pwm+0x7e4>
		break;
		
		case blue:
		
		*(l1.blue_data)   |= l1.blue_pin;
    1742:	e9 e5       	ldi	r30, 0x59	; 89
    1744:	f7 e0       	ldi	r31, 0x07	; 7
    1746:	82 85       	ldd	r24, Z+10	; 0x0a
    1748:	93 85       	ldd	r25, Z+11	; 0x0b
    174a:	98 87       	std	Y+8, r25	; 0x08
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	16 85       	ldd	r17, Z+14	; 0x0e
    1750:	fc 01       	movw	r30, r24
    1752:	00 81       	ld	r16, Z
    1754:	01 2b       	or	r16, r17
    1756:	00 83       	st	Z, r16
		_delay_us(t_on);
    1758:	ca 01       	movw	r24, r20
    175a:	b9 01       	movw	r22, r18
    175c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    1760:	4b 01       	movw	r8, r22
    1762:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1764:	2b ea       	ldi	r18, 0xAB	; 171
    1766:	3a ea       	ldi	r19, 0xAA	; 170
    1768:	4a ea       	ldi	r20, 0xAA	; 170
    176a:	50 e4       	ldi	r21, 0x40	; 64
    176c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1770:	2b 01       	movw	r4, r22
    1772:	3c 01       	movw	r6, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	50 e4       	ldi	r21, 0x40	; 64
    177c:	c5 01       	movw	r24, r10
    177e:	b4 01       	movw	r22, r8
    1780:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1784:	69 83       	std	Y+1, r22	; 0x01
    1786:	7a 83       	std	Y+2, r23	; 0x02
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	c3 01       	movw	r24, r6
    1796:	b2 01       	movw	r22, r4
    1798:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    179c:	88 23       	and	r24, r24
    179e:	0c f4       	brge	.+2      	; 0x17a2 <color2pwm+0x5de>
    17a0:	6b c0       	rjmp	.+214    	; 0x1878 <color2pwm+0x6b4>
		__ticks = 1;
	else if (__tmp2 > 65535)
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	69 81       	ldd	r22, Y+1	; 0x01
    17ac:	7a 81       	ldd	r23, Y+2	; 0x02
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <color2pwm+0x5f8>
    17ba:	44 c0       	rjmp	.+136    	; 0x1844 <color2pwm+0x680>
	{
		_delay_ms(__us / 1000.0);
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	c5 01       	movw	r24, r10
    17c6:	b4 01       	movw	r22, r8
    17c8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    17cc:	2b 01       	movw	r4, r22
    17ce:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a e7       	ldi	r20, 0x7A	; 122
    17d6:	55 e4       	ldi	r21, 0x45	; 69
    17d8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    17dc:	4b 01       	movw	r8, r22
    17de:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	24 f1       	brlt	.+72     	; 0x1838 <color2pwm+0x674>
		__ticks = 1;
	else if (__tmp > 65535)
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	c5 01       	movw	r24, r10
    17fa:	b4 01       	movw	r22, r8
    17fc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1800:	18 16       	cp	r1, r24
    1802:	ac f4       	brge	.+42     	; 0x182e <color2pwm+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e2       	ldi	r20, 0x20	; 32
    180a:	51 e4       	ldi	r21, 0x41	; 65
    180c:	c3 01       	movw	r24, r6
    180e:	b2 01       	movw	r22, r4
    1810:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1814:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <color2pwm+0x662>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    181a:	80 e9       	ldi	r24, 0x90	; 144
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <color2pwm+0x65a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	61 50       	subi	r22, 0x01	; 1
    1824:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	61 15       	cp	r22, r1
    1828:	71 05       	cpc	r23, r1
    182a:	b9 f7       	brne	.-18     	; 0x181a <color2pwm+0x656>
    182c:	27 c0       	rjmp	.+78     	; 0x187c <color2pwm+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	c5 01       	movw	r24, r10
    1830:	b4 01       	movw	r22, r8
    1832:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1836:	02 c0       	rjmp	.+4      	; 0x183c <color2pwm+0x678>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	cb 01       	movw	r24, r22
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <color2pwm+0x67a>
    1842:	1c c0       	rjmp	.+56     	; 0x187c <color2pwm+0x6b8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	53 e4       	ldi	r21, 0x43	; 67
    184c:	c3 01       	movw	r24, r6
    184e:	b2 01       	movw	r22, r4
    1850:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1854:	18 16       	cp	r1, r24
    1856:	54 f4       	brge	.+20     	; 0x186c <color2pwm+0x6a8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1858:	69 81       	ldd	r22, Y+1	; 0x01
    185a:	7a 81       	ldd	r23, Y+2	; 0x02
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1864:	cb 01       	movw	r24, r22
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <color2pwm+0x6a2>
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <color2pwm+0x6be>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    186c:	c3 01       	movw	r24, r6
    186e:	b2 01       	movw	r22, r4
    1870:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1874:	6e 83       	std	Y+6, r22	; 0x06
    1876:	02 c0       	rjmp	.+4      	; 0x187c <color2pwm+0x6b8>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1878:	f1 e0       	ldi	r31, 0x01	; 1
    187a:	fe 83       	std	Y+6, r31	; 0x06
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	8a 95       	dec	r24
    1880:	f1 f7       	brne	.-4      	; 0x187e <color2pwm+0x6ba>
		
		*(l1.blue_data)  &=~ l1.blue_pin;
    1882:	10 95       	com	r17
    1884:	01 23       	and	r16, r17
    1886:	ef 81       	ldd	r30, Y+7	; 0x07
    1888:	f8 85       	ldd	r31, Y+8	; 0x08
    188a:	00 83       	st	Z, r16
		_delay_us(t_off);
    188c:	c7 01       	movw	r24, r14
    188e:	b6 01       	movw	r22, r12
    1890:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__floatunsisf>
    1894:	6b 01       	movw	r12, r22
    1896:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1898:	2b ea       	ldi	r18, 0xAB	; 171
    189a:	3a ea       	ldi	r19, 0xAA	; 170
    189c:	4a ea       	ldi	r20, 0xAA	; 170
    189e:	50 e4       	ldi	r21, 0x40	; 64
    18a0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    18a4:	4b 01       	movw	r8, r22
    18a6:	5c 01       	movw	r10, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	50 e4       	ldi	r21, 0x40	; 64
    18b0:	c7 01       	movw	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    18b8:	2b 01       	movw	r4, r22
    18ba:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	c5 01       	movw	r24, r10
    18c6:	b4 01       	movw	r22, r8
    18c8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    18cc:	88 23       	and	r24, r24
    18ce:	0c f4       	brge	.+2      	; 0x18d2 <color2pwm+0x70e>
    18d0:	67 c0       	rjmp	.+206    	; 0x19a0 <color2pwm+0x7dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	3f ef       	ldi	r19, 0xFF	; 255
    18d6:	4f e7       	ldi	r20, 0x7F	; 127
    18d8:	57 e4       	ldi	r21, 0x47	; 71
    18da:	c3 01       	movw	r24, r6
    18dc:	b2 01       	movw	r22, r4
    18de:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	0c f0       	brlt	.+2      	; 0x18e8 <color2pwm+0x724>
    18e6:	44 c0       	rjmp	.+136    	; 0x1970 <color2pwm+0x7ac>
	{
		_delay_ms(__us / 1000.0);
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a e7       	ldi	r20, 0x7A	; 122
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	c7 01       	movw	r24, r14
    18f2:	b6 01       	movw	r22, r12
    18f4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__divsf3>
    18f8:	4b 01       	movw	r8, r22
    18fa:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a e7       	ldi	r20, 0x7A	; 122
    1902:	55 e4       	ldi	r21, 0x45	; 69
    1904:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1908:	6b 01       	movw	r12, r22
    190a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__cmpsf2>
    1918:	88 23       	and	r24, r24
    191a:	24 f1       	brlt	.+72     	; 0x1964 <color2pwm+0x7a0>
		__ticks = 1;
	else if (__tmp > 65535)
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	c7 01       	movw	r24, r14
    1926:	b6 01       	movw	r22, r12
    1928:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    192c:	18 16       	cp	r1, r24
    192e:	ac f4       	brge	.+42     	; 0x195a <color2pwm+0x796>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e2       	ldi	r20, 0x20	; 32
    1936:	51 e4       	ldi	r21, 0x41	; 65
    1938:	c5 01       	movw	r24, r10
    193a:	b4 01       	movw	r22, r8
    193c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3>
    1940:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <color2pwm+0x78e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1946:	80 e9       	ldi	r24, 0x90	; 144
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <color2pwm+0x786>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	61 50       	subi	r22, 0x01	; 1
    1950:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	61 15       	cp	r22, r1
    1954:	71 05       	cpc	r23, r1
    1956:	b9 f7       	brne	.-18     	; 0x1946 <color2pwm+0x782>
    1958:	25 c0       	rjmp	.+74     	; 0x19a4 <color2pwm+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	c7 01       	movw	r24, r14
    195c:	b6 01       	movw	r22, r12
    195e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <color2pwm+0x7a4>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	cb 01       	movw	r24, r22
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <color2pwm+0x7a6>
    196e:	1a c0       	rjmp	.+52     	; 0x19a4 <color2pwm+0x7e0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	c5 01       	movw	r24, r10
    197a:	b4 01       	movw	r22, r8
    197c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__gesf2>
    1980:	18 16       	cp	r1, r24
    1982:	44 f4       	brge	.+16     	; 0x1994 <color2pwm+0x7d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1984:	c3 01       	movw	r24, r6
    1986:	b2 01       	movw	r22, r4
    1988:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    198c:	cb 01       	movw	r24, r22
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <color2pwm+0x7ca>
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <color2pwm+0x7e4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1994:	c5 01       	movw	r24, r10
    1996:	b4 01       	movw	r22, r8
    1998:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__fixunssfsi>
    199c:	36 2e       	mov	r3, r22
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <color2pwm+0x7e0>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    19a0:	33 24       	eor	r3, r3
    19a2:	33 94       	inc	r3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19a4:	3a 94       	dec	r3
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <color2pwm+0x7e0>
		break;
	}
	
}
    19a8:	29 96       	adiw	r28, 0x09	; 9
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	7f 90       	pop	r7
    19ce:	6f 90       	pop	r6
    19d0:	5f 90       	pop	r5
    19d2:	4f 90       	pop	r4
    19d4:	3f 90       	pop	r3
    19d6:	2f 90       	pop	r2
    19d8:	08 95       	ret

000019da <RGBtask>:

void RGBtask(void)
{
	
	init_rgb_led();
    19da:	0e 94 b4 07 	call	0xf68	; 0xf68 <init_rgb_led>
   // TickType_t xLastWakeTime;
   // xLastWakeTime = xTaskGetTickCount(); 

	while (1)
	{
		for (int i=0;i<256;i++)
    19de:	00 e0       	ldi	r16, 0x00	; 0
    19e0:	10 e0       	ldi	r17, 0x00	; 0
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <RGBtask+0x28>
		{
			 for (int k=0;k<5;k++)
			 {
				color2pwm(i, red,1000);
    19e4:	48 ee       	ldi	r20, 0xE8	; 232
    19e6:	53 e0       	ldi	r21, 0x03	; 3
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	80 2f       	mov	r24, r16
    19ec:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <color2pwm>

	while (1)
	{
		for (int i=0;i<256;i++)
		{
			 for (int k=0;k<5;k++)
    19f0:	21 96       	adiw	r28, 0x01	; 1
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <RGBtask+0x1e>
    19f4:	c0 e0       	ldi	r28, 0x00	; 0
    19f6:	d0 e0       	ldi	r29, 0x00	; 0
    19f8:	c5 30       	cpi	r28, 0x05	; 5
    19fa:	d1 05       	cpc	r29, r1
    19fc:	9c f3       	brlt	.-26     	; 0x19e4 <RGBtask+0xa>
   // TickType_t xLastWakeTime;
   // xLastWakeTime = xTaskGetTickCount(); 

	while (1)
	{
		for (int i=0;i<256;i++)
    19fe:	0f 5f       	subi	r16, 0xFF	; 255
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	0f 3f       	cpi	r16, 0xFF	; 255
    1a04:	11 05       	cpc	r17, r1
    1a06:	b1 f3       	breq	.-20     	; 0x19f4 <RGBtask+0x1a>
    1a08:	ac f3       	brlt	.-22     	; 0x19f4 <RGBtask+0x1a>
    1a0a:	00 e0       	ldi	r16, 0x00	; 0
    1a0c:	11 e0       	ldi	r17, 0x01	; 1
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <RGBtask+0x54>
		
		for (int i=256;i>0;i--)
		{
			 for (int k=0;k<5;k++)
			 {
			   color2pwm(i, red,1000);
    1a10:	48 ee       	ldi	r20, 0xE8	; 232
    1a12:	53 e0       	ldi	r21, 0x03	; 3
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	80 2f       	mov	r24, r16
    1a18:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <color2pwm>
			 }
		}
		
		for (int i=256;i>0;i--)
		{
			 for (int k=0;k<5;k++)
    1a1c:	21 96       	adiw	r28, 0x01	; 1
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <RGBtask+0x4a>
    1a20:	c0 e0       	ldi	r28, 0x00	; 0
    1a22:	d0 e0       	ldi	r29, 0x00	; 0
    1a24:	c5 30       	cpi	r28, 0x05	; 5
    1a26:	d1 05       	cpc	r29, r1
    1a28:	9c f3       	brlt	.-26     	; 0x1a10 <RGBtask+0x36>
				color2pwm(i, red,1000);
				//l1.red++;
			 }
		}
		
		for (int i=256;i>0;i--)
    1a2a:	01 50       	subi	r16, 0x01	; 1
    1a2c:	11 09       	sbc	r17, r1
    1a2e:	10 16       	cp	r1, r16
    1a30:	11 06       	cpc	r1, r17
    1a32:	b4 f3       	brlt	.-20     	; 0x1a20 <RGBtask+0x46>
    1a34:	80 e1       	ldi	r24, 0x10	; 16
    1a36:	97 e2       	ldi	r25, 0x27	; 39
    1a38:	05 c0       	rjmp	.+10     	; 0x1a44 <RGBtask+0x6a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a3a:	e0 e9       	ldi	r30, 0x90	; 144
    1a3c:	f1 e0       	ldi	r31, 0x01	; 1
    1a3e:	31 97       	sbiw	r30, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <RGBtask+0x64>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <RGBtask+0x60>
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <RGBtask+0x92>
		  
		  for (int color_v=0;color_v<256;color_v++)
		  {
			   for (int k=0;k<5;k++)
			   {
			     color2pwm(color_v,green ,1000);
    1a4e:	48 ee       	ldi	r20, 0xE8	; 232
    1a50:	53 e0       	ldi	r21, 0x03	; 3
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	80 2f       	mov	r24, r16
    1a56:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <color2pwm>
		//  vTaskDelay( pdMS_TO_TICKS(1000));
		_delay_ms(1000);
		  
		  for (int color_v=0;color_v<256;color_v++)
		  {
			   for (int k=0;k<5;k++)
    1a5a:	21 96       	adiw	r28, 0x01	; 1
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <RGBtask+0x88>
    1a5e:	c0 e0       	ldi	r28, 0x00	; 0
    1a60:	d0 e0       	ldi	r29, 0x00	; 0
    1a62:	c5 30       	cpi	r28, 0x05	; 5
    1a64:	d1 05       	cpc	r29, r1
    1a66:	9c f3       	brlt	.-26     	; 0x1a4e <RGBtask+0x74>
		}
		//vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000));
		//  vTaskDelay( pdMS_TO_TICKS(1000));
		_delay_ms(1000);
		  
		  for (int color_v=0;color_v<256;color_v++)
    1a68:	0f 5f       	subi	r16, 0xFF	; 255
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	0f 3f       	cpi	r16, 0xFF	; 255
    1a6e:	11 05       	cpc	r17, r1
    1a70:	b1 f3       	breq	.-20     	; 0x1a5e <RGBtask+0x84>
    1a72:	ac f3       	brlt	.-22     	; 0x1a5e <RGBtask+0x84>
    1a74:	0f ef       	ldi	r16, 0xFF	; 255
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <RGBtask+0xbe>
		  
		  for (int color_v=255;color_v>0;color_v--)
		  {
			   for (int k=0;k<5;k++)
			   {
			      color2pwm(color_v, green,1000);
    1a7a:	48 ee       	ldi	r20, 0xE8	; 232
    1a7c:	53 e0       	ldi	r21, 0x03	; 3
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	80 2f       	mov	r24, r16
    1a82:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <color2pwm>
		  
		  // _delay_ms(100);
		  
		  for (int color_v=255;color_v>0;color_v--)
		  {
			   for (int k=0;k<5;k++)
    1a86:	21 96       	adiw	r28, 0x01	; 1
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <RGBtask+0xb4>
    1a8a:	c0 e0       	ldi	r28, 0x00	; 0
    1a8c:	d0 e0       	ldi	r29, 0x00	; 0
    1a8e:	c5 30       	cpi	r28, 0x05	; 5
    1a90:	d1 05       	cpc	r29, r1
    1a92:	9c f3       	brlt	.-26     	; 0x1a7a <RGBtask+0xa0>
			  
		  }
		  
		  // _delay_ms(100);
		  
		  for (int color_v=255;color_v>0;color_v--)
    1a94:	01 50       	subi	r16, 0x01	; 1
    1a96:	11 09       	sbc	r17, r1
    1a98:	10 16       	cp	r1, r16
    1a9a:	11 06       	cpc	r1, r17
    1a9c:	b4 f3       	brlt	.-20     	; 0x1a8a <RGBtask+0xb0>
    1a9e:	80 e1       	ldi	r24, 0x10	; 16
    1aa0:	97 e2       	ldi	r25, 0x27	; 39
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <RGBtask+0xd4>
    1aa4:	e0 e9       	ldi	r30, 0x90	; 144
    1aa6:	f1 e0       	ldi	r31, 0x01	; 1
    1aa8:	31 97       	sbiw	r30, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <RGBtask+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <RGBtask+0xca>
    1ab2:	00 e0       	ldi	r16, 0x00	; 0
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <RGBtask+0xfc>
			 _delay_ms(1000);
		  for (int color_v=0;color_v<256;color_v++)
		  {
			  for (int k=0;k<5;k++)
			  { 
			    color2pwm(color_v,blue ,1000);
    1ab8:	48 ee       	ldi	r20, 0xE8	; 232
    1aba:	53 e0       	ldi	r21, 0x03	; 3
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	80 2f       	mov	r24, r16
    1ac0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <color2pwm>
		  //vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000));
		 //vTaskDelay( pdMS_TO_TICKS(1000));
			 _delay_ms(1000);
		  for (int color_v=0;color_v<256;color_v++)
		  {
			  for (int k=0;k<5;k++)
    1ac4:	21 96       	adiw	r28, 0x01	; 1
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <RGBtask+0xf2>
    1ac8:	c0 e0       	ldi	r28, 0x00	; 0
    1aca:	d0 e0       	ldi	r29, 0x00	; 0
    1acc:	c5 30       	cpi	r28, 0x05	; 5
    1ace:	d1 05       	cpc	r29, r1
    1ad0:	9c f3       	brlt	.-26     	; 0x1ab8 <RGBtask+0xde>
		  }
		  
		  //vTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 1000));
		 //vTaskDelay( pdMS_TO_TICKS(1000));
			 _delay_ms(1000);
		  for (int color_v=0;color_v<256;color_v++)
    1ad2:	0f 5f       	subi	r16, 0xFF	; 255
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	0f 3f       	cpi	r16, 0xFF	; 255
    1ad8:	11 05       	cpc	r17, r1
    1ada:	b1 f3       	breq	.-20     	; 0x1ac8 <RGBtask+0xee>
    1adc:	ac f3       	brlt	.-22     	; 0x1ac8 <RGBtask+0xee>
    1ade:	0f ef       	ldi	r16, 0xFF	; 255
    1ae0:	10 e0       	ldi	r17, 0x00	; 0
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <RGBtask+0x128>
		  
		  for (int color_v=255;color_v>0;color_v--)
		  {
			  for (int k=0;k<5;k++)
			  {
				   color2pwm(color_v, blue,1000);
    1ae4:	48 ee       	ldi	r20, 0xE8	; 232
    1ae6:	53 e0       	ldi	r21, 0x03	; 3
    1ae8:	62 e0       	ldi	r22, 0x02	; 2
    1aea:	80 2f       	mov	r24, r16
    1aec:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <color2pwm>
		  
		  // _delay_ms(100);
		  
		  for (int color_v=255;color_v>0;color_v--)
		  {
			  for (int k=0;k<5;k++)
    1af0:	21 96       	adiw	r28, 0x01	; 1
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <RGBtask+0x11e>
    1af4:	c0 e0       	ldi	r28, 0x00	; 0
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
    1af8:	c5 30       	cpi	r28, 0x05	; 5
    1afa:	d1 05       	cpc	r29, r1
    1afc:	9c f3       	brlt	.-26     	; 0x1ae4 <RGBtask+0x10a>
			  
		  }
		  
		  // _delay_ms(100);
		  
		  for (int color_v=255;color_v>0;color_v--)
    1afe:	01 50       	subi	r16, 0x01	; 1
    1b00:	11 09       	sbc	r17, r1
    1b02:	10 16       	cp	r1, r16
    1b04:	11 06       	cpc	r1, r17
    1b06:	b4 f3       	brlt	.-20     	; 0x1af4 <RGBtask+0x11a>
    1b08:	80 e1       	ldi	r24, 0x10	; 16
    1b0a:	97 e2       	ldi	r25, 0x27	; 39
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <RGBtask+0x13e>
    1b0e:	e0 e9       	ldi	r30, 0x90	; 144
    1b10:	f1 e0       	ldi	r31, 0x01	; 1
    1b12:	31 97       	sbiw	r30, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <RGBtask+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	c9 f7       	brne	.-14     	; 0x1b0e <RGBtask+0x134>
    1b1c:	60 cf       	rjmp	.-320    	; 0x19de <RGBtask+0x4>

00001b1e <main>:
	TaskHandle_t seven_task_h;
	TaskHandle_t RGB_task_h;
	
	
	
	xTaskCreate(seventask  , "seven"  , 150 , NULL , 2  , seven_task_h     );
    1b1e:	e1 2c       	mov	r14, r1
    1b20:	f1 2c       	mov	r15, r1
    1b22:	02 e0       	ldi	r16, 0x02	; 2
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	46 e9       	ldi	r20, 0x96	; 150
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	68 e0       	ldi	r22, 0x08	; 8
    1b2e:	71 e0       	ldi	r23, 0x01	; 1
    1b30:	8d e9       	ldi	r24, 0x9D	; 157
    1b32:	98 e0       	ldi	r25, 0x08	; 8
    1b34:	0e 94 d5 04 	call	0x9aa	; 0x9aa <xTaskCreate>
	xTaskCreate(RGBtask    ,"rgbred"  , 300 , NULL , 1  , RGB_task_h       );
    1b38:	01 e0       	ldi	r16, 0x01	; 1
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4c e2       	ldi	r20, 0x2C	; 44
    1b40:	51 e0       	ldi	r21, 0x01	; 1
    1b42:	6e e0       	ldi	r22, 0x0E	; 14
    1b44:	71 e0       	ldi	r23, 0x01	; 1
    1b46:	8d ee       	ldi	r24, 0xED	; 237
    1b48:	9c e0       	ldi	r25, 0x0C	; 12
    1b4a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <xTaskCreate>
	
	
	vTaskStartScheduler();
    1b4e:	0e 94 29 05 	call	0xa52	; 0xa52 <vTaskStartScheduler>
    1b52:	ff cf       	rjmp	.-2      	; 0x1b52 <main+0x34>

00001b54 <__cmpsf2>:
    1b54:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__fp_cmp>
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <__cmpsf2+0x8>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	08 95       	ret

00001b5e <__divsf3>:
    1b5e:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__divsf3x>
    1b62:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_round>
    1b66:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_pscB>
    1b6a:	58 f0       	brcs	.+22     	; 0x1b82 <__divsf3+0x24>
    1b6c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_pscA>
    1b70:	40 f0       	brcs	.+16     	; 0x1b82 <__divsf3+0x24>
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <__divsf3+0x20>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	29 f0       	breq	.+10     	; 0x1b82 <__divsf3+0x24>
    1b78:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_inf>
    1b7c:	51 11       	cpse	r21, r1
    1b7e:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__fp_szero>
    1b82:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_nan>

00001b86 <__divsf3x>:
    1b86:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__fp_split3>
    1b8a:	68 f3       	brcs	.-38     	; 0x1b66 <__divsf3+0x8>

00001b8c <__divsf3_pse>:
    1b8c:	99 23       	and	r25, r25
    1b8e:	b1 f3       	breq	.-20     	; 0x1b7c <__divsf3+0x1e>
    1b90:	55 23       	and	r21, r21
    1b92:	91 f3       	breq	.-28     	; 0x1b78 <__divsf3+0x1a>
    1b94:	95 1b       	sub	r25, r21
    1b96:	55 0b       	sbc	r21, r21
    1b98:	bb 27       	eor	r27, r27
    1b9a:	aa 27       	eor	r26, r26
    1b9c:	62 17       	cp	r22, r18
    1b9e:	73 07       	cpc	r23, r19
    1ba0:	84 07       	cpc	r24, r20
    1ba2:	38 f0       	brcs	.+14     	; 0x1bb2 <__divsf3_pse+0x26>
    1ba4:	9f 5f       	subi	r25, 0xFF	; 255
    1ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	44 1f       	adc	r20, r20
    1bae:	aa 1f       	adc	r26, r26
    1bb0:	a9 f3       	breq	.-22     	; 0x1b9c <__divsf3_pse+0x10>
    1bb2:	35 d0       	rcall	.+106    	; 0x1c1e <__divsf3_pse+0x92>
    1bb4:	0e 2e       	mov	r0, r30
    1bb6:	3a f0       	brmi	.+14     	; 0x1bc6 <__divsf3_pse+0x3a>
    1bb8:	e0 e8       	ldi	r30, 0x80	; 128
    1bba:	32 d0       	rcall	.+100    	; 0x1c20 <__divsf3_pse+0x94>
    1bbc:	91 50       	subi	r25, 0x01	; 1
    1bbe:	50 40       	sbci	r21, 0x00	; 0
    1bc0:	e6 95       	lsr	r30
    1bc2:	00 1c       	adc	r0, r0
    1bc4:	ca f7       	brpl	.-14     	; 0x1bb8 <__divsf3_pse+0x2c>
    1bc6:	2b d0       	rcall	.+86     	; 0x1c1e <__divsf3_pse+0x92>
    1bc8:	fe 2f       	mov	r31, r30
    1bca:	29 d0       	rcall	.+82     	; 0x1c1e <__divsf3_pse+0x92>
    1bcc:	66 0f       	add	r22, r22
    1bce:	77 1f       	adc	r23, r23
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	bb 1f       	adc	r27, r27
    1bd4:	26 17       	cp	r18, r22
    1bd6:	37 07       	cpc	r19, r23
    1bd8:	48 07       	cpc	r20, r24
    1bda:	ab 07       	cpc	r26, r27
    1bdc:	b0 e8       	ldi	r27, 0x80	; 128
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <__divsf3_pse+0x56>
    1be0:	bb 0b       	sbc	r27, r27
    1be2:	80 2d       	mov	r24, r0
    1be4:	bf 01       	movw	r22, r30
    1be6:	ff 27       	eor	r31, r31
    1be8:	93 58       	subi	r25, 0x83	; 131
    1bea:	5f 4f       	sbci	r21, 0xFF	; 255
    1bec:	3a f0       	brmi	.+14     	; 0x1bfc <__divsf3_pse+0x70>
    1bee:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	78 f0       	brcs	.+30     	; 0x1c12 <__divsf3_pse+0x86>
    1bf4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_inf>
    1bf8:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__fp_szero>
    1bfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfe:	e4 f3       	brlt	.-8      	; 0x1bf8 <__divsf3_pse+0x6c>
    1c00:	98 3e       	cpi	r25, 0xE8	; 232
    1c02:	d4 f3       	brlt	.-12     	; 0x1bf8 <__divsf3_pse+0x6c>
    1c04:	86 95       	lsr	r24
    1c06:	77 95       	ror	r23
    1c08:	67 95       	ror	r22
    1c0a:	b7 95       	ror	r27
    1c0c:	f7 95       	ror	r31
    1c0e:	9f 5f       	subi	r25, 0xFF	; 255
    1c10:	c9 f7       	brne	.-14     	; 0x1c04 <__divsf3_pse+0x78>
    1c12:	88 0f       	add	r24, r24
    1c14:	91 1d       	adc	r25, r1
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	97 f9       	bld	r25, 7
    1c1c:	08 95       	ret
    1c1e:	e1 e0       	ldi	r30, 0x01	; 1
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	bb 1f       	adc	r27, r27
    1c28:	62 17       	cp	r22, r18
    1c2a:	73 07       	cpc	r23, r19
    1c2c:	84 07       	cpc	r24, r20
    1c2e:	ba 07       	cpc	r27, r26
    1c30:	20 f0       	brcs	.+8      	; 0x1c3a <__divsf3_pse+0xae>
    1c32:	62 1b       	sub	r22, r18
    1c34:	73 0b       	sbc	r23, r19
    1c36:	84 0b       	sbc	r24, r20
    1c38:	ba 0b       	sbc	r27, r26
    1c3a:	ee 1f       	adc	r30, r30
    1c3c:	88 f7       	brcc	.-30     	; 0x1c20 <__divsf3_pse+0x94>
    1c3e:	e0 95       	com	r30
    1c40:	08 95       	ret

00001c42 <__fixunssfsi>:
    1c42:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fp_splitA>
    1c46:	88 f0       	brcs	.+34     	; 0x1c6a <__fixunssfsi+0x28>
    1c48:	9f 57       	subi	r25, 0x7F	; 127
    1c4a:	98 f0       	brcs	.+38     	; 0x1c72 <__fixunssfsi+0x30>
    1c4c:	b9 2f       	mov	r27, r25
    1c4e:	99 27       	eor	r25, r25
    1c50:	b7 51       	subi	r27, 0x17	; 23
    1c52:	b0 f0       	brcs	.+44     	; 0x1c80 <__fixunssfsi+0x3e>
    1c54:	e1 f0       	breq	.+56     	; 0x1c8e <__fixunssfsi+0x4c>
    1c56:	66 0f       	add	r22, r22
    1c58:	77 1f       	adc	r23, r23
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	1a f0       	brmi	.+6      	; 0x1c66 <__fixunssfsi+0x24>
    1c60:	ba 95       	dec	r27
    1c62:	c9 f7       	brne	.-14     	; 0x1c56 <__fixunssfsi+0x14>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <__fixunssfsi+0x4c>
    1c66:	b1 30       	cpi	r27, 0x01	; 1
    1c68:	91 f0       	breq	.+36     	; 0x1c8e <__fixunssfsi+0x4c>
    1c6a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fp_zero>
    1c6e:	b1 e0       	ldi	r27, 0x01	; 1
    1c70:	08 95       	ret
    1c72:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__fp_zero>
    1c76:	67 2f       	mov	r22, r23
    1c78:	78 2f       	mov	r23, r24
    1c7a:	88 27       	eor	r24, r24
    1c7c:	b8 5f       	subi	r27, 0xF8	; 248
    1c7e:	39 f0       	breq	.+14     	; 0x1c8e <__fixunssfsi+0x4c>
    1c80:	b9 3f       	cpi	r27, 0xF9	; 249
    1c82:	cc f3       	brlt	.-14     	; 0x1c76 <__fixunssfsi+0x34>
    1c84:	86 95       	lsr	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	b3 95       	inc	r27
    1c8c:	d9 f7       	brne	.-10     	; 0x1c84 <__fixunssfsi+0x42>
    1c8e:	3e f4       	brtc	.+14     	; 0x1c9e <__fixunssfsi+0x5c>
    1c90:	90 95       	com	r25
    1c92:	80 95       	com	r24
    1c94:	70 95       	com	r23
    1c96:	61 95       	neg	r22
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9e:	08 95       	ret

00001ca0 <__floatunsisf>:
    1ca0:	e8 94       	clt
    1ca2:	09 c0       	rjmp	.+18     	; 0x1cb6 <__floatsisf+0x12>

00001ca4 <__floatsisf>:
    1ca4:	97 fb       	bst	r25, 7
    1ca6:	3e f4       	brtc	.+14     	; 0x1cb6 <__floatsisf+0x12>
    1ca8:	90 95       	com	r25
    1caa:	80 95       	com	r24
    1cac:	70 95       	com	r23
    1cae:	61 95       	neg	r22
    1cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb6:	99 23       	and	r25, r25
    1cb8:	a9 f0       	breq	.+42     	; 0x1ce4 <__floatsisf+0x40>
    1cba:	f9 2f       	mov	r31, r25
    1cbc:	96 e9       	ldi	r25, 0x96	; 150
    1cbe:	bb 27       	eor	r27, r27
    1cc0:	93 95       	inc	r25
    1cc2:	f6 95       	lsr	r31
    1cc4:	87 95       	ror	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b7 95       	ror	r27
    1ccc:	f1 11       	cpse	r31, r1
    1cce:	f8 cf       	rjmp	.-16     	; 0x1cc0 <__floatsisf+0x1c>
    1cd0:	fa f4       	brpl	.+62     	; 0x1d10 <__floatsisf+0x6c>
    1cd2:	bb 0f       	add	r27, r27
    1cd4:	11 f4       	brne	.+4      	; 0x1cda <__floatsisf+0x36>
    1cd6:	60 ff       	sbrs	r22, 0
    1cd8:	1b c0       	rjmp	.+54     	; 0x1d10 <__floatsisf+0x6c>
    1cda:	6f 5f       	subi	r22, 0xFF	; 255
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	16 c0       	rjmp	.+44     	; 0x1d10 <__floatsisf+0x6c>
    1ce4:	88 23       	and	r24, r24
    1ce6:	11 f0       	breq	.+4      	; 0x1cec <__floatsisf+0x48>
    1ce8:	96 e9       	ldi	r25, 0x96	; 150
    1cea:	11 c0       	rjmp	.+34     	; 0x1d0e <__floatsisf+0x6a>
    1cec:	77 23       	and	r23, r23
    1cee:	21 f0       	breq	.+8      	; 0x1cf8 <__floatsisf+0x54>
    1cf0:	9e e8       	ldi	r25, 0x8E	; 142
    1cf2:	87 2f       	mov	r24, r23
    1cf4:	76 2f       	mov	r23, r22
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <__floatsisf+0x5e>
    1cf8:	66 23       	and	r22, r22
    1cfa:	71 f0       	breq	.+28     	; 0x1d18 <__floatsisf+0x74>
    1cfc:	96 e8       	ldi	r25, 0x86	; 134
    1cfe:	86 2f       	mov	r24, r22
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	2a f0       	brmi	.+10     	; 0x1d10 <__floatsisf+0x6c>
    1d06:	9a 95       	dec	r25
    1d08:	66 0f       	add	r22, r22
    1d0a:	77 1f       	adc	r23, r23
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	da f7       	brpl	.-10     	; 0x1d06 <__floatsisf+0x62>
    1d10:	88 0f       	add	r24, r24
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	97 f9       	bld	r25, 7
    1d18:	08 95       	ret

00001d1a <__fp_cmp>:
    1d1a:	99 0f       	add	r25, r25
    1d1c:	00 08       	sbc	r0, r0
    1d1e:	55 0f       	add	r21, r21
    1d20:	aa 0b       	sbc	r26, r26
    1d22:	e0 e8       	ldi	r30, 0x80	; 128
    1d24:	fe ef       	ldi	r31, 0xFE	; 254
    1d26:	16 16       	cp	r1, r22
    1d28:	17 06       	cpc	r1, r23
    1d2a:	e8 07       	cpc	r30, r24
    1d2c:	f9 07       	cpc	r31, r25
    1d2e:	c0 f0       	brcs	.+48     	; 0x1d60 <__fp_cmp+0x46>
    1d30:	12 16       	cp	r1, r18
    1d32:	13 06       	cpc	r1, r19
    1d34:	e4 07       	cpc	r30, r20
    1d36:	f5 07       	cpc	r31, r21
    1d38:	98 f0       	brcs	.+38     	; 0x1d60 <__fp_cmp+0x46>
    1d3a:	62 1b       	sub	r22, r18
    1d3c:	73 0b       	sbc	r23, r19
    1d3e:	84 0b       	sbc	r24, r20
    1d40:	95 0b       	sbc	r25, r21
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <__fp_cmp+0x38>
    1d44:	0a 26       	eor	r0, r26
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <__fp_cmp+0x46>
    1d48:	23 2b       	or	r18, r19
    1d4a:	24 2b       	or	r18, r20
    1d4c:	25 2b       	or	r18, r21
    1d4e:	21 f4       	brne	.+8      	; 0x1d58 <__fp_cmp+0x3e>
    1d50:	08 95       	ret
    1d52:	0a 26       	eor	r0, r26
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <__fp_cmp+0x3e>
    1d56:	a1 40       	sbci	r26, 0x01	; 1
    1d58:	a6 95       	lsr	r26
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	81 1d       	adc	r24, r1
    1d5e:	81 1d       	adc	r24, r1
    1d60:	08 95       	ret

00001d62 <__fp_inf>:
    1d62:	97 f9       	bld	r25, 7
    1d64:	9f 67       	ori	r25, 0x7F	; 127
    1d66:	80 e8       	ldi	r24, 0x80	; 128
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	08 95       	ret

00001d6e <__fp_nan>:
    1d6e:	9f ef       	ldi	r25, 0xFF	; 255
    1d70:	80 ec       	ldi	r24, 0xC0	; 192
    1d72:	08 95       	ret

00001d74 <__fp_pscA>:
    1d74:	00 24       	eor	r0, r0
    1d76:	0a 94       	dec	r0
    1d78:	16 16       	cp	r1, r22
    1d7a:	17 06       	cpc	r1, r23
    1d7c:	18 06       	cpc	r1, r24
    1d7e:	09 06       	cpc	r0, r25
    1d80:	08 95       	ret

00001d82 <__fp_pscB>:
    1d82:	00 24       	eor	r0, r0
    1d84:	0a 94       	dec	r0
    1d86:	12 16       	cp	r1, r18
    1d88:	13 06       	cpc	r1, r19
    1d8a:	14 06       	cpc	r1, r20
    1d8c:	05 06       	cpc	r0, r21
    1d8e:	08 95       	ret

00001d90 <__fp_round>:
    1d90:	09 2e       	mov	r0, r25
    1d92:	03 94       	inc	r0
    1d94:	00 0c       	add	r0, r0
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <__fp_round+0xc>
    1d98:	88 23       	and	r24, r24
    1d9a:	52 f0       	brmi	.+20     	; 0x1db0 <__fp_round+0x20>
    1d9c:	bb 0f       	add	r27, r27
    1d9e:	40 f4       	brcc	.+16     	; 0x1db0 <__fp_round+0x20>
    1da0:	bf 2b       	or	r27, r31
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <__fp_round+0x18>
    1da4:	60 ff       	sbrs	r22, 0
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <__fp_round+0x20>
    1da8:	6f 5f       	subi	r22, 0xFF	; 255
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	8f 4f       	sbci	r24, 0xFF	; 255
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	08 95       	ret

00001db2 <__fp_split3>:
    1db2:	57 fd       	sbrc	r21, 7
    1db4:	90 58       	subi	r25, 0x80	; 128
    1db6:	44 0f       	add	r20, r20
    1db8:	55 1f       	adc	r21, r21
    1dba:	59 f0       	breq	.+22     	; 0x1dd2 <__fp_splitA+0x10>
    1dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dbe:	71 f0       	breq	.+28     	; 0x1ddc <__fp_splitA+0x1a>
    1dc0:	47 95       	ror	r20

00001dc2 <__fp_splitA>:
    1dc2:	88 0f       	add	r24, r24
    1dc4:	97 fb       	bst	r25, 7
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <__fp_splitA+0x20>
    1dca:	9f 3f       	cpi	r25, 0xFF	; 255
    1dcc:	79 f0       	breq	.+30     	; 0x1dec <__fp_splitA+0x2a>
    1dce:	87 95       	ror	r24
    1dd0:	08 95       	ret
    1dd2:	12 16       	cp	r1, r18
    1dd4:	13 06       	cpc	r1, r19
    1dd6:	14 06       	cpc	r1, r20
    1dd8:	55 1f       	adc	r21, r21
    1dda:	f2 cf       	rjmp	.-28     	; 0x1dc0 <__fp_split3+0xe>
    1ddc:	46 95       	lsr	r20
    1dde:	f1 df       	rcall	.-30     	; 0x1dc2 <__fp_splitA>
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <__fp_splitA+0x30>
    1de2:	16 16       	cp	r1, r22
    1de4:	17 06       	cpc	r1, r23
    1de6:	18 06       	cpc	r1, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	f1 cf       	rjmp	.-30     	; 0x1dce <__fp_splitA+0xc>
    1dec:	86 95       	lsr	r24
    1dee:	71 05       	cpc	r23, r1
    1df0:	61 05       	cpc	r22, r1
    1df2:	08 94       	sec
    1df4:	08 95       	ret

00001df6 <__fp_zero>:
    1df6:	e8 94       	clt

00001df8 <__fp_szero>:
    1df8:	bb 27       	eor	r27, r27
    1dfa:	66 27       	eor	r22, r22
    1dfc:	77 27       	eor	r23, r23
    1dfe:	cb 01       	movw	r24, r22
    1e00:	97 f9       	bld	r25, 7
    1e02:	08 95       	ret

00001e04 <__gesf2>:
    1e04:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__fp_cmp>
    1e08:	08 f4       	brcc	.+2      	; 0x1e0c <__gesf2+0x8>
    1e0a:	8f ef       	ldi	r24, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__mulsf3>:
    1e0e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__mulsf3x>
    1e12:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__fp_round>
    1e16:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_pscA>
    1e1a:	38 f0       	brcs	.+14     	; 0x1e2a <__mulsf3+0x1c>
    1e1c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__fp_pscB>
    1e20:	20 f0       	brcs	.+8      	; 0x1e2a <__mulsf3+0x1c>
    1e22:	95 23       	and	r25, r21
    1e24:	11 f0       	breq	.+4      	; 0x1e2a <__mulsf3+0x1c>
    1e26:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_inf>
    1e2a:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__fp_nan>
    1e2e:	11 24       	eor	r1, r1
    1e30:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__fp_szero>

00001e34 <__mulsf3x>:
    1e34:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__fp_split3>
    1e38:	70 f3       	brcs	.-36     	; 0x1e16 <__mulsf3+0x8>

00001e3a <__mulsf3_pse>:
    1e3a:	95 9f       	mul	r25, r21
    1e3c:	c1 f3       	breq	.-16     	; 0x1e2e <__mulsf3+0x20>
    1e3e:	95 0f       	add	r25, r21
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	55 1f       	adc	r21, r21
    1e44:	62 9f       	mul	r22, r18
    1e46:	f0 01       	movw	r30, r0
    1e48:	72 9f       	mul	r23, r18
    1e4a:	bb 27       	eor	r27, r27
    1e4c:	f0 0d       	add	r31, r0
    1e4e:	b1 1d       	adc	r27, r1
    1e50:	63 9f       	mul	r22, r19
    1e52:	aa 27       	eor	r26, r26
    1e54:	f0 0d       	add	r31, r0
    1e56:	b1 1d       	adc	r27, r1
    1e58:	aa 1f       	adc	r26, r26
    1e5a:	64 9f       	mul	r22, r20
    1e5c:	66 27       	eor	r22, r22
    1e5e:	b0 0d       	add	r27, r0
    1e60:	a1 1d       	adc	r26, r1
    1e62:	66 1f       	adc	r22, r22
    1e64:	82 9f       	mul	r24, r18
    1e66:	22 27       	eor	r18, r18
    1e68:	b0 0d       	add	r27, r0
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	62 1f       	adc	r22, r18
    1e6e:	73 9f       	mul	r23, r19
    1e70:	b0 0d       	add	r27, r0
    1e72:	a1 1d       	adc	r26, r1
    1e74:	62 1f       	adc	r22, r18
    1e76:	83 9f       	mul	r24, r19
    1e78:	a0 0d       	add	r26, r0
    1e7a:	61 1d       	adc	r22, r1
    1e7c:	22 1f       	adc	r18, r18
    1e7e:	74 9f       	mul	r23, r20
    1e80:	33 27       	eor	r19, r19
    1e82:	a0 0d       	add	r26, r0
    1e84:	61 1d       	adc	r22, r1
    1e86:	23 1f       	adc	r18, r19
    1e88:	84 9f       	mul	r24, r20
    1e8a:	60 0d       	add	r22, r0
    1e8c:	21 1d       	adc	r18, r1
    1e8e:	82 2f       	mov	r24, r18
    1e90:	76 2f       	mov	r23, r22
    1e92:	6a 2f       	mov	r22, r26
    1e94:	11 24       	eor	r1, r1
    1e96:	9f 57       	subi	r25, 0x7F	; 127
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	9a f0       	brmi	.+38     	; 0x1ec2 <__mulsf3_pse+0x88>
    1e9c:	f1 f0       	breq	.+60     	; 0x1eda <__mulsf3_pse+0xa0>
    1e9e:	88 23       	and	r24, r24
    1ea0:	4a f0       	brmi	.+18     	; 0x1eb4 <__mulsf3_pse+0x7a>
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	66 1f       	adc	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	91 50       	subi	r25, 0x01	; 1
    1eb0:	50 40       	sbci	r21, 0x00	; 0
    1eb2:	a9 f7       	brne	.-22     	; 0x1e9e <__mulsf3_pse+0x64>
    1eb4:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb6:	51 05       	cpc	r21, r1
    1eb8:	80 f0       	brcs	.+32     	; 0x1eda <__mulsf3_pse+0xa0>
    1eba:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_inf>
    1ebe:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__fp_szero>
    1ec2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec4:	e4 f3       	brlt	.-8      	; 0x1ebe <__mulsf3_pse+0x84>
    1ec6:	98 3e       	cpi	r25, 0xE8	; 232
    1ec8:	d4 f3       	brlt	.-12     	; 0x1ebe <__mulsf3_pse+0x84>
    1eca:	86 95       	lsr	r24
    1ecc:	77 95       	ror	r23
    1ece:	67 95       	ror	r22
    1ed0:	b7 95       	ror	r27
    1ed2:	f7 95       	ror	r31
    1ed4:	e7 95       	ror	r30
    1ed6:	9f 5f       	subi	r25, 0xFF	; 255
    1ed8:	c1 f7       	brne	.-16     	; 0x1eca <__mulsf3_pse+0x90>
    1eda:	fe 2b       	or	r31, r30
    1edc:	88 0f       	add	r24, r24
    1ede:	91 1d       	adc	r25, r1
    1ee0:	96 95       	lsr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	97 f9       	bld	r25, 7
    1ee6:	08 95       	ret

00001ee8 <__udivmodhi4>:
    1ee8:	aa 1b       	sub	r26, r26
    1eea:	bb 1b       	sub	r27, r27
    1eec:	51 e1       	ldi	r21, 0x11	; 17
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <__udivmodhi4_ep>

00001ef0 <__udivmodhi4_loop>:
    1ef0:	aa 1f       	adc	r26, r26
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	a6 17       	cp	r26, r22
    1ef6:	b7 07       	cpc	r27, r23
    1ef8:	10 f0       	brcs	.+4      	; 0x1efe <__udivmodhi4_ep>
    1efa:	a6 1b       	sub	r26, r22
    1efc:	b7 0b       	sbc	r27, r23

00001efe <__udivmodhi4_ep>:
    1efe:	88 1f       	adc	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	5a 95       	dec	r21
    1f04:	a9 f7       	brne	.-22     	; 0x1ef0 <__udivmodhi4_loop>
    1f06:	80 95       	com	r24
    1f08:	90 95       	com	r25
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	08 95       	ret

00001f10 <__divmodhi4>:
    1f10:	97 fb       	bst	r25, 7
    1f12:	07 2e       	mov	r0, r23
    1f14:	16 f4       	brtc	.+4      	; 0x1f1a <__divmodhi4+0xa>
    1f16:	00 94       	com	r0
    1f18:	07 d0       	rcall	.+14     	; 0x1f28 <__divmodhi4_neg1>
    1f1a:	77 fd       	sbrc	r23, 7
    1f1c:	09 d0       	rcall	.+18     	; 0x1f30 <__divmodhi4_neg2>
    1f1e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__udivmodhi4>
    1f22:	07 fc       	sbrc	r0, 7
    1f24:	05 d0       	rcall	.+10     	; 0x1f30 <__divmodhi4_neg2>
    1f26:	3e f4       	brtc	.+14     	; 0x1f36 <__divmodhi4_exit>

00001f28 <__divmodhi4_neg1>:
    1f28:	90 95       	com	r25
    1f2a:	81 95       	neg	r24
    1f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2e:	08 95       	ret

00001f30 <__divmodhi4_neg2>:
    1f30:	70 95       	com	r23
    1f32:	61 95       	neg	r22
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255

00001f36 <__divmodhi4_exit>:
    1f36:	08 95       	ret

00001f38 <__udivmodsi4>:
    1f38:	a1 e2       	ldi	r26, 0x21	; 33
    1f3a:	1a 2e       	mov	r1, r26
    1f3c:	aa 1b       	sub	r26, r26
    1f3e:	bb 1b       	sub	r27, r27
    1f40:	fd 01       	movw	r30, r26
    1f42:	0d c0       	rjmp	.+26     	; 0x1f5e <__udivmodsi4_ep>

00001f44 <__udivmodsi4_loop>:
    1f44:	aa 1f       	adc	r26, r26
    1f46:	bb 1f       	adc	r27, r27
    1f48:	ee 1f       	adc	r30, r30
    1f4a:	ff 1f       	adc	r31, r31
    1f4c:	a2 17       	cp	r26, r18
    1f4e:	b3 07       	cpc	r27, r19
    1f50:	e4 07       	cpc	r30, r20
    1f52:	f5 07       	cpc	r31, r21
    1f54:	20 f0       	brcs	.+8      	; 0x1f5e <__udivmodsi4_ep>
    1f56:	a2 1b       	sub	r26, r18
    1f58:	b3 0b       	sbc	r27, r19
    1f5a:	e4 0b       	sbc	r30, r20
    1f5c:	f5 0b       	sbc	r31, r21

00001f5e <__udivmodsi4_ep>:
    1f5e:	66 1f       	adc	r22, r22
    1f60:	77 1f       	adc	r23, r23
    1f62:	88 1f       	adc	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	1a 94       	dec	r1
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <__udivmodsi4_loop>
    1f6a:	60 95       	com	r22
    1f6c:	70 95       	com	r23
    1f6e:	80 95       	com	r24
    1f70:	90 95       	com	r25
    1f72:	9b 01       	movw	r18, r22
    1f74:	ac 01       	movw	r20, r24
    1f76:	bd 01       	movw	r22, r26
    1f78:	cf 01       	movw	r24, r30
    1f7a:	08 95       	ret

00001f7c <__tablejump2__>:
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	05 90       	lpm	r0, Z+
    1f82:	f4 91       	lpm	r31, Z
    1f84:	e0 2d       	mov	r30, r0
    1f86:	09 94       	ijmp

00001f88 <__muluhisi3>:
    1f88:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__umulhisi3>
    1f8c:	a5 9f       	mul	r26, r21
    1f8e:	90 0d       	add	r25, r0
    1f90:	b4 9f       	mul	r27, r20
    1f92:	90 0d       	add	r25, r0
    1f94:	a4 9f       	mul	r26, r20
    1f96:	80 0d       	add	r24, r0
    1f98:	91 1d       	adc	r25, r1
    1f9a:	11 24       	eor	r1, r1
    1f9c:	08 95       	ret

00001f9e <__umulhisi3>:
    1f9e:	a2 9f       	mul	r26, r18
    1fa0:	b0 01       	movw	r22, r0
    1fa2:	b3 9f       	mul	r27, r19
    1fa4:	c0 01       	movw	r24, r0
    1fa6:	a3 9f       	mul	r26, r19
    1fa8:	70 0d       	add	r23, r0
    1faa:	81 1d       	adc	r24, r1
    1fac:	11 24       	eor	r1, r1
    1fae:	91 1d       	adc	r25, r1
    1fb0:	b2 9f       	mul	r27, r18
    1fb2:	70 0d       	add	r23, r0
    1fb4:	81 1d       	adc	r24, r1
    1fb6:	11 24       	eor	r1, r1
    1fb8:	91 1d       	adc	r25, r1
    1fba:	08 95       	ret

00001fbc <_exit>:
    1fbc:	f8 94       	cli

00001fbe <__stop_program>:
    1fbe:	ff cf       	rjmp	.-2      	; 0x1fbe <__stop_program>
