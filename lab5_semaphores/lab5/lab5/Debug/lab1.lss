
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000643  0080010e  0080010e  00000f60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029f0  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5c  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a37  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  000063a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001068  00000000  00000000  00006ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024e3  00000000  00000000  00007b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 39 07 	call	0xe72	; 0xe72 <main>
  9e:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
  a6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  aa:	8c e7       	ldi	r24, 0x7C	; 124
  ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  b0:	8b e0       	ldi	r24, 0x0B	; 11
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  b6:	ef e6       	ldi	r30, 0x6F	; 111
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <pxPortInitialiseStack>:
  c2:	31 e1       	ldi	r19, 0x11	; 17
  c4:	fc 01       	movw	r30, r24
  c6:	30 83       	st	Z, r19
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	22 e2       	ldi	r18, 0x22	; 34
  cc:	20 83       	st	Z, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	a3 e3       	ldi	r26, 0x33	; 51
  d2:	a0 83       	st	Z, r26
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	60 83       	st	Z, r22
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	70 83       	st	Z, r23
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	10 82       	st	Z, r1
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	60 e8       	ldi	r22, 0x80	; 128
  e4:	60 83       	st	Z, r22
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	10 82       	st	Z, r1
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	60 83       	st	Z, r22
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	60 83       	st	Z, r22
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	60 83       	st	Z, r22
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	65 e0       	ldi	r22, 0x05	; 5
 100:	60 83       	st	Z, r22
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	66 e0       	ldi	r22, 0x06	; 6
 106:	60 83       	st	Z, r22
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	67 e0       	ldi	r22, 0x07	; 7
 10c:	60 83       	st	Z, r22
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	68 e0       	ldi	r22, 0x08	; 8
 112:	60 83       	st	Z, r22
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	69 e0       	ldi	r22, 0x09	; 9
 118:	60 83       	st	Z, r22
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	60 e1       	ldi	r22, 0x10	; 16
 11e:	60 83       	st	Z, r22
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	30 83       	st	Z, r19
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	32 e1       	ldi	r19, 0x12	; 18
 128:	30 83       	st	Z, r19
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	33 e1       	ldi	r19, 0x13	; 19
 12e:	30 83       	st	Z, r19
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	34 e1       	ldi	r19, 0x14	; 20
 134:	30 83       	st	Z, r19
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	35 e1       	ldi	r19, 0x15	; 21
 13a:	30 83       	st	Z, r19
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	36 e1       	ldi	r19, 0x16	; 22
 140:	30 83       	st	Z, r19
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	37 e1       	ldi	r19, 0x17	; 23
 146:	30 83       	st	Z, r19
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	38 e1       	ldi	r19, 0x18	; 24
 14c:	30 83       	st	Z, r19
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	39 e1       	ldi	r19, 0x19	; 25
 152:	30 83       	st	Z, r19
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	30 e2       	ldi	r19, 0x20	; 32
 158:	30 83       	st	Z, r19
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	31 e2       	ldi	r19, 0x21	; 33
 15e:	30 83       	st	Z, r19
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	20 83       	st	Z, r18
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	23 e2       	ldi	r18, 0x23	; 35
 168:	20 83       	st	Z, r18
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	40 83       	st	Z, r20
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	50 83       	st	Z, r21
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	26 e2       	ldi	r18, 0x26	; 38
 176:	20 83       	st	Z, r18
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	27 e2       	ldi	r18, 0x27	; 39
 17c:	20 83       	st	Z, r18
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	28 e2       	ldi	r18, 0x28	; 40
 182:	20 83       	st	Z, r18
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	29 e2       	ldi	r18, 0x29	; 41
 188:	20 83       	st	Z, r18
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	20 e3       	ldi	r18, 0x30	; 48
 18e:	20 83       	st	Z, r18
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	21 e3       	ldi	r18, 0x31	; 49
 194:	20 83       	st	Z, r18
 196:	86 97       	sbiw	r24, 0x26	; 38
 198:	08 95       	ret

0000019a <xPortStartScheduler>:
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <prvSetupTimerInterrupt>
 19e:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
 1a2:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 1a6:	cd 91       	ld	r28, X+
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	dd 91       	ld	r29, X+
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	bf 90       	pop	r11
 1d8:	af 90       	pop	r10
 1da:	9f 90       	pop	r9
 1dc:	8f 90       	pop	r8
 1de:	7f 90       	pop	r7
 1e0:	6f 90       	pop	r6
 1e2:	5f 90       	pop	r5
 1e4:	4f 90       	pop	r4
 1e6:	3f 90       	pop	r3
 1e8:	2f 90       	pop	r2
 1ea:	1f 90       	pop	r1
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	08 95       	ret
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret

000001f8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	0f 92       	push	r0
 200:	1f 92       	push	r1
 202:	11 24       	eor	r1, r1
 204:	2f 92       	push	r2
 206:	3f 92       	push	r3
 208:	4f 92       	push	r4
 20a:	5f 92       	push	r5
 20c:	6f 92       	push	r6
 20e:	7f 92       	push	r7
 210:	8f 92       	push	r8
 212:	9f 92       	push	r9
 214:	af 92       	push	r10
 216:	bf 92       	push	r11
 218:	cf 92       	push	r12
 21a:	df 92       	push	r13
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
 240:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
 244:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 248:	0d b6       	in	r0, 0x3d	; 61
 24a:	0d 92       	st	X+, r0
 24c:	0e b6       	in	r0, 0x3e	; 62
 24e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 250:	0e 94 cb 06 	call	0xd96	; 0xd96 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 254:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
 258:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 25c:	cd 91       	ld	r28, X+
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	dd 91       	ld	r29, X+
 262:	de bf       	out	0x3e, r29	; 62
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	7f 90       	pop	r7
 296:	6f 90       	pop	r6
 298:	5f 90       	pop	r5
 29a:	4f 90       	pop	r4
 29c:	3f 90       	pop	r3
 29e:	2f 90       	pop	r2
 2a0:	1f 90       	pop	r1
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 2a8:	08 95       	ret

000002aa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	0f 92       	push	r0
 2b2:	1f 92       	push	r1
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 92       	push	r2
 2b8:	3f 92       	push	r3
 2ba:	4f 92       	push	r4
 2bc:	5f 92       	push	r5
 2be:	6f 92       	push	r6
 2c0:	7f 92       	push	r7
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
 2f6:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 2fa:	0d b6       	in	r0, 0x3d	; 61
 2fc:	0d 92       	st	X+, r0
 2fe:	0e b6       	in	r0, 0x3e	; 62
 300:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 302:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <xTaskIncrementTick>
 306:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 308:	0e 94 cb 06 	call	0xd96	; 0xd96 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 30c:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
 310:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 314:	cd 91       	ld	r28, X+
 316:	cd bf       	out	0x3d, r28	; 61
 318:	dd 91       	ld	r29, X+
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	af 90       	pop	r10
 348:	9f 90       	pop	r9
 34a:	8f 90       	pop	r8
 34c:	7f 90       	pop	r7
 34e:	6f 90       	pop	r6
 350:	5f 90       	pop	r5
 352:	4f 90       	pop	r4
 354:	3f 90       	pop	r3
 356:	2f 90       	pop	r2
 358:	1f 90       	pop	r1
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0

	asm volatile ( "ret" );
 360:	08 95       	ret

00000362 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 362:	0e 94 55 01 	call	0x2aa	; 0x2aa <vPortYieldFromTick>
		asm volatile ( "reti" );
 366:	18 95       	reti

00000368 <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 368:	a3 e1       	ldi	r26, 0x13	; 19
 36a:	b1 e0       	ldi	r27, 0x01	; 1
 36c:	e7 e1       	ldi	r30, 0x17	; 23
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	fc 93       	st	X, r31
 374:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
 376:	13 96       	adiw	r26, 0x03	; 3
 378:	1c 92       	st	X, r1
 37a:	1e 92       	st	-X, r1
 37c:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 37e:	af e0       	ldi	r26, 0x0F	; 15
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	8b ed       	ldi	r24, 0xDB	; 219
 384:	95 e0       	ldi	r25, 0x05	; 5
 386:	13 96       	adiw	r26, 0x03	; 3
 388:	9c 93       	st	X, r25
 38a:	8e 93       	st	-X, r24
 38c:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
 38e:	11 96       	adiw	r26, 0x01	; 1
 390:	1c 92       	st	X, r1
 392:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 394:	93 83       	std	Z+3, r25	; 0x03
 396:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 398:	b1 83       	std	Z+1, r27	; 0x01
 39a:	a0 83       	st	Z, r26
 39c:	08 95       	ret

0000039e <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
 3ac:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 3b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 3b4:	81 11       	cpse	r24, r1
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <pvPortMalloc+0x24>
        {
            prvHeapInit();
 3b8:	0e 94 b4 01 	call	0x368	; 0x368 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
 3c2:	20 97       	sbiw	r28, 0x00	; 0
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 3c6:	ce 01       	movw	r24, r28
 3c8:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
 3ca:	c8 17       	cp	r28, r24
 3cc:	d9 07       	cpc	r29, r25
 3ce:	38 f4       	brcc	.+14     	; 0x3de <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 3d0:	25 96       	adiw	r28, 0x05	; 5
 3d2:	8c 17       	cp	r24, r28
 3d4:	9d 07       	cpc	r25, r29
 3d6:	28 f0       	brcs	.+10     	; 0x3e2 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
 3d8:	c0 e0       	ldi	r28, 0x00	; 0
 3da:	d0 e0       	ldi	r29, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
 3de:	c0 e0       	ldi	r28, 0x00	; 0
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 3e2:	20 97       	sbiw	r28, 0x00	; 0
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <pvPortMalloc+0x4a>
 3e6:	5e c0       	rjmp	.+188    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 3e8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3ec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3f0:	2c 17       	cp	r18, r28
 3f2:	3d 07       	cpc	r19, r29
 3f4:	08 f4       	brcc	.+2      	; 0x3f8 <pvPortMalloc+0x5a>
 3f6:	59 c0       	rjmp	.+178    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
 3f8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <xStart>
 3fc:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 400:	a3 e1       	ldi	r26, 0x13	; 19
 402:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
            {
                pxPreviousBlock = pxBlock;
 406:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
 408:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 40a:	82 81       	ldd	r24, Z+2	; 0x02
 40c:	93 81       	ldd	r25, Z+3	; 0x03
 40e:	8c 17       	cp	r24, r28
 410:	9d 07       	cpc	r25, r29
 412:	20 f4       	brcc	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 414:	80 81       	ld	r24, Z
 416:	91 81       	ldd	r25, Z+1	; 0x01
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	a9 f7       	brne	.-22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	ef 30       	cpi	r30, 0x0F	; 15
 420:	f8 07       	cpc	r31, r24
 422:	09 f4       	brne	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	45 c0       	rjmp	.+138    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 426:	0d 91       	ld	r16, X+
 428:	1c 91       	ld	r17, X
 42a:	11 97       	sbiw	r26, 0x01	; 1
 42c:	0c 5f       	subi	r16, 0xFC	; 252
 42e:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	8d 93       	st	X+, r24
 436:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 438:	82 81       	ldd	r24, Z+2	; 0x02
 43a:	93 81       	ldd	r25, Z+3	; 0x03
 43c:	8c 1b       	sub	r24, r28
 43e:	9d 0b       	sbc	r25, r29
 440:	89 30       	cpi	r24, 0x09	; 9
 442:	91 05       	cpc	r25, r1
 444:	30 f1       	brcs	.+76     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 446:	bf 01       	movw	r22, r30
 448:	6c 0f       	add	r22, r28
 44a:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 44c:	db 01       	movw	r26, r22
 44e:	13 96       	adiw	r26, 0x03	; 3
 450:	9c 93       	st	X, r25
 452:	8e 93       	st	-X, r24
 454:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
 456:	d3 83       	std	Z+3, r29	; 0x03
 458:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 45a:	12 96       	adiw	r26, 0x02	; 2
 45c:	4d 91       	ld	r20, X+
 45e:	5c 91       	ld	r21, X
 460:	13 97       	sbiw	r26, 0x03	; 3
 462:	0f 2e       	mov	r0, r31
 464:	f3 e1       	ldi	r31, 0x13	; 19
 466:	ef 2e       	mov	r14, r31
 468:	f1 e0       	ldi	r31, 0x01	; 1
 46a:	ff 2e       	mov	r15, r31
 46c:	f0 2d       	mov	r31, r0
 46e:	01 c0       	rjmp	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 470:	7d 01       	movw	r14, r26
 472:	e7 01       	movw	r28, r14
 474:	a8 81       	ld	r26, Y
 476:	b9 81       	ldd	r27, Y+1	; 0x01
 478:	12 96       	adiw	r26, 0x02	; 2
 47a:	8d 91       	ld	r24, X+
 47c:	9c 91       	ld	r25, X
 47e:	13 97       	sbiw	r26, 0x03	; 3
 480:	84 17       	cp	r24, r20
 482:	95 07       	cpc	r25, r21
 484:	a8 f3       	brcs	.-22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 486:	eb 01       	movw	r28, r22
 488:	b9 83       	std	Y+1, r27	; 0x01
 48a:	a8 83       	st	Y, r26
 48c:	d7 01       	movw	r26, r14
 48e:	6d 93       	st	X+, r22
 490:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	93 81       	ldd	r25, Z+3	; 0x03
 496:	28 1b       	sub	r18, r24
 498:	39 0b       	sbc	r19, r25
 49a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 49e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 4a4:	00 e0       	ldi	r16, 0x00	; 0
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4aa:	00 e0       	ldi	r16, 0x00	; 0
 4ac:	10 e0       	ldi	r17, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b0:	00 e0       	ldi	r16, 0x00	; 0
 4b2:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 4b4:	0e 94 f6 05 	call	0xbec	; 0xbec <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
 4b8:	c8 01       	movw	r24, r16
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	08 95       	ret

000004c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	41 f1       	breq	.+80     	; 0x524 <vPortFree+0x5c>
 4d4:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 4d6:	8c 01       	movw	r16, r24
 4d8:	04 50       	subi	r16, 0x04	; 4
 4da:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
 4dc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 4e0:	f8 01       	movw	r30, r16
 4e2:	42 81       	ldd	r20, Z+2	; 0x02
 4e4:	53 81       	ldd	r21, Z+3	; 0x03
 4e6:	a3 e1       	ldi	r26, 0x13	; 19
 4e8:	b1 e0       	ldi	r27, 0x01	; 1
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <vPortFree+0x26>
 4ec:	df 01       	movw	r26, r30
 4ee:	ed 91       	ld	r30, X+
 4f0:	fc 91       	ld	r31, X
 4f2:	11 97       	sbiw	r26, 0x01	; 1
 4f4:	22 81       	ldd	r18, Z+2	; 0x02
 4f6:	33 81       	ldd	r19, Z+3	; 0x03
 4f8:	24 17       	cp	r18, r20
 4fa:	35 07       	cpc	r19, r21
 4fc:	b8 f3       	brcs	.-18     	; 0x4ec <vPortFree+0x24>
 4fe:	24 97       	sbiw	r28, 0x04	; 4
 500:	f9 83       	std	Y+1, r31	; 0x01
 502:	e8 83       	st	Y, r30
 504:	0d 93       	st	X+, r16
 506:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	9b 81       	ldd	r25, Y+3	; 0x03
 50c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 510:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 514:	82 0f       	add	r24, r18
 516:	93 1f       	adc	r25, r19
 518:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 51c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 520:	0e 94 f6 05 	call	0xbec	; 0xbec <xTaskResumeAll>
    }
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	08 95       	ret

0000052e <vListInitialise>:
    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 52e:	fc 01       	movw	r30, r24
 530:	03 96       	adiw	r24, 0x03	; 3
 532:	92 83       	std	Z+2, r25	; 0x02
 534:	81 83       	std	Z+1, r24	; 0x01
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	3f ef       	ldi	r19, 0xFF	; 255
 53a:	34 83       	std	Z+4, r19	; 0x04
 53c:	23 83       	std	Z+3, r18	; 0x03
 53e:	96 83       	std	Z+6, r25	; 0x06
 540:	85 83       	std	Z+5, r24	; 0x05
 542:	90 87       	std	Z+8, r25	; 0x08
 544:	87 83       	std	Z+7, r24	; 0x07
 546:	10 82       	st	Z, r1
 548:	08 95       	ret

0000054a <vListInitialiseItem>:
 54a:	fc 01       	movw	r30, r24
 54c:	11 86       	std	Z+9, r1	; 0x09
 54e:	10 86       	std	Z+8, r1	; 0x08
 550:	08 95       	ret

00000552 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 558:	a0 85       	ldd	r26, Z+8	; 0x08
 55a:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 55c:	c2 81       	ldd	r28, Z+2	; 0x02
 55e:	d3 81       	ldd	r29, Z+3	; 0x03
 560:	84 81       	ldd	r24, Z+4	; 0x04
 562:	95 81       	ldd	r25, Z+5	; 0x05
 564:	9d 83       	std	Y+5, r25	; 0x05
 566:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 568:	c4 81       	ldd	r28, Z+4	; 0x04
 56a:	d5 81       	ldd	r29, Z+5	; 0x05
 56c:	82 81       	ldd	r24, Z+2	; 0x02
 56e:	93 81       	ldd	r25, Z+3	; 0x03
 570:	9b 83       	std	Y+3, r25	; 0x03
 572:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 574:	11 96       	adiw	r26, 0x01	; 1
 576:	8d 91       	ld	r24, X+
 578:	9c 91       	ld	r25, X
 57a:	12 97       	sbiw	r26, 0x02	; 2
 57c:	e8 17       	cp	r30, r24
 57e:	f9 07       	cpc	r31, r25
 580:	31 f4       	brne	.+12     	; 0x58e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 582:	84 81       	ldd	r24, Z+4	; 0x04
 584:	95 81       	ldd	r25, Z+5	; 0x05
 586:	12 96       	adiw	r26, 0x02	; 2
 588:	9c 93       	st	X, r25
 58a:	8e 93       	st	-X, r24
 58c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 58e:	11 86       	std	Z+9, r1	; 0x09
 590:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 592:	8c 91       	ld	r24, X
 594:	81 50       	subi	r24, 0x01	; 1
 596:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 598:	8c 91       	ld	r24, X
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 5a0:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxDelayedTaskList>
 5a4:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxDelayedTaskList+0x1>
 5a8:	80 81       	ld	r24, Z
 5aa:	81 11       	cpse	r24, r1
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <prvResetNextTaskUnblockTime+0x1c>
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xNextTaskUnblockTime+0x1>
 5b6:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNextTaskUnblockTime>
 5ba:	08 95       	ret
 5bc:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxDelayedTaskList>
 5c0:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxDelayedTaskList+0x1>
 5c4:	05 80       	ldd	r0, Z+5	; 0x05
 5c6:	f6 81       	ldd	r31, Z+6	; 0x06
 5c8:	e0 2d       	mov	r30, r0
 5ca:	80 81       	ld	r24, Z
 5cc:	91 81       	ldd	r25, Z+1	; 0x01
 5ce:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xNextTaskUnblockTime+0x1>
 5d2:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNextTaskUnblockTime>
 5d6:	08 95       	ret

000005d8 <prvDeleteTCB>:
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	ec 01       	movw	r28, r24
 5de:	8f 89       	ldd	r24, Y+23	; 0x17
 5e0:	98 8d       	ldd	r25, Y+24	; 0x18
 5e2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <vPortFree>
 5e6:	ce 01       	movw	r24, r28
 5e8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <vPortFree>
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <prvInitialiseNewTask>:
 5f2:	6f 92       	push	r6
 5f4:	7f 92       	push	r7
 5f6:	8f 92       	push	r8
 5f8:	9f 92       	push	r9
 5fa:	af 92       	push	r10
 5fc:	bf 92       	push	r11
 5fe:	cf 92       	push	r12
 600:	df 92       	push	r13
 602:	ef 92       	push	r14
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	4c 01       	movw	r8, r24
 612:	d5 01       	movw	r26, r10
 614:	57 96       	adiw	r26, 0x17	; 23
 616:	8d 91       	ld	r24, X+
 618:	9c 91       	ld	r25, X
 61a:	58 97       	sbiw	r26, 0x18	; 24
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	31 09       	sbc	r19, r1
 620:	3c 01       	movw	r6, r24
 622:	62 0e       	add	r6, r18
 624:	73 1e       	adc	r7, r19
 626:	61 15       	cp	r22, r1
 628:	71 05       	cpc	r23, r1
 62a:	89 f4       	brne	.+34     	; 0x64e <prvInitialiseNewTask+0x5c>
 62c:	16 c0       	rjmp	.+44     	; 0x65a <prvInitialiseNewTask+0x68>
 62e:	82 2f       	mov	r24, r18
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	fb 01       	movw	r30, r22
 634:	e8 0f       	add	r30, r24
 636:	f9 1f       	adc	r31, r25
 638:	30 81       	ld	r19, Z
 63a:	d5 01       	movw	r26, r10
 63c:	a8 0f       	add	r26, r24
 63e:	b9 1f       	adc	r27, r25
 640:	59 96       	adiw	r26, 0x19	; 25
 642:	3c 93       	st	X, r19
 644:	80 81       	ld	r24, Z
 646:	88 23       	and	r24, r24
 648:	29 f0       	breq	.+10     	; 0x654 <prvInitialiseNewTask+0x62>
 64a:	2f 5f       	subi	r18, 0xFF	; 255
 64c:	01 c0       	rjmp	.+2      	; 0x650 <prvInitialiseNewTask+0x5e>
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	28 30       	cpi	r18, 0x08	; 8
 652:	68 f3       	brcs	.-38     	; 0x62e <prvInitialiseNewTask+0x3c>
 654:	f5 01       	movw	r30, r10
 656:	10 a2       	std	Z+32, r1	; 0x20
 658:	03 c0       	rjmp	.+6      	; 0x660 <prvInitialiseNewTask+0x6e>
 65a:	d5 01       	movw	r26, r10
 65c:	59 96       	adiw	r26, 0x19	; 25
 65e:	1c 92       	st	X, r1
 660:	b3 e0       	ldi	r27, 0x03	; 3
 662:	be 15       	cp	r27, r14
 664:	20 f4       	brcc	.+8      	; 0x66e <prvInitialiseNewTask+0x7c>
 666:	0f 2e       	mov	r0, r31
 668:	f3 e0       	ldi	r31, 0x03	; 3
 66a:	ef 2e       	mov	r14, r31
 66c:	f0 2d       	mov	r31, r0
 66e:	f5 01       	movw	r30, r10
 670:	e6 8a       	std	Z+22, r14	; 0x16
 672:	c5 01       	movw	r24, r10
 674:	02 96       	adiw	r24, 0x02	; 2
 676:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialiseItem>
 67a:	c5 01       	movw	r24, r10
 67c:	0c 96       	adiw	r24, 0x0c	; 12
 67e:	0e 94 a5 02 	call	0x54a	; 0x54a <vListInitialiseItem>
 682:	d5 01       	movw	r26, r10
 684:	19 96       	adiw	r26, 0x09	; 9
 686:	bc 92       	st	X, r11
 688:	ae 92       	st	-X, r10
 68a:	18 97       	sbiw	r26, 0x08	; 8
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	8e 19       	sub	r24, r14
 692:	91 09       	sbc	r25, r1
 694:	1d 96       	adiw	r26, 0x0d	; 13
 696:	9c 93       	st	X, r25
 698:	8e 93       	st	-X, r24
 69a:	1c 97       	sbiw	r26, 0x0c	; 12
 69c:	53 96       	adiw	r26, 0x13	; 19
 69e:	bc 92       	st	X, r11
 6a0:	ae 92       	st	-X, r10
 6a2:	52 97       	sbiw	r26, 0x12	; 18
 6a4:	84 e0       	ldi	r24, 0x04	; 4
 6a6:	f5 01       	movw	r30, r10
 6a8:	b1 96       	adiw	r30, 0x21	; 33
 6aa:	df 01       	movw	r26, r30
 6ac:	1d 92       	st	X+, r1
 6ae:	8a 95       	dec	r24
 6b0:	e9 f7       	brne	.-6      	; 0x6ac <prvInitialiseNewTask+0xba>
 6b2:	f5 01       	movw	r30, r10
 6b4:	15 a2       	std	Z+37, r1	; 0x25
 6b6:	a8 01       	movw	r20, r16
 6b8:	b4 01       	movw	r22, r8
 6ba:	c3 01       	movw	r24, r6
 6bc:	0e 94 61 00 	call	0xc2	; 0xc2 <pxPortInitialiseStack>
 6c0:	d5 01       	movw	r26, r10
 6c2:	8d 93       	st	X+, r24
 6c4:	9c 93       	st	X, r25
 6c6:	c1 14       	cp	r12, r1
 6c8:	d1 04       	cpc	r13, r1
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <prvInitialiseNewTask+0xe0>
 6cc:	f6 01       	movw	r30, r12
 6ce:	b1 82       	std	Z+1, r11	; 0x01
 6d0:	a0 82       	st	Z, r10
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	ef 90       	pop	r14
 6dc:	df 90       	pop	r13
 6de:	cf 90       	pop	r12
 6e0:	bf 90       	pop	r11
 6e2:	af 90       	pop	r10
 6e4:	9f 90       	pop	r9
 6e6:	8f 90       	pop	r8
 6e8:	7f 90       	pop	r7
 6ea:	6f 90       	pop	r6
 6ec:	08 95       	ret

000006ee <prvInitialiseTaskLists>:
 6ee:	cf 93       	push	r28
 6f0:	c0 e0       	ldi	r28, 0x00	; 0
 6f2:	10 c0       	rjmp	.+32     	; 0x714 <prvInitialiseTaskLists+0x26>
 6f4:	8c 2f       	mov	r24, r28
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	9c 01       	movw	r18, r24
 6fa:	22 0f       	add	r18, r18
 6fc:	33 1f       	adc	r19, r19
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	82 0f       	add	r24, r18
 708:	93 1f       	adc	r25, r19
 70a:	85 5d       	subi	r24, 0xD5	; 213
 70c:	98 4f       	sbci	r25, 0xF8	; 248
 70e:	0e 94 97 02 	call	0x52e	; 0x52e <vListInitialise>
 712:	cf 5f       	subi	r28, 0xFF	; 255
 714:	c4 30       	cpi	r28, 0x04	; 4
 716:	70 f3       	brcs	.-36     	; 0x6f4 <prvInitialiseTaskLists+0x6>
 718:	82 e2       	ldi	r24, 0x22	; 34
 71a:	97 e0       	ldi	r25, 0x07	; 7
 71c:	0e 94 97 02 	call	0x52e	; 0x52e <vListInitialise>
 720:	89 e1       	ldi	r24, 0x19	; 25
 722:	97 e0       	ldi	r25, 0x07	; 7
 724:	0e 94 97 02 	call	0x52e	; 0x52e <vListInitialise>
 728:	8c e0       	ldi	r24, 0x0C	; 12
 72a:	97 e0       	ldi	r25, 0x07	; 7
 72c:	0e 94 97 02 	call	0x52e	; 0x52e <vListInitialise>
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	97 e0       	ldi	r25, 0x07	; 7
 734:	0e 94 97 02 	call	0x52e	; 0x52e <vListInitialise>
 738:	82 e2       	ldi	r24, 0x22	; 34
 73a:	97 e0       	ldi	r25, 0x07	; 7
 73c:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <pxDelayedTaskList+0x1>
 740:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <pxDelayedTaskList>
 744:	89 e1       	ldi	r24, 0x19	; 25
 746:	97 e0       	ldi	r25, 0x07	; 7
 748:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowDelayedTaskList+0x1>
 74c:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowDelayedTaskList>
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <prvAddNewTaskToReadyList>:
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	ec 01       	movw	r28, r24
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	0f 92       	push	r0
 760:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxCurrentNumberOfTasks>
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxCurrentNumberOfTasks>
 76a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <pxCurrentTCB>
 76e:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 772:	89 2b       	or	r24, r25
 774:	59 f4       	brne	.+22     	; 0x78c <prvAddNewTaskToReadyList+0x38>
 776:	d0 93 50 07 	sts	0x0750, r29	; 0x800750 <pxCurrentTCB+0x1>
 77a:	c0 93 4f 07 	sts	0x074F, r28	; 0x80074f <pxCurrentTCB>
 77e:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxCurrentNumberOfTasks>
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	99 f4       	brne	.+38     	; 0x7ac <prvAddNewTaskToReadyList+0x58>
 786:	0e 94 77 03 	call	0x6ee	; 0x6ee <prvInitialiseTaskLists>
 78a:	10 c0       	rjmp	.+32     	; 0x7ac <prvAddNewTaskToReadyList+0x58>
 78c:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
 790:	81 11       	cpse	r24, r1
 792:	0c c0       	rjmp	.+24     	; 0x7ac <prvAddNewTaskToReadyList+0x58>
 794:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <pxCurrentTCB>
 798:	f0 91 50 07 	lds	r31, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 79c:	96 89       	ldd	r25, Z+22	; 0x16
 79e:	8e 89       	ldd	r24, Y+22	; 0x16
 7a0:	89 17       	cp	r24, r25
 7a2:	20 f0       	brcs	.+8      	; 0x7ac <prvAddNewTaskToReadyList+0x58>
 7a4:	d0 93 50 07 	sts	0x0750, r29	; 0x800750 <pxCurrentTCB+0x1>
 7a8:	c0 93 4f 07 	sts	0x074F, r28	; 0x80074f <pxCurrentTCB>
 7ac:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxTaskNumber>
 7b0:	8f 5f       	subi	r24, 0xFF	; 255
 7b2:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxTaskNumber>
 7b6:	8e 89       	ldd	r24, Y+22	; 0x16
 7b8:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
 7bc:	98 17       	cp	r25, r24
 7be:	10 f4       	brcc	.+4      	; 0x7c4 <prvAddNewTaskToReadyList+0x70>
 7c0:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	fc 01       	movw	r30, r24
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	8e 0f       	add	r24, r30
 7d6:	9f 1f       	adc	r25, r31
 7d8:	fc 01       	movw	r30, r24
 7da:	e5 5d       	subi	r30, 0xD5	; 213
 7dc:	f8 4f       	sbci	r31, 0xF8	; 248
 7de:	01 80       	ldd	r0, Z+1	; 0x01
 7e0:	f2 81       	ldd	r31, Z+2	; 0x02
 7e2:	e0 2d       	mov	r30, r0
 7e4:	fd 83       	std	Y+5, r31	; 0x05
 7e6:	ec 83       	std	Y+4, r30	; 0x04
 7e8:	84 81       	ldd	r24, Z+4	; 0x04
 7ea:	95 81       	ldd	r25, Z+5	; 0x05
 7ec:	9f 83       	std	Y+7, r25	; 0x07
 7ee:	8e 83       	std	Y+6, r24	; 0x06
 7f0:	a4 81       	ldd	r26, Z+4	; 0x04
 7f2:	b5 81       	ldd	r27, Z+5	; 0x05
 7f4:	ce 01       	movw	r24, r28
 7f6:	02 96       	adiw	r24, 0x02	; 2
 7f8:	13 96       	adiw	r26, 0x03	; 3
 7fa:	9c 93       	st	X, r25
 7fc:	8e 93       	st	-X, r24
 7fe:	12 97       	sbiw	r26, 0x02	; 2
 800:	95 83       	std	Z+5, r25	; 0x05
 802:	84 83       	std	Z+4, r24	; 0x04
 804:	ee 89       	ldd	r30, Y+22	; 0x16
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	cf 01       	movw	r24, r30
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	e8 0f       	add	r30, r24
 818:	f9 1f       	adc	r31, r25
 81a:	e5 5d       	subi	r30, 0xD5	; 213
 81c:	f8 4f       	sbci	r31, 0xF8	; 248
 81e:	fb 87       	std	Y+11, r31	; 0x0b
 820:	ea 87       	std	Y+10, r30	; 0x0a
 822:	80 81       	ld	r24, Z
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	80 83       	st	Z, r24
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <xSchedulerRunning>
 830:	88 23       	and	r24, r24
 832:	51 f0       	breq	.+20     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 834:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <pxCurrentTCB>
 838:	f0 91 50 07 	lds	r31, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 83c:	96 89       	ldd	r25, Z+22	; 0x16
 83e:	8e 89       	ldd	r24, Y+22	; 0x16
 840:	98 17       	cp	r25, r24
 842:	10 f4       	brcc	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vPortYield>
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <prvCheckTasksWaitingTermination>:
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	1c c0       	rjmp	.+56     	; 0x88c <prvCheckTasksWaitingTermination+0x3e>
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	f8 94       	cli
 858:	0f 92       	push	r0
 85a:	e0 91 08 07 	lds	r30, 0x0708	; 0x800708 <xTasksWaitingTermination+0x5>
 85e:	f0 91 09 07 	lds	r31, 0x0709	; 0x800709 <xTasksWaitingTermination+0x6>
 862:	c6 81       	ldd	r28, Z+6	; 0x06
 864:	d7 81       	ldd	r29, Z+7	; 0x07
 866:	ce 01       	movw	r24, r28
 868:	02 96       	adiw	r24, 0x02	; 2
 86a:	0e 94 a9 02 	call	0x552	; 0x552 <uxListRemove>
 86e:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxCurrentNumberOfTasks>
 872:	81 50       	subi	r24, 0x01	; 1
 874:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxCurrentNumberOfTasks>
 878:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxDeletedTasksWaitingCleanUp>
 87c:	81 50       	subi	r24, 0x01	; 1
 87e:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <uxDeletedTasksWaitingCleanUp>
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	ce 01       	movw	r24, r28
 888:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <prvDeleteTCB>
 88c:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <uxDeletedTasksWaitingCleanUp>
 890:	81 11       	cpse	r24, r1
 892:	e0 cf       	rjmp	.-64     	; 0x854 <prvCheckTasksWaitingTermination+0x6>
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	08 95       	ret

0000089a <prvIdleTask>:
 89a:	0e 94 27 04 	call	0x84e	; 0x84e <prvCheckTasksWaitingTermination>
 89e:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <pxReadyTasksLists>
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	d0 f3       	brcs	.-12     	; 0x89a <prvIdleTask>
 8a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vPortYield>
 8aa:	f7 cf       	rjmp	.-18     	; 0x89a <prvIdleTask>

000008ac <xTaskCreate>:
 8ac:	2f 92       	push	r2
 8ae:	3f 92       	push	r3
 8b0:	4f 92       	push	r4
 8b2:	5f 92       	push	r5
 8b4:	6f 92       	push	r6
 8b6:	7f 92       	push	r7
 8b8:	8f 92       	push	r8
 8ba:	9f 92       	push	r9
 8bc:	af 92       	push	r10
 8be:	bf 92       	push	r11
 8c0:	cf 92       	push	r12
 8c2:	df 92       	push	r13
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	0f 93       	push	r16
 8ca:	1f 93       	push	r17
 8cc:	cf 93       	push	r28
 8ce:	df 93       	push	r29
 8d0:	3c 01       	movw	r6, r24
 8d2:	1b 01       	movw	r2, r22
 8d4:	5a 01       	movw	r10, r20
 8d6:	29 01       	movw	r4, r18
 8d8:	ca 01       	movw	r24, r20
 8da:	0e 94 cf 01 	call	0x39e	; 0x39e <pvPortMalloc>
 8de:	6c 01       	movw	r12, r24
 8e0:	89 2b       	or	r24, r25
 8e2:	71 f0       	breq	.+28     	; 0x900 <__stack+0x1>
 8e4:	86 e2       	ldi	r24, 0x26	; 38
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 cf 01 	call	0x39e	; 0x39e <pvPortMalloc>
 8ec:	ec 01       	movw	r28, r24
 8ee:	89 2b       	or	r24, r25
 8f0:	19 f0       	breq	.+6      	; 0x8f8 <xTaskCreate+0x4c>
 8f2:	d8 8e       	std	Y+24, r13	; 0x18
 8f4:	cf 8a       	std	Y+23, r12	; 0x17
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <__stack+0x5>
 8f8:	c6 01       	movw	r24, r12
 8fa:	0e 94 64 02 	call	0x4c8	; 0x4c8 <vPortFree>
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
 900:	c0 e0       	ldi	r28, 0x00	; 0
 902:	d0 e0       	ldi	r29, 0x00	; 0
 904:	20 97       	sbiw	r28, 0x00	; 0
 906:	91 f0       	breq	.+36     	; 0x92c <__stack+0x2d>
 908:	95 01       	movw	r18, r10
 90a:	40 e0       	ldi	r20, 0x00	; 0
 90c:	50 e0       	ldi	r21, 0x00	; 0
 90e:	81 2c       	mov	r8, r1
 910:	91 2c       	mov	r9, r1
 912:	5e 01       	movw	r10, r28
 914:	67 01       	movw	r12, r14
 916:	e0 2e       	mov	r14, r16
 918:	82 01       	movw	r16, r4
 91a:	b1 01       	movw	r22, r2
 91c:	c3 01       	movw	r24, r6
 91e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <prvInitialiseNewTask>
 922:	ce 01       	movw	r24, r28
 924:	0e 94 aa 03 	call	0x754	; 0x754 <prvAddNewTaskToReadyList>
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	ff 90       	pop	r15
 938:	ef 90       	pop	r14
 93a:	df 90       	pop	r13
 93c:	cf 90       	pop	r12
 93e:	bf 90       	pop	r11
 940:	af 90       	pop	r10
 942:	9f 90       	pop	r9
 944:	8f 90       	pop	r8
 946:	7f 90       	pop	r7
 948:	6f 90       	pop	r6
 94a:	5f 90       	pop	r5
 94c:	4f 90       	pop	r4
 94e:	3f 90       	pop	r3
 950:	2f 90       	pop	r2
 952:	08 95       	ret

00000954 <vTaskStartScheduler>:
 954:	ef 92       	push	r14
 956:	ff 92       	push	r15
 958:	0f 93       	push	r16
 95a:	0f 2e       	mov	r0, r31
 95c:	f4 ef       	ldi	r31, 0xF4	; 244
 95e:	ef 2e       	mov	r14, r31
 960:	f6 e0       	ldi	r31, 0x06	; 6
 962:	ff 2e       	mov	r15, r31
 964:	f0 2d       	mov	r31, r0
 966:	00 e0       	ldi	r16, 0x00	; 0
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	45 e5       	ldi	r20, 0x55	; 85
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	63 e0       	ldi	r22, 0x03	; 3
 972:	71 e0       	ldi	r23, 0x01	; 1
 974:	8d e4       	ldi	r24, 0x4D	; 77
 976:	94 e0       	ldi	r25, 0x04	; 4
 978:	0e 94 56 04 	call	0x8ac	; 0x8ac <xTaskCreate>
 97c:	81 30       	cpi	r24, 0x01	; 1
 97e:	81 f4       	brne	.+32     	; 0x9a0 <vTaskStartScheduler+0x4c>
 980:	f8 94       	cli
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	9f ef       	ldi	r25, 0xFF	; 255
 986:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xNextTaskUnblockTime+0x1>
 98a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNextTaskUnblockTime>
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <xSchedulerRunning>
 994:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <xTickCount+0x1>
 998:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <xTickCount>
 99c:	0e 94 cd 00 	call	0x19a	; 0x19a <xPortStartScheduler>
 9a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
 9a4:	0f 91       	pop	r16
 9a6:	ff 90       	pop	r15
 9a8:	ef 90       	pop	r14
 9aa:	08 95       	ret

000009ac <vTaskSuspendAll>:
 9ac:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxSchedulerSuspended>
 9b0:	8f 5f       	subi	r24, 0xFF	; 255
 9b2:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxSchedulerSuspended>
 9b6:	08 95       	ret

000009b8 <xTaskIncrementTick>:
 9b8:	0f 93       	push	r16
 9ba:	1f 93       	push	r17
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxSchedulerSuspended>
 9c4:	81 11       	cpse	r24, r1
 9c6:	01 c1       	rjmp	.+514    	; 0xbca <xTaskIncrementTick+0x212>
 9c8:	c0 91 ff 06 	lds	r28, 0x06FF	; 0x8006ff <xTickCount>
 9cc:	d0 91 00 07 	lds	r29, 0x0700	; 0x800700 <xTickCount+0x1>
 9d0:	8e 01       	movw	r16, r28
 9d2:	0f 5f       	subi	r16, 0xFF	; 255
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	10 93 00 07 	sts	0x0700, r17	; 0x800700 <xTickCount+0x1>
 9da:	00 93 ff 06 	sts	0x06FF, r16	; 0x8006ff <xTickCount>
 9de:	01 15       	cp	r16, r1
 9e0:	11 05       	cpc	r17, r1
 9e2:	b9 f4       	brne	.+46     	; 0xa12 <xTaskIncrementTick+0x5a>
 9e4:	80 91 17 07 	lds	r24, 0x0717	; 0x800717 <pxDelayedTaskList>
 9e8:	90 91 18 07 	lds	r25, 0x0718	; 0x800718 <pxDelayedTaskList+0x1>
 9ec:	20 91 15 07 	lds	r18, 0x0715	; 0x800715 <pxOverflowDelayedTaskList>
 9f0:	30 91 16 07 	lds	r19, 0x0716	; 0x800716 <pxOverflowDelayedTaskList+0x1>
 9f4:	30 93 18 07 	sts	0x0718, r19	; 0x800718 <pxDelayedTaskList+0x1>
 9f8:	20 93 17 07 	sts	0x0717, r18	; 0x800717 <pxDelayedTaskList>
 9fc:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxOverflowDelayedTaskList+0x1>
 a00:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxOverflowDelayedTaskList>
 a04:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xNumOfOverflows>
 a08:	8f 5f       	subi	r24, 0xFF	; 255
 a0a:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xNumOfOverflows>
 a0e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <prvResetNextTaskUnblockTime>
 a12:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNextTaskUnblockTime>
 a16:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xNextTaskUnblockTime+0x1>
 a1a:	08 17       	cp	r16, r24
 a1c:	19 07       	cpc	r17, r25
 a1e:	20 f4       	brcc	.+8      	; 0xa28 <xTaskIncrementTick+0x70>
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	b8 c0       	rjmp	.+368    	; 0xb94 <xTaskIncrementTick+0x1dc>
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	01 c0       	rjmp	.+2      	; 0xa2a <xTaskIncrementTick+0x72>
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxDelayedTaskList>
 a2e:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxDelayedTaskList+0x1>
 a32:	90 81       	ld	r25, Z
 a34:	91 11       	cpse	r25, r1
 a36:	07 c0       	rjmp	.+14     	; 0xa46 <xTaskIncrementTick+0x8e>
 a38:	2f ef       	ldi	r18, 0xFF	; 255
 a3a:	3f ef       	ldi	r19, 0xFF	; 255
 a3c:	30 93 f7 06 	sts	0x06F7, r19	; 0x8006f7 <xNextTaskUnblockTime+0x1>
 a40:	20 93 f6 06 	sts	0x06F6, r18	; 0x8006f6 <xNextTaskUnblockTime>
 a44:	a7 c0       	rjmp	.+334    	; 0xb94 <xTaskIncrementTick+0x1dc>
 a46:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <pxDelayedTaskList>
 a4a:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <pxDelayedTaskList+0x1>
 a4e:	05 80       	ldd	r0, Z+5	; 0x05
 a50:	f6 81       	ldd	r31, Z+6	; 0x06
 a52:	e0 2d       	mov	r30, r0
 a54:	06 80       	ldd	r0, Z+6	; 0x06
 a56:	f7 81       	ldd	r31, Z+7	; 0x07
 a58:	e0 2d       	mov	r30, r0
 a5a:	22 81       	ldd	r18, Z+2	; 0x02
 a5c:	33 81       	ldd	r19, Z+3	; 0x03
 a5e:	02 17       	cp	r16, r18
 a60:	13 07       	cpc	r17, r19
 a62:	28 f4       	brcc	.+10     	; 0xa6e <xTaskIncrementTick+0xb6>
 a64:	30 93 f7 06 	sts	0x06F7, r19	; 0x8006f7 <xNextTaskUnblockTime+0x1>
 a68:	20 93 f6 06 	sts	0x06F6, r18	; 0x8006f6 <xNextTaskUnblockTime>
 a6c:	93 c0       	rjmp	.+294    	; 0xb94 <xTaskIncrementTick+0x1dc>
 a6e:	a2 85       	ldd	r26, Z+10	; 0x0a
 a70:	b3 85       	ldd	r27, Z+11	; 0x0b
 a72:	24 81       	ldd	r18, Z+4	; 0x04
 a74:	35 81       	ldd	r19, Z+5	; 0x05
 a76:	46 81       	ldd	r20, Z+6	; 0x06
 a78:	57 81       	ldd	r21, Z+7	; 0x07
 a7a:	e9 01       	movw	r28, r18
 a7c:	5d 83       	std	Y+5, r21	; 0x05
 a7e:	4c 83       	std	Y+4, r20	; 0x04
 a80:	26 81       	ldd	r18, Z+6	; 0x06
 a82:	37 81       	ldd	r19, Z+7	; 0x07
 a84:	44 81       	ldd	r20, Z+4	; 0x04
 a86:	55 81       	ldd	r21, Z+5	; 0x05
 a88:	e9 01       	movw	r28, r18
 a8a:	5b 83       	std	Y+3, r21	; 0x03
 a8c:	4a 83       	std	Y+2, r20	; 0x02
 a8e:	11 96       	adiw	r26, 0x01	; 1
 a90:	2d 91       	ld	r18, X+
 a92:	3c 91       	ld	r19, X
 a94:	12 97       	sbiw	r26, 0x02	; 2
 a96:	af 01       	movw	r20, r30
 a98:	4e 5f       	subi	r20, 0xFE	; 254
 a9a:	5f 4f       	sbci	r21, 0xFF	; 255
 a9c:	24 17       	cp	r18, r20
 a9e:	35 07       	cpc	r19, r21
 aa0:	31 f4       	brne	.+12     	; 0xaae <xTaskIncrementTick+0xf6>
 aa2:	26 81       	ldd	r18, Z+6	; 0x06
 aa4:	37 81       	ldd	r19, Z+7	; 0x07
 aa6:	12 96       	adiw	r26, 0x02	; 2
 aa8:	3c 93       	st	X, r19
 aaa:	2e 93       	st	-X, r18
 aac:	11 97       	sbiw	r26, 0x01	; 1
 aae:	13 86       	std	Z+11, r1	; 0x0b
 ab0:	12 86       	std	Z+10, r1	; 0x0a
 ab2:	9c 91       	ld	r25, X
 ab4:	91 50       	subi	r25, 0x01	; 1
 ab6:	9c 93       	st	X, r25
 ab8:	a4 89       	ldd	r26, Z+20	; 0x14
 aba:	b5 89       	ldd	r27, Z+21	; 0x15
 abc:	10 97       	sbiw	r26, 0x00	; 0
 abe:	19 f1       	breq	.+70     	; 0xb06 <xTaskIncrementTick+0x14e>
 ac0:	26 85       	ldd	r18, Z+14	; 0x0e
 ac2:	37 85       	ldd	r19, Z+15	; 0x0f
 ac4:	60 89       	ldd	r22, Z+16	; 0x10
 ac6:	71 89       	ldd	r23, Z+17	; 0x11
 ac8:	e9 01       	movw	r28, r18
 aca:	7d 83       	std	Y+5, r23	; 0x05
 acc:	6c 83       	std	Y+4, r22	; 0x04
 ace:	20 89       	ldd	r18, Z+16	; 0x10
 ad0:	31 89       	ldd	r19, Z+17	; 0x11
 ad2:	66 85       	ldd	r22, Z+14	; 0x0e
 ad4:	77 85       	ldd	r23, Z+15	; 0x0f
 ad6:	e9 01       	movw	r28, r18
 ad8:	7b 83       	std	Y+3, r23	; 0x03
 ada:	6a 83       	std	Y+2, r22	; 0x02
 adc:	11 96       	adiw	r26, 0x01	; 1
 ade:	6d 91       	ld	r22, X+
 ae0:	7c 91       	ld	r23, X
 ae2:	12 97       	sbiw	r26, 0x02	; 2
 ae4:	9f 01       	movw	r18, r30
 ae6:	24 5f       	subi	r18, 0xF4	; 244
 ae8:	3f 4f       	sbci	r19, 0xFF	; 255
 aea:	62 17       	cp	r22, r18
 aec:	73 07       	cpc	r23, r19
 aee:	31 f4       	brne	.+12     	; 0xafc <xTaskIncrementTick+0x144>
 af0:	20 89       	ldd	r18, Z+16	; 0x10
 af2:	31 89       	ldd	r19, Z+17	; 0x11
 af4:	12 96       	adiw	r26, 0x02	; 2
 af6:	3c 93       	st	X, r19
 af8:	2e 93       	st	-X, r18
 afa:	11 97       	sbiw	r26, 0x01	; 1
 afc:	15 8a       	std	Z+21, r1	; 0x15
 afe:	14 8a       	std	Z+20, r1	; 0x14
 b00:	9c 91       	ld	r25, X
 b02:	91 50       	subi	r25, 0x01	; 1
 b04:	9c 93       	st	X, r25
 b06:	26 89       	ldd	r18, Z+22	; 0x16
 b08:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
 b0c:	92 17       	cp	r25, r18
 b0e:	10 f4       	brcc	.+4      	; 0xb14 <xTaskIncrementTick+0x15c>
 b10:	20 93 fe 06 	sts	0x06FE, r18	; 0x8006fe <uxTopReadyPriority>
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	d9 01       	movw	r26, r18
 b18:	aa 0f       	add	r26, r26
 b1a:	bb 1f       	adc	r27, r27
 b1c:	aa 0f       	add	r26, r26
 b1e:	bb 1f       	adc	r27, r27
 b20:	aa 0f       	add	r26, r26
 b22:	bb 1f       	adc	r27, r27
 b24:	2a 0f       	add	r18, r26
 b26:	3b 1f       	adc	r19, r27
 b28:	d9 01       	movw	r26, r18
 b2a:	a5 5d       	subi	r26, 0xD5	; 213
 b2c:	b8 4f       	sbci	r27, 0xF8	; 248
 b2e:	11 96       	adiw	r26, 0x01	; 1
 b30:	0d 90       	ld	r0, X+
 b32:	bc 91       	ld	r27, X
 b34:	a0 2d       	mov	r26, r0
 b36:	b5 83       	std	Z+5, r27	; 0x05
 b38:	a4 83       	std	Z+4, r26	; 0x04
 b3a:	14 96       	adiw	r26, 0x04	; 4
 b3c:	2d 91       	ld	r18, X+
 b3e:	3c 91       	ld	r19, X
 b40:	15 97       	sbiw	r26, 0x05	; 5
 b42:	37 83       	std	Z+7, r19	; 0x07
 b44:	26 83       	std	Z+6, r18	; 0x06
 b46:	14 96       	adiw	r26, 0x04	; 4
 b48:	2d 91       	ld	r18, X+
 b4a:	3c 91       	ld	r19, X
 b4c:	15 97       	sbiw	r26, 0x05	; 5
 b4e:	e9 01       	movw	r28, r18
 b50:	5b 83       	std	Y+3, r21	; 0x03
 b52:	4a 83       	std	Y+2, r20	; 0x02
 b54:	15 96       	adiw	r26, 0x05	; 5
 b56:	5c 93       	st	X, r21
 b58:	4e 93       	st	-X, r20
 b5a:	14 97       	sbiw	r26, 0x04	; 4
 b5c:	a6 89       	ldd	r26, Z+22	; 0x16
 b5e:	b0 e0       	ldi	r27, 0x00	; 0
 b60:	9d 01       	movw	r18, r26
 b62:	22 0f       	add	r18, r18
 b64:	33 1f       	adc	r19, r19
 b66:	22 0f       	add	r18, r18
 b68:	33 1f       	adc	r19, r19
 b6a:	22 0f       	add	r18, r18
 b6c:	33 1f       	adc	r19, r19
 b6e:	a2 0f       	add	r26, r18
 b70:	b3 1f       	adc	r27, r19
 b72:	a5 5d       	subi	r26, 0xD5	; 213
 b74:	b8 4f       	sbci	r27, 0xF8	; 248
 b76:	b3 87       	std	Z+11, r27	; 0x0b
 b78:	a2 87       	std	Z+10, r26	; 0x0a
 b7a:	9c 91       	ld	r25, X
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	9c 93       	st	X, r25
 b80:	26 89       	ldd	r18, Z+22	; 0x16
 b82:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <pxCurrentTCB>
 b86:	f0 91 50 07 	lds	r31, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 b8a:	96 89       	ldd	r25, Z+22	; 0x16
 b8c:	29 17       	cp	r18, r25
 b8e:	08 f0       	brcs	.+2      	; 0xb92 <xTaskIncrementTick+0x1da>
 b90:	49 cf       	rjmp	.-366    	; 0xa24 <xTaskIncrementTick+0x6c>
 b92:	4b cf       	rjmp	.-362    	; 0xa2a <xTaskIncrementTick+0x72>
 b94:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <pxCurrentTCB>
 b98:	f0 91 50 07 	lds	r31, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 b9c:	26 89       	ldd	r18, Z+22	; 0x16
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	f9 01       	movw	r30, r18
 ba2:	ee 0f       	add	r30, r30
 ba4:	ff 1f       	adc	r31, r31
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	2e 0f       	add	r18, r30
 bb0:	3f 1f       	adc	r19, r31
 bb2:	f9 01       	movw	r30, r18
 bb4:	e5 5d       	subi	r30, 0xD5	; 213
 bb6:	f8 4f       	sbci	r31, 0xF8	; 248
 bb8:	90 81       	ld	r25, Z
 bba:	92 30       	cpi	r25, 0x02	; 2
 bbc:	08 f0       	brcs	.+2      	; 0xbc0 <xTaskIncrementTick+0x208>
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <xYieldPending>
 bc4:	91 11       	cpse	r25, r1
 bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <xTaskIncrementTick+0x228>
 bc8:	0c c0       	rjmp	.+24     	; 0xbe2 <xTaskIncrementTick+0x22a>
 bca:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xPendedTicks>
 bce:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <xPendedTicks+0x1>
 bd2:	01 96       	adiw	r24, 0x01	; 1
 bd4:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <xPendedTicks+0x1>
 bd8:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xPendedTicks>
 bdc:	80 e0       	ldi	r24, 0x00	; 0
 bde:	01 c0       	rjmp	.+2      	; 0xbe2 <xTaskIncrementTick+0x22a>
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	df 91       	pop	r29
 be4:	cf 91       	pop	r28
 be6:	1f 91       	pop	r17
 be8:	0f 91       	pop	r16
 bea:	08 95       	ret

00000bec <xTaskResumeAll>:
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	0f b6       	in	r0, 0x3f	; 63
 bf2:	f8 94       	cli
 bf4:	0f 92       	push	r0
 bf6:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxSchedulerSuspended>
 bfa:	81 50       	subi	r24, 0x01	; 1
 bfc:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxSchedulerSuspended>
 c00:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxSchedulerSuspended>
 c04:	81 11       	cpse	r24, r1
 c06:	bf c0       	rjmp	.+382    	; 0xd86 <xTaskResumeAll+0x19a>
 c08:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxCurrentNumberOfTasks>
 c0c:	81 11       	cpse	r24, r1
 c0e:	96 c0       	rjmp	.+300    	; 0xd3c <xTaskResumeAll+0x150>
 c10:	bd c0       	rjmp	.+378    	; 0xd8c <xTaskResumeAll+0x1a0>
 c12:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <xPendingReadyList+0x5>
 c16:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <xPendingReadyList+0x6>
 c1a:	06 80       	ldd	r0, Z+6	; 0x06
 c1c:	f7 81       	ldd	r31, Z+7	; 0x07
 c1e:	e0 2d       	mov	r30, r0
 c20:	a4 89       	ldd	r26, Z+20	; 0x14
 c22:	b5 89       	ldd	r27, Z+21	; 0x15
 c24:	c6 85       	ldd	r28, Z+14	; 0x0e
 c26:	d7 85       	ldd	r29, Z+15	; 0x0f
 c28:	80 89       	ldd	r24, Z+16	; 0x10
 c2a:	91 89       	ldd	r25, Z+17	; 0x11
 c2c:	9d 83       	std	Y+5, r25	; 0x05
 c2e:	8c 83       	std	Y+4, r24	; 0x04
 c30:	c0 89       	ldd	r28, Z+16	; 0x10
 c32:	d1 89       	ldd	r29, Z+17	; 0x11
 c34:	86 85       	ldd	r24, Z+14	; 0x0e
 c36:	97 85       	ldd	r25, Z+15	; 0x0f
 c38:	9b 83       	std	Y+3, r25	; 0x03
 c3a:	8a 83       	std	Y+2, r24	; 0x02
 c3c:	11 96       	adiw	r26, 0x01	; 1
 c3e:	2d 91       	ld	r18, X+
 c40:	3c 91       	ld	r19, X
 c42:	12 97       	sbiw	r26, 0x02	; 2
 c44:	cf 01       	movw	r24, r30
 c46:	0c 96       	adiw	r24, 0x0c	; 12
 c48:	28 17       	cp	r18, r24
 c4a:	39 07       	cpc	r19, r25
 c4c:	31 f4       	brne	.+12     	; 0xc5a <xTaskResumeAll+0x6e>
 c4e:	80 89       	ldd	r24, Z+16	; 0x10
 c50:	91 89       	ldd	r25, Z+17	; 0x11
 c52:	12 96       	adiw	r26, 0x02	; 2
 c54:	9c 93       	st	X, r25
 c56:	8e 93       	st	-X, r24
 c58:	11 97       	sbiw	r26, 0x01	; 1
 c5a:	15 8a       	std	Z+21, r1	; 0x15
 c5c:	14 8a       	std	Z+20, r1	; 0x14
 c5e:	8c 91       	ld	r24, X
 c60:	81 50       	subi	r24, 0x01	; 1
 c62:	8c 93       	st	X, r24
 c64:	a2 85       	ldd	r26, Z+10	; 0x0a
 c66:	b3 85       	ldd	r27, Z+11	; 0x0b
 c68:	c4 81       	ldd	r28, Z+4	; 0x04
 c6a:	d5 81       	ldd	r29, Z+5	; 0x05
 c6c:	86 81       	ldd	r24, Z+6	; 0x06
 c6e:	97 81       	ldd	r25, Z+7	; 0x07
 c70:	9d 83       	std	Y+5, r25	; 0x05
 c72:	8c 83       	std	Y+4, r24	; 0x04
 c74:	c6 81       	ldd	r28, Z+6	; 0x06
 c76:	d7 81       	ldd	r29, Z+7	; 0x07
 c78:	84 81       	ldd	r24, Z+4	; 0x04
 c7a:	95 81       	ldd	r25, Z+5	; 0x05
 c7c:	9b 83       	std	Y+3, r25	; 0x03
 c7e:	8a 83       	std	Y+2, r24	; 0x02
 c80:	11 96       	adiw	r26, 0x01	; 1
 c82:	8d 91       	ld	r24, X+
 c84:	9c 91       	ld	r25, X
 c86:	12 97       	sbiw	r26, 0x02	; 2
 c88:	9f 01       	movw	r18, r30
 c8a:	2e 5f       	subi	r18, 0xFE	; 254
 c8c:	3f 4f       	sbci	r19, 0xFF	; 255
 c8e:	82 17       	cp	r24, r18
 c90:	93 07       	cpc	r25, r19
 c92:	31 f4       	brne	.+12     	; 0xca0 <xTaskResumeAll+0xb4>
 c94:	86 81       	ldd	r24, Z+6	; 0x06
 c96:	97 81       	ldd	r25, Z+7	; 0x07
 c98:	12 96       	adiw	r26, 0x02	; 2
 c9a:	9c 93       	st	X, r25
 c9c:	8e 93       	st	-X, r24
 c9e:	11 97       	sbiw	r26, 0x01	; 1
 ca0:	13 86       	std	Z+11, r1	; 0x0b
 ca2:	12 86       	std	Z+10, r1	; 0x0a
 ca4:	8c 91       	ld	r24, X
 ca6:	81 50       	subi	r24, 0x01	; 1
 ca8:	8c 93       	st	X, r24
 caa:	86 89       	ldd	r24, Z+22	; 0x16
 cac:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <uxTopReadyPriority>
 cb0:	98 17       	cp	r25, r24
 cb2:	10 f4       	brcc	.+4      	; 0xcb8 <xTaskResumeAll+0xcc>
 cb4:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxTopReadyPriority>
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	dc 01       	movw	r26, r24
 cbc:	aa 0f       	add	r26, r26
 cbe:	bb 1f       	adc	r27, r27
 cc0:	aa 0f       	add	r26, r26
 cc2:	bb 1f       	adc	r27, r27
 cc4:	aa 0f       	add	r26, r26
 cc6:	bb 1f       	adc	r27, r27
 cc8:	8a 0f       	add	r24, r26
 cca:	9b 1f       	adc	r25, r27
 ccc:	dc 01       	movw	r26, r24
 cce:	a5 5d       	subi	r26, 0xD5	; 213
 cd0:	b8 4f       	sbci	r27, 0xF8	; 248
 cd2:	11 96       	adiw	r26, 0x01	; 1
 cd4:	0d 90       	ld	r0, X+
 cd6:	bc 91       	ld	r27, X
 cd8:	a0 2d       	mov	r26, r0
 cda:	b5 83       	std	Z+5, r27	; 0x05
 cdc:	a4 83       	std	Z+4, r26	; 0x04
 cde:	14 96       	adiw	r26, 0x04	; 4
 ce0:	8d 91       	ld	r24, X+
 ce2:	9c 91       	ld	r25, X
 ce4:	15 97       	sbiw	r26, 0x05	; 5
 ce6:	97 83       	std	Z+7, r25	; 0x07
 ce8:	86 83       	std	Z+6, r24	; 0x06
 cea:	14 96       	adiw	r26, 0x04	; 4
 cec:	cd 91       	ld	r28, X+
 cee:	dc 91       	ld	r29, X
 cf0:	15 97       	sbiw	r26, 0x05	; 5
 cf2:	3b 83       	std	Y+3, r19	; 0x03
 cf4:	2a 83       	std	Y+2, r18	; 0x02
 cf6:	15 96       	adiw	r26, 0x05	; 5
 cf8:	3c 93       	st	X, r19
 cfa:	2e 93       	st	-X, r18
 cfc:	14 97       	sbiw	r26, 0x04	; 4
 cfe:	a6 89       	ldd	r26, Z+22	; 0x16
 d00:	b0 e0       	ldi	r27, 0x00	; 0
 d02:	cd 01       	movw	r24, r26
 d04:	88 0f       	add	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	88 0f       	add	r24, r24
 d0a:	99 1f       	adc	r25, r25
 d0c:	88 0f       	add	r24, r24
 d0e:	99 1f       	adc	r25, r25
 d10:	a8 0f       	add	r26, r24
 d12:	b9 1f       	adc	r27, r25
 d14:	a5 5d       	subi	r26, 0xD5	; 213
 d16:	b8 4f       	sbci	r27, 0xF8	; 248
 d18:	b3 87       	std	Z+11, r27	; 0x0b
 d1a:	a2 87       	std	Z+10, r26	; 0x0a
 d1c:	8c 91       	ld	r24, X
 d1e:	8f 5f       	subi	r24, 0xFF	; 255
 d20:	8c 93       	st	X, r24
 d22:	96 89       	ldd	r25, Z+22	; 0x16
 d24:	a0 91 4f 07 	lds	r26, 0x074F	; 0x80074f <pxCurrentTCB>
 d28:	b0 91 50 07 	lds	r27, 0x0750	; 0x800750 <pxCurrentTCB+0x1>
 d2c:	56 96       	adiw	r26, 0x16	; 22
 d2e:	8c 91       	ld	r24, X
 d30:	98 17       	cp	r25, r24
 d32:	30 f0       	brcs	.+12     	; 0xd40 <xTaskResumeAll+0x154>
 d34:	81 e0       	ldi	r24, 0x01	; 1
 d36:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xYieldPending>
 d3a:	02 c0       	rjmp	.+4      	; 0xd40 <xTaskResumeAll+0x154>
 d3c:	e0 e0       	ldi	r30, 0x00	; 0
 d3e:	f0 e0       	ldi	r31, 0x00	; 0
 d40:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xPendingReadyList>
 d44:	81 11       	cpse	r24, r1
 d46:	65 cf       	rjmp	.-310    	; 0xc12 <xTaskResumeAll+0x26>
 d48:	ef 2b       	or	r30, r31
 d4a:	11 f0       	breq	.+4      	; 0xd50 <xTaskResumeAll+0x164>
 d4c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <prvResetNextTaskUnblockTime>
 d50:	c0 91 fb 06 	lds	r28, 0x06FB	; 0x8006fb <xPendedTicks>
 d54:	d0 91 fc 06 	lds	r29, 0x06FC	; 0x8006fc <xPendedTicks+0x1>
 d58:	20 97       	sbiw	r28, 0x00	; 0
 d5a:	69 f0       	breq	.+26     	; 0xd76 <xTaskResumeAll+0x18a>
 d5c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <xTaskIncrementTick>
 d60:	88 23       	and	r24, r24
 d62:	19 f0       	breq	.+6      	; 0xd6a <xTaskResumeAll+0x17e>
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xYieldPending>
 d6a:	21 97       	sbiw	r28, 0x01	; 1
 d6c:	b9 f7       	brne	.-18     	; 0xd5c <xTaskResumeAll+0x170>
 d6e:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xPendedTicks+0x1>
 d72:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xPendedTicks>
 d76:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <xYieldPending>
 d7a:	88 23       	and	r24, r24
 d7c:	31 f0       	breq	.+12     	; 0xd8a <xTaskResumeAll+0x19e>
 d7e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <vPortYield>
 d82:	81 e0       	ldi	r24, 0x01	; 1
 d84:	03 c0       	rjmp	.+6      	; 0xd8c <xTaskResumeAll+0x1a0>
 d86:	80 e0       	ldi	r24, 0x00	; 0
 d88:	01 c0       	rjmp	.+2      	; 0xd8c <xTaskResumeAll+0x1a0>
 d8a:	80 e0       	ldi	r24, 0x00	; 0
 d8c:	0f 90       	pop	r0
 d8e:	0f be       	out	0x3f, r0	; 63
 d90:	df 91       	pop	r29
 d92:	cf 91       	pop	r28
 d94:	08 95       	ret

00000d96 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 d96:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxSchedulerSuspended>
 d9a:	88 23       	and	r24, r24
 d9c:	21 f0       	breq	.+8      	; 0xda6 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 d9e:	81 e0       	ldi	r24, 0x01	; 1
 da0:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <xYieldPending>
 da4:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 da6:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 daa:	20 91 fe 06 	lds	r18, 0x06FE	; 0x8006fe <uxTopReadyPriority>
 dae:	01 c0       	rjmp	.+2      	; 0xdb2 <vTaskSwitchContext+0x1c>
 db0:	21 50       	subi	r18, 0x01	; 1
 db2:	82 2f       	mov	r24, r18
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	fc 01       	movw	r30, r24
 db8:	ee 0f       	add	r30, r30
 dba:	ff 1f       	adc	r31, r31
 dbc:	ee 0f       	add	r30, r30
 dbe:	ff 1f       	adc	r31, r31
 dc0:	ee 0f       	add	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	e8 0f       	add	r30, r24
 dc6:	f9 1f       	adc	r31, r25
 dc8:	e5 5d       	subi	r30, 0xD5	; 213
 dca:	f8 4f       	sbci	r31, 0xF8	; 248
 dcc:	30 81       	ld	r19, Z
 dce:	33 23       	and	r19, r19
 dd0:	79 f3       	breq	.-34     	; 0xdb0 <vTaskSwitchContext+0x1a>
 dd2:	ac 01       	movw	r20, r24
 dd4:	44 0f       	add	r20, r20
 dd6:	55 1f       	adc	r21, r21
 dd8:	44 0f       	add	r20, r20
 dda:	55 1f       	adc	r21, r21
 ddc:	44 0f       	add	r20, r20
 dde:	55 1f       	adc	r21, r21
 de0:	48 0f       	add	r20, r24
 de2:	59 1f       	adc	r21, r25
 de4:	df 01       	movw	r26, r30
 de6:	01 80       	ldd	r0, Z+1	; 0x01
 de8:	f2 81       	ldd	r31, Z+2	; 0x02
 dea:	e0 2d       	mov	r30, r0
 dec:	02 80       	ldd	r0, Z+2	; 0x02
 dee:	f3 81       	ldd	r31, Z+3	; 0x03
 df0:	e0 2d       	mov	r30, r0
 df2:	12 96       	adiw	r26, 0x02	; 2
 df4:	fc 93       	st	X, r31
 df6:	ee 93       	st	-X, r30
 df8:	11 97       	sbiw	r26, 0x01	; 1
 dfa:	42 5d       	subi	r20, 0xD2	; 210
 dfc:	58 4f       	sbci	r21, 0xF8	; 248
 dfe:	e4 17       	cp	r30, r20
 e00:	f5 07       	cpc	r31, r21
 e02:	29 f4       	brne	.+10     	; 0xe0e <vTaskSwitchContext+0x78>
 e04:	42 81       	ldd	r20, Z+2	; 0x02
 e06:	53 81       	ldd	r21, Z+3	; 0x03
 e08:	fd 01       	movw	r30, r26
 e0a:	52 83       	std	Z+2, r21	; 0x02
 e0c:	41 83       	std	Z+1, r20	; 0x01
 e0e:	fc 01       	movw	r30, r24
 e10:	ee 0f       	add	r30, r30
 e12:	ff 1f       	adc	r31, r31
 e14:	ee 0f       	add	r30, r30
 e16:	ff 1f       	adc	r31, r31
 e18:	ee 0f       	add	r30, r30
 e1a:	ff 1f       	adc	r31, r31
 e1c:	8e 0f       	add	r24, r30
 e1e:	9f 1f       	adc	r25, r31
 e20:	fc 01       	movw	r30, r24
 e22:	e5 5d       	subi	r30, 0xD5	; 213
 e24:	f8 4f       	sbci	r31, 0xF8	; 248
 e26:	01 80       	ldd	r0, Z+1	; 0x01
 e28:	f2 81       	ldd	r31, Z+2	; 0x02
 e2a:	e0 2d       	mov	r30, r0
 e2c:	86 81       	ldd	r24, Z+6	; 0x06
 e2e:	97 81       	ldd	r25, Z+7	; 0x07
 e30:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pxCurrentTCB+0x1>
 e34:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pxCurrentTCB>
 e38:	20 93 fe 06 	sts	0x06FE, r18	; 0x8006fe <uxTopReadyPriority>
 e3c:	08 95       	ret

00000e3e <blink>:
	PORTB = 0x00;
		
}
void blink(void)
{
	PORTB = 0x00;
 e3e:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 e40:	2f ef       	ldi	r18, 0xFF	; 255
 e42:	89 e6       	ldi	r24, 0x69	; 105
 e44:	98 e1       	ldi	r25, 0x18	; 24
 e46:	21 50       	subi	r18, 0x01	; 1
 e48:	80 40       	sbci	r24, 0x00	; 0
 e4a:	90 40       	sbci	r25, 0x00	; 0
 e4c:	e1 f7       	brne	.-8      	; 0xe46 <blink+0x8>
 e4e:	00 c0       	rjmp	.+0      	; 0xe50 <blink+0x12>
 e50:	00 00       	nop
	_delay_ms(500);
	PORTB = 0x30;
 e52:	80 e3       	ldi	r24, 0x30	; 48
 e54:	85 b9       	out	0x05, r24	; 5
 e56:	2f ef       	ldi	r18, 0xFF	; 255
 e58:	89 e6       	ldi	r24, 0x69	; 105
 e5a:	98 e1       	ldi	r25, 0x18	; 24
 e5c:	21 50       	subi	r18, 0x01	; 1
 e5e:	80 40       	sbci	r24, 0x00	; 0
 e60:	90 40       	sbci	r25, 0x00	; 0
 e62:	e1 f7       	brne	.-8      	; 0xe5c <blink+0x1e>
 e64:	00 c0       	rjmp	.+0      	; 0xe66 <blink+0x28>
 e66:	00 00       	nop
 e68:	08 95       	ret

00000e6a <init>:



void init()
{
	DDRB  = 0xff;
 e6a:	8f ef       	ldi	r24, 0xFF	; 255
 e6c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 e6e:	15 b8       	out	0x05, r1	; 5
 e70:	08 95       	ret

00000e72 <main>:
	}
	*/
}

int main(void)
{
 e72:	ef 92       	push	r14
 e74:	ff 92       	push	r15
 e76:	0f 93       	push	r16
 e78:	cf 93       	push	r28
 e7a:	df 93       	push	r29
 e7c:	00 d0       	rcall	.+0      	; 0xe7e <main+0xc>
 e7e:	cd b7       	in	r28, 0x3d	; 61
 e80:	de b7       	in	r29, 0x3e	; 62
    init();
 e82:	0e 94 35 07 	call	0xe6a	; 0xe6a <init>
	
	TaskHandle_t led_blink_task;
	
	xTaskCreate(blink,"blnk",150,NULL,1,&led_blink_task);
 e86:	ce 01       	movw	r24, r28
 e88:	01 96       	adiw	r24, 0x01	; 1
 e8a:	7c 01       	movw	r14, r24
 e8c:	01 e0       	ldi	r16, 0x01	; 1
 e8e:	20 e0       	ldi	r18, 0x00	; 0
 e90:	30 e0       	ldi	r19, 0x00	; 0
 e92:	46 e9       	ldi	r20, 0x96	; 150
 e94:	50 e0       	ldi	r21, 0x00	; 0
 e96:	68 e0       	ldi	r22, 0x08	; 8
 e98:	71 e0       	ldi	r23, 0x01	; 1
 e9a:	8f e1       	ldi	r24, 0x1F	; 31
 e9c:	97 e0       	ldi	r25, 0x07	; 7
 e9e:	0e 94 56 04 	call	0x8ac	; 0x8ac <xTaskCreate>
	vTaskStartScheduler();
 ea2:	0e 94 aa 04 	call	0x954	; 0x954 <vTaskStartScheduler>
	
	
	
   
}
 ea6:	80 e0       	ldi	r24, 0x00	; 0
 ea8:	90 e0       	ldi	r25, 0x00	; 0
 eaa:	0f 90       	pop	r0
 eac:	0f 90       	pop	r0
 eae:	df 91       	pop	r29
 eb0:	cf 91       	pop	r28
 eb2:	0f 91       	pop	r16
 eb4:	ff 90       	pop	r15
 eb6:	ef 90       	pop	r14
 eb8:	08 95       	ret

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
