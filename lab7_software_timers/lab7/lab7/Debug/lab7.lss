
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000221a  000022ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000221a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066a  00800120  00800120  000022ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000548  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000655c  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000143a  00000000  00000000  00008de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003aa7  00000000  00000000  0000a21e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001148  00000000  00000000  0000dcc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d6b  00000000  00000000  0000ee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006b4b  00000000  00000000  00010b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  000176c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      68:	e0 0e       	add	r14, r16
      6a:	e0 0e       	add	r14, r16
      6c:	0f 0f       	add	r16, r31
      6e:	14 0f       	add	r17, r20
      70:	2a 0f       	add	r18, r26
      72:	e0 0e       	add	r14, r16
      74:	e0 0e       	add	r14, r16
      76:	0f 0f       	add	r16, r31
      78:	14 0f       	add	r17, r20

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf ef       	ldi	r28, 0xFF	; 255
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	ea e1       	ldi	r30, 0x1A	; 26
      8e:	f2 e2       	ldi	r31, 0x22	; 34
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	a0 32       	cpi	r26, 0x20	; 32
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	27 e0       	ldi	r18, 0x07	; 7
      9e:	a0 e2       	ldi	r26, 0x20	; 32
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	aa 38       	cpi	r26, 0x8A	; 138
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 a5 10 	call	0x214a	; 0x214a <main>
      b0:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <out>:
		if (i>=28&&i<38)//for port C
		{if (i==a2){uint8_t tmp =i-30;if ((PINC & (1<<tmp))){return 1;} else{return 0;}}}
		if (i>=38&&i<48)//for port D
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
      b8:	2a e0       	ldi	r18, 0x0A	; 10
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	6a c0       	rjmp	.+212    	; 0x192 <out+0xda>
      be:	a9 01       	movw	r20, r18
      c0:	f9 01       	movw	r30, r18
      c2:	72 97       	sbiw	r30, 0x12	; 18
      c4:	3a 97       	sbiw	r30, 0x0a	; 10
      c6:	f0 f4       	brcc	.+60     	; 0x104 <out+0x4c>
      c8:	e8 2f       	mov	r30, r24
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	2e 17       	cp	r18, r30
      ce:	3f 07       	cpc	r19, r31
      d0:	c9 f4       	brne	.+50     	; 0x104 <out+0x4c>
      d2:	24 51       	subi	r18, 0x14	; 20
      d4:	34 b1       	in	r19, 0x04	; 4
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	02 c0       	rjmp	.+4      	; 0xe0 <out+0x28>
      dc:	88 0f       	add	r24, r24
      de:	99 1f       	adc	r25, r25
      e0:	2a 95       	dec	r18
      e2:	e2 f7       	brpl	.-8      	; 0xdc <out+0x24>
      e4:	23 2f       	mov	r18, r19
      e6:	28 2b       	or	r18, r24
      e8:	24 b9       	out	0x04, r18	; 4
      ea:	68 36       	cpi	r22, 0x68	; 104
      ec:	11 f0       	breq	.+4      	; 0xf2 <out+0x3a>
      ee:	68 34       	cpi	r22, 0x48	; 72
      f0:	21 f4       	brne	.+8      	; 0xfa <out+0x42>
      f2:	95 b1       	in	r25, 0x05	; 5
      f4:	89 2b       	or	r24, r25
      f6:	85 b9       	out	0x05, r24	; 5
      f8:	08 95       	ret
      fa:	95 b1       	in	r25, 0x05	; 5
      fc:	80 95       	com	r24
      fe:	89 23       	and	r24, r25
     100:	85 b9       	out	0x05, r24	; 5
     102:	08 95       	ret
     104:	fa 01       	movw	r30, r20
     106:	7c 97       	sbiw	r30, 0x1c	; 28
     108:	3a 97       	sbiw	r30, 0x0a	; 10
     10a:	f0 f4       	brcc	.+60     	; 0x148 <out+0x90>
     10c:	e8 2f       	mov	r30, r24
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	2e 17       	cp	r18, r30
     112:	3f 07       	cpc	r19, r31
     114:	c9 f4       	brne	.+50     	; 0x148 <out+0x90>
     116:	2e 51       	subi	r18, 0x1E	; 30
     118:	37 b1       	in	r19, 0x07	; 7
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 c0       	rjmp	.+4      	; 0x124 <out+0x6c>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	2a 95       	dec	r18
     126:	e2 f7       	brpl	.-8      	; 0x120 <out+0x68>
     128:	23 2f       	mov	r18, r19
     12a:	28 2b       	or	r18, r24
     12c:	27 b9       	out	0x07, r18	; 7
     12e:	68 36       	cpi	r22, 0x68	; 104
     130:	11 f0       	breq	.+4      	; 0x136 <out+0x7e>
     132:	68 34       	cpi	r22, 0x48	; 72
     134:	21 f4       	brne	.+8      	; 0x13e <out+0x86>
     136:	98 b1       	in	r25, 0x08	; 8
     138:	89 2b       	or	r24, r25
     13a:	88 b9       	out	0x08, r24	; 8
     13c:	08 95       	ret
     13e:	98 b1       	in	r25, 0x08	; 8
     140:	80 95       	com	r24
     142:	89 23       	and	r24, r25
     144:	88 b9       	out	0x08, r24	; 8
     146:	08 95       	ret
     148:	46 52       	subi	r20, 0x26	; 38
     14a:	51 09       	sbc	r21, r1
     14c:	4a 30       	cpi	r20, 0x0A	; 10
     14e:	51 05       	cpc	r21, r1
     150:	f0 f4       	brcc	.+60     	; 0x18e <out+0xd6>
     152:	48 2f       	mov	r20, r24
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	24 17       	cp	r18, r20
     158:	35 07       	cpc	r19, r21
     15a:	c9 f4       	brne	.+50     	; 0x18e <out+0xd6>
     15c:	28 52       	subi	r18, 0x28	; 40
     15e:	3a b1       	in	r19, 0x0a	; 10
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	02 c0       	rjmp	.+4      	; 0x16a <out+0xb2>
     166:	88 0f       	add	r24, r24
     168:	99 1f       	adc	r25, r25
     16a:	2a 95       	dec	r18
     16c:	e2 f7       	brpl	.-8      	; 0x166 <out+0xae>
     16e:	23 2f       	mov	r18, r19
     170:	28 2b       	or	r18, r24
     172:	2a b9       	out	0x0a, r18	; 10
     174:	68 36       	cpi	r22, 0x68	; 104
     176:	11 f0       	breq	.+4      	; 0x17c <out+0xc4>
     178:	68 34       	cpi	r22, 0x48	; 72
     17a:	21 f4       	brne	.+8      	; 0x184 <out+0xcc>
     17c:	9b b1       	in	r25, 0x0b	; 11
     17e:	89 2b       	or	r24, r25
     180:	8b b9       	out	0x0b, r24	; 11
     182:	08 95       	ret
     184:	9b b1       	in	r25, 0x0b	; 11
     186:	80 95       	com	r24
     188:	89 23       	and	r24, r25
     18a:	8b b9       	out	0x0b, r24	; 11
     18c:	08 95       	ret
     18e:	2f 5f       	subi	r18, 0xFF	; 255
     190:	3f 4f       	sbci	r19, 0xFF	; 255
     192:	20 33       	cpi	r18, 0x30	; 48
     194:	31 05       	cpc	r19, r1
     196:	0c f4       	brge	.+2      	; 0x19a <out+0xe2>
     198:	92 cf       	rjmp	.-220    	; 0xbe <out+0x6>
     19a:	08 95       	ret

0000019c <toggle>:
void toggle(uint8_t a3)
{
	for (int i=10;i<48;i++)
     19c:	2a e0       	ldi	r18, 0x0A	; 10
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	47 c0       	rjmp	.+142    	; 0x230 <toggle+0x94>
	{
		//if (i>=0&&i<18)//for port A
		//{if (i==a3){uint8_t tmp =i-10;PORTA ^=(1<<tmp);}}
		if (i>=18&&i<28)//for port B
     1a2:	a9 01       	movw	r20, r18
     1a4:	b9 01       	movw	r22, r18
     1a6:	62 51       	subi	r22, 0x12	; 18
     1a8:	71 09       	sbc	r23, r1
     1aa:	6a 30       	cpi	r22, 0x0A	; 10
     1ac:	71 05       	cpc	r23, r1
     1ae:	88 f4       	brcc	.+34     	; 0x1d2 <toggle+0x36>
		{if (i==a3){uint8_t tmp =i-20;PORTB ^=(1<<tmp);}}
     1b0:	68 2f       	mov	r22, r24
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	26 17       	cp	r18, r22
     1b6:	37 07       	cpc	r19, r23
     1b8:	61 f4       	brne	.+24     	; 0x1d2 <toggle+0x36>
     1ba:	ec ee       	ldi	r30, 0xEC	; 236
     1bc:	e2 0f       	add	r30, r18
     1be:	95 b1       	in	r25, 0x05	; 5
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <toggle+0x2e>
     1c6:	66 0f       	add	r22, r22
     1c8:	77 1f       	adc	r23, r23
     1ca:	ea 95       	dec	r30
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <toggle+0x2a>
     1ce:	69 27       	eor	r22, r25
     1d0:	65 b9       	out	0x05, r22	; 5
		if (i>=28&&i<38)//for port C
     1d2:	ba 01       	movw	r22, r20
     1d4:	6c 51       	subi	r22, 0x1C	; 28
     1d6:	71 09       	sbc	r23, r1
     1d8:	6a 30       	cpi	r22, 0x0A	; 10
     1da:	71 05       	cpc	r23, r1
     1dc:	88 f4       	brcc	.+34     	; 0x200 <toggle+0x64>
		{if (i==a3){uint8_t tmp =i-30;PORTC ^=(1<<tmp);}}
     1de:	68 2f       	mov	r22, r24
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	26 17       	cp	r18, r22
     1e4:	37 07       	cpc	r19, r23
     1e6:	61 f4       	brne	.+24     	; 0x200 <toggle+0x64>
     1e8:	e2 ee       	ldi	r30, 0xE2	; 226
     1ea:	e2 0f       	add	r30, r18
     1ec:	98 b1       	in	r25, 0x08	; 8
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <toggle+0x5c>
     1f4:	66 0f       	add	r22, r22
     1f6:	77 1f       	adc	r23, r23
     1f8:	ea 95       	dec	r30
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <toggle+0x58>
     1fc:	69 27       	eor	r22, r25
     1fe:	68 b9       	out	0x08, r22	; 8
		if (i>=38&&i<48)//for port D
     200:	46 52       	subi	r20, 0x26	; 38
     202:	51 09       	sbc	r21, r1
     204:	4a 30       	cpi	r20, 0x0A	; 10
     206:	51 05       	cpc	r21, r1
     208:	88 f4       	brcc	.+34     	; 0x22c <toggle+0x90>
		{if (i==a3){uint8_t tmp =i-40;PORTD ^=(1<<tmp);}}
     20a:	48 2f       	mov	r20, r24
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	24 17       	cp	r18, r20
     210:	35 07       	cpc	r19, r21
     212:	61 f4       	brne	.+24     	; 0x22c <toggle+0x90>
     214:	68 ed       	ldi	r22, 0xD8	; 216
     216:	62 0f       	add	r22, r18
     218:	9b b1       	in	r25, 0x0b	; 11
     21a:	41 e0       	ldi	r20, 0x01	; 1
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <toggle+0x88>
     220:	44 0f       	add	r20, r20
     222:	55 1f       	adc	r21, r21
     224:	6a 95       	dec	r22
     226:	e2 f7       	brpl	.-8      	; 0x220 <toggle+0x84>
     228:	49 27       	eor	r20, r25
     22a:	4b b9       	out	0x0b, r20	; 11
		{if (i==a2){uint8_t tmp =i-40;if ((PIND & (1<<tmp))){return 1;} else{return 0;}}}
	}
}
void toggle(uint8_t a3)
{
	for (int i=10;i<48;i++)
     22c:	2f 5f       	subi	r18, 0xFF	; 255
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	20 33       	cpi	r18, 0x30	; 48
     232:	31 05       	cpc	r19, r1
     234:	0c f4       	brge	.+2      	; 0x238 <toggle+0x9c>
     236:	b5 cf       	rjmp	.-150    	; 0x1a2 <toggle+0x6>
		if (i>=28&&i<38)//for port C
		{if (i==a3){uint8_t tmp =i-30;PORTC ^=(1<<tmp);}}
		if (i>=38&&i<48)//for port D
		{if (i==a3){uint8_t tmp =i-40;PORTD ^=(1<<tmp);}}
	}
     238:	08 95       	ret

0000023a <UART_init>:
{

	
	
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = x;
     23a:	e2 ec       	ldi	r30, 0xC2	; 194
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	86 60       	ori	r24, 0x06	; 6
     242:	80 83       	st	Z, r24
     244:	87 e6       	ldi	r24, 0x67	; 103
     246:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     24a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     24e:	e1 ec       	ldi	r30, 0xC1	; 193
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	88 61       	ori	r24, 0x18	; 24
     256:	80 83       	st	Z, r24
     258:	08 95       	ret

0000025a <UART_recieve>:
char UART_recieve()
{
	

	
	while(!(UCSR0A & (1<<RXC0)) );
     25a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     25e:	88 23       	and	r24, r24
     260:	e4 f7       	brge	.-8      	; 0x25a <UART_recieve>
	
	return  UDR0;
     262:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSRA & (1<<RXC)));
	char x = (char) UDR ;
   
   return x;*/
	//return 'a';
     266:	08 95       	ret

00000268 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     26e:	83 ef       	ldi	r24, 0xF3	; 243
     270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     274:	8b e0       	ldi	r24, 0x0B	; 11
     276:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     27a:	ef e6       	ldi	r30, 0x6F	; 111
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	82 60       	ori	r24, 0x02	; 2
     282:	80 83       	st	Z, r24
     284:	08 95       	ret

00000286 <pxPortInitialiseStack>:
     286:	31 e1       	ldi	r19, 0x11	; 17
     288:	fc 01       	movw	r30, r24
     28a:	30 83       	st	Z, r19
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	22 e2       	ldi	r18, 0x22	; 34
     290:	20 83       	st	Z, r18
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	a3 e3       	ldi	r26, 0x33	; 51
     296:	a0 83       	st	Z, r26
     298:	31 97       	sbiw	r30, 0x01	; 1
     29a:	60 83       	st	Z, r22
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	70 83       	st	Z, r23
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	10 82       	st	Z, r1
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	60 e8       	ldi	r22, 0x80	; 128
     2a8:	60 83       	st	Z, r22
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	10 82       	st	Z, r1
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	62 e0       	ldi	r22, 0x02	; 2
     2b2:	60 83       	st	Z, r22
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	63 e0       	ldi	r22, 0x03	; 3
     2b8:	60 83       	st	Z, r22
     2ba:	31 97       	sbiw	r30, 0x01	; 1
     2bc:	64 e0       	ldi	r22, 0x04	; 4
     2be:	60 83       	st	Z, r22
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	65 e0       	ldi	r22, 0x05	; 5
     2c4:	60 83       	st	Z, r22
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	66 e0       	ldi	r22, 0x06	; 6
     2ca:	60 83       	st	Z, r22
     2cc:	31 97       	sbiw	r30, 0x01	; 1
     2ce:	67 e0       	ldi	r22, 0x07	; 7
     2d0:	60 83       	st	Z, r22
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	68 e0       	ldi	r22, 0x08	; 8
     2d6:	60 83       	st	Z, r22
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	69 e0       	ldi	r22, 0x09	; 9
     2dc:	60 83       	st	Z, r22
     2de:	31 97       	sbiw	r30, 0x01	; 1
     2e0:	60 e1       	ldi	r22, 0x10	; 16
     2e2:	60 83       	st	Z, r22
     2e4:	31 97       	sbiw	r30, 0x01	; 1
     2e6:	30 83       	st	Z, r19
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	32 e1       	ldi	r19, 0x12	; 18
     2ec:	30 83       	st	Z, r19
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	33 e1       	ldi	r19, 0x13	; 19
     2f2:	30 83       	st	Z, r19
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	34 e1       	ldi	r19, 0x14	; 20
     2f8:	30 83       	st	Z, r19
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	35 e1       	ldi	r19, 0x15	; 21
     2fe:	30 83       	st	Z, r19
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	36 e1       	ldi	r19, 0x16	; 22
     304:	30 83       	st	Z, r19
     306:	31 97       	sbiw	r30, 0x01	; 1
     308:	37 e1       	ldi	r19, 0x17	; 23
     30a:	30 83       	st	Z, r19
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	38 e1       	ldi	r19, 0x18	; 24
     310:	30 83       	st	Z, r19
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	39 e1       	ldi	r19, 0x19	; 25
     316:	30 83       	st	Z, r19
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	30 e2       	ldi	r19, 0x20	; 32
     31c:	30 83       	st	Z, r19
     31e:	31 97       	sbiw	r30, 0x01	; 1
     320:	31 e2       	ldi	r19, 0x21	; 33
     322:	30 83       	st	Z, r19
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	20 83       	st	Z, r18
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	23 e2       	ldi	r18, 0x23	; 35
     32c:	20 83       	st	Z, r18
     32e:	31 97       	sbiw	r30, 0x01	; 1
     330:	40 83       	st	Z, r20
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	50 83       	st	Z, r21
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	26 e2       	ldi	r18, 0x26	; 38
     33a:	20 83       	st	Z, r18
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	27 e2       	ldi	r18, 0x27	; 39
     340:	20 83       	st	Z, r18
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	28 e2       	ldi	r18, 0x28	; 40
     346:	20 83       	st	Z, r18
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	29 e2       	ldi	r18, 0x29	; 41
     34c:	20 83       	st	Z, r18
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	20 e3       	ldi	r18, 0x30	; 48
     352:	20 83       	st	Z, r18
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	21 e3       	ldi	r18, 0x31	; 49
     358:	20 83       	st	Z, r18
     35a:	86 97       	sbiw	r24, 0x26	; 38
     35c:	08 95       	ret

0000035e <xPortStartScheduler>:
     35e:	0e 94 34 01 	call	0x268	; 0x268 <prvSetupTimerInterrupt>
     362:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
     366:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     36a:	cd 91       	ld	r28, X+
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	dd 91       	ld	r29, X+
     370:	de bf       	out	0x3e, r29	; 62
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	bf 91       	pop	r27
     37c:	af 91       	pop	r26
     37e:	9f 91       	pop	r25
     380:	8f 91       	pop	r24
     382:	7f 91       	pop	r23
     384:	6f 91       	pop	r22
     386:	5f 91       	pop	r21
     388:	4f 91       	pop	r20
     38a:	3f 91       	pop	r19
     38c:	2f 91       	pop	r18
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	df 90       	pop	r13
     398:	cf 90       	pop	r12
     39a:	bf 90       	pop	r11
     39c:	af 90       	pop	r10
     39e:	9f 90       	pop	r9
     3a0:	8f 90       	pop	r8
     3a2:	7f 90       	pop	r7
     3a4:	6f 90       	pop	r6
     3a6:	5f 90       	pop	r5
     3a8:	4f 90       	pop	r4
     3aa:	3f 90       	pop	r3
     3ac:	2f 90       	pop	r2
     3ae:	1f 90       	pop	r1
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	08 95       	ret
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	08 95       	ret

000003bc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	0f 92       	push	r0
     3c4:	1f 92       	push	r1
     3c6:	11 24       	eor	r1, r1
     3c8:	2f 92       	push	r2
     3ca:	3f 92       	push	r3
     3cc:	4f 92       	push	r4
     3ce:	5f 92       	push	r5
     3d0:	6f 92       	push	r6
     3d2:	7f 92       	push	r7
     3d4:	8f 92       	push	r8
     3d6:	9f 92       	push	r9
     3d8:	af 92       	push	r10
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	2f 93       	push	r18
     3ea:	3f 93       	push	r19
     3ec:	4f 93       	push	r20
     3ee:	5f 93       	push	r21
     3f0:	6f 93       	push	r22
     3f2:	7f 93       	push	r23
     3f4:	8f 93       	push	r24
     3f6:	9f 93       	push	r25
     3f8:	af 93       	push	r26
     3fa:	bf 93       	push	r27
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
     404:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
     408:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     40c:	0d b6       	in	r0, 0x3d	; 61
     40e:	0d 92       	st	X+, r0
     410:	0e b6       	in	r0, 0x3e	; 62
     412:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     414:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     418:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
     41c:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     420:	cd 91       	ld	r28, X+
     422:	cd bf       	out	0x3d, r28	; 61
     424:	dd 91       	ld	r29, X+
     426:	de bf       	out	0x3e, r29	; 62
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	bf 91       	pop	r27
     432:	af 91       	pop	r26
     434:	9f 91       	pop	r25
     436:	8f 91       	pop	r24
     438:	7f 91       	pop	r23
     43a:	6f 91       	pop	r22
     43c:	5f 91       	pop	r21
     43e:	4f 91       	pop	r20
     440:	3f 91       	pop	r19
     442:	2f 91       	pop	r18
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	9f 90       	pop	r9
     456:	8f 90       	pop	r8
     458:	7f 90       	pop	r7
     45a:	6f 90       	pop	r6
     45c:	5f 90       	pop	r5
     45e:	4f 90       	pop	r4
     460:	3f 90       	pop	r3
     462:	2f 90       	pop	r2
     464:	1f 90       	pop	r1
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     46c:	08 95       	ret

0000046e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	0f 92       	push	r0
     476:	1f 92       	push	r1
     478:	11 24       	eor	r1, r1
     47a:	2f 92       	push	r2
     47c:	3f 92       	push	r3
     47e:	4f 92       	push	r4
     480:	5f 92       	push	r5
     482:	6f 92       	push	r6
     484:	7f 92       	push	r7
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	2f 93       	push	r18
     49c:	3f 93       	push	r19
     49e:	4f 93       	push	r20
     4a0:	5f 93       	push	r21
     4a2:	6f 93       	push	r22
     4a4:	7f 93       	push	r23
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25
     4aa:	af 93       	push	r26
     4ac:	bf 93       	push	r27
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
     4b6:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
     4ba:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     4be:	0d b6       	in	r0, 0x3d	; 61
     4c0:	0d 92       	st	X+, r0
     4c2:	0e b6       	in	r0, 0x3e	; 62
     4c4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4c6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xTaskIncrementTick>
     4ca:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4cc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4d0:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
     4d4:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     4d8:	cd 91       	ld	r28, X+
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	dd 91       	ld	r29, X+
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	ff 91       	pop	r31
     4e2:	ef 91       	pop	r30
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	bf 91       	pop	r27
     4ea:	af 91       	pop	r26
     4ec:	9f 91       	pop	r25
     4ee:	8f 91       	pop	r24
     4f0:	7f 91       	pop	r23
     4f2:	6f 91       	pop	r22
     4f4:	5f 91       	pop	r21
     4f6:	4f 91       	pop	r20
     4f8:	3f 91       	pop	r19
     4fa:	2f 91       	pop	r18
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	bf 90       	pop	r11
     50a:	af 90       	pop	r10
     50c:	9f 90       	pop	r9
     50e:	8f 90       	pop	r8
     510:	7f 90       	pop	r7
     512:	6f 90       	pop	r6
     514:	5f 90       	pop	r5
     516:	4f 90       	pop	r4
     518:	3f 90       	pop	r3
     51a:	2f 90       	pop	r2
     51c:	1f 90       	pop	r1
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0

	asm volatile ( "ret" );
     524:	08 95       	ret

00000526 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     526:	0e 94 37 02 	call	0x46e	; 0x46e <vPortYieldFromTick>
		asm volatile ( "reti" );
     52a:	18 95       	reti

0000052c <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     52c:	a5 e2       	ldi	r26, 0x25	; 37
     52e:	b1 e0       	ldi	r27, 0x01	; 1
     530:	e9 e2       	ldi	r30, 0x29	; 41
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	11 96       	adiw	r26, 0x01	; 1
     536:	fc 93       	st	X, r31
     538:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     53a:	13 96       	adiw	r26, 0x03	; 3
     53c:	1c 92       	st	X, r1
     53e:	1e 92       	st	-X, r1
     540:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     542:	a1 e2       	ldi	r26, 0x21	; 33
     544:	b1 e0       	ldi	r27, 0x01	; 1
     546:	8b ed       	ldi	r24, 0xDB	; 219
     548:	95 e0       	ldi	r25, 0x05	; 5
     54a:	13 96       	adiw	r26, 0x03	; 3
     54c:	9c 93       	st	X, r25
     54e:	8e 93       	st	-X, r24
     550:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	1c 92       	st	X, r1
     556:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     558:	93 83       	std	Z+3, r25	; 0x03
     55a:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     55c:	b1 83       	std	Z+1, r27	; 0x01
     55e:	a0 83       	st	Z, r26
     560:	08 95       	ret

00000562 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     570:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     574:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     578:	81 11       	cpse	r24, r1
     57a:	05 c0       	rjmp	.+10     	; 0x586 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     57c:	0e 94 96 02 	call	0x52c	; 0x52c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     586:	20 97       	sbiw	r28, 0x00	; 0
     588:	71 f0       	breq	.+28     	; 0x5a6 <pvPortMalloc+0x44>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
     58a:	ce 01       	movw	r24, r28
     58c:	04 96       	adiw	r24, 0x04	; 4
            xHeapHasBeenInitialised = pdTRUE;
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) &&
     58e:	c8 17       	cp	r28, r24
     590:	d9 07       	cpc	r29, r25
     592:	38 f4       	brcc	.+14     	; 0x5a2 <pvPortMalloc+0x40>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
        {
            xWantedSize += heapSTRUCT_SIZE;

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
     594:	25 96       	adiw	r28, 0x05	; 5
     596:	8c 17       	cp	r24, r28
     598:	9d 07       	cpc	r25, r29
     59a:	28 f0       	brcs	.+10     	; 0x5a6 <pvPortMalloc+0x44>
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
            }
            else
            {
                xWantedSize = 0;
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	d0 e0       	ldi	r29, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <pvPortMalloc+0x44>
            }
        }
        else
        {
            xWantedSize = 0;
     5a2:	c0 e0       	ldi	r28, 0x00	; 0
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     5a6:	20 97       	sbiw	r28, 0x00	; 0
     5a8:	09 f4       	brne	.+2      	; 0x5ac <pvPortMalloc+0x4a>
     5aa:	5e c0       	rjmp	.+188    	; 0x668 <pvPortMalloc+0x106>
     5ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5b4:	2c 17       	cp	r18, r28
     5b6:	3d 07       	cpc	r19, r29
     5b8:	08 f4       	brcc	.+2      	; 0x5bc <pvPortMalloc+0x5a>
     5ba:	59 c0       	rjmp	.+178    	; 0x66e <pvPortMalloc+0x10c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     5bc:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <xStart>
     5c0:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     5c4:	a5 e2       	ldi	r26, 0x25	; 37
     5c6:	b1 e0       	ldi	r27, 0x01	; 1
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <pvPortMalloc+0x6c>
            {
                pxPreviousBlock = pxBlock;
     5ca:	df 01       	movw	r26, r30
                pxBlock = pxBlock->pxNextFreeBlock;
     5cc:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	8c 17       	cp	r24, r28
     5d4:	9d 07       	cpc	r25, r29
     5d6:	20 f4       	brcc	.+8      	; 0x5e0 <pvPortMalloc+0x7e>
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	a9 f7       	brne	.-22     	; 0x5ca <pvPortMalloc+0x68>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	e1 32       	cpi	r30, 0x21	; 33
     5e4:	f8 07       	cpc	r31, r24
     5e6:	09 f4       	brne	.+2      	; 0x5ea <pvPortMalloc+0x88>
     5e8:	45 c0       	rjmp	.+138    	; 0x674 <pvPortMalloc+0x112>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     5ea:	0d 91       	ld	r16, X+
     5ec:	1c 91       	ld	r17, X
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	0c 5f       	subi	r16, 0xFC	; 252
     5f2:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	8d 93       	st	X+, r24
     5fa:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5fc:	82 81       	ldd	r24, Z+2	; 0x02
     5fe:	93 81       	ldd	r25, Z+3	; 0x03
     600:	8c 1b       	sub	r24, r28
     602:	9d 0b       	sbc	r25, r29
     604:	89 30       	cpi	r24, 0x09	; 9
     606:	91 05       	cpc	r25, r1
     608:	30 f1       	brcs	.+76     	; 0x656 <pvPortMalloc+0xf4>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     60a:	bf 01       	movw	r22, r30
     60c:	6c 0f       	add	r22, r28
     60e:	7d 1f       	adc	r23, r29

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     610:	db 01       	movw	r26, r22
     612:	13 96       	adiw	r26, 0x03	; 3
     614:	9c 93       	st	X, r25
     616:	8e 93       	st	-X, r24
     618:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     61a:	d3 83       	std	Z+3, r29	; 0x03
     61c:	c2 83       	std	Z+2, r28	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     61e:	12 96       	adiw	r26, 0x02	; 2
     620:	4d 91       	ld	r20, X+
     622:	5c 91       	ld	r21, X
     624:	13 97       	sbiw	r26, 0x03	; 3
     626:	0f 2e       	mov	r0, r31
     628:	f5 e2       	ldi	r31, 0x25	; 37
     62a:	ef 2e       	mov	r14, r31
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	ff 2e       	mov	r15, r31
     630:	f0 2d       	mov	r31, r0
     632:	01 c0       	rjmp	.+2      	; 0x636 <pvPortMalloc+0xd4>
     634:	7d 01       	movw	r14, r26
     636:	e7 01       	movw	r28, r14
     638:	a8 81       	ld	r26, Y
     63a:	b9 81       	ldd	r27, Y+1	; 0x01
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	8d 91       	ld	r24, X+
     640:	9c 91       	ld	r25, X
     642:	13 97       	sbiw	r26, 0x03	; 3
     644:	84 17       	cp	r24, r20
     646:	95 07       	cpc	r25, r21
     648:	a8 f3       	brcs	.-22     	; 0x634 <pvPortMalloc+0xd2>
     64a:	eb 01       	movw	r28, r22
     64c:	b9 83       	std	Y+1, r27	; 0x01
     64e:	a8 83       	st	Y, r26
     650:	d7 01       	movw	r26, r14
     652:	6d 93       	st	X+, r22
     654:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	93 81       	ldd	r25, Z+3	; 0x03
     65a:	28 1b       	sub	r18, r24
     65c:	39 0b       	sbc	r19, r25
     65e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     662:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     666:	08 c0       	rjmp	.+16     	; 0x678 <pvPortMalloc+0x116>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	05 c0       	rjmp	.+10     	; 0x678 <pvPortMalloc+0x116>
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	02 c0       	rjmp	.+4      	; 0x678 <pvPortMalloc+0x116>
     674:	00 e0       	ldi	r16, 0x00	; 0
     676:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     678:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     67c:	c8 01       	movw	r24, r16
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	08 95       	ret

0000068c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	41 f1       	breq	.+80     	; 0x6e8 <vPortFree+0x5c>
     698:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     69a:	8c 01       	movw	r16, r24
     69c:	04 50       	subi	r16, 0x04	; 4
     69e:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     6a0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6a4:	f8 01       	movw	r30, r16
     6a6:	42 81       	ldd	r20, Z+2	; 0x02
     6a8:	53 81       	ldd	r21, Z+3	; 0x03
     6aa:	a5 e2       	ldi	r26, 0x25	; 37
     6ac:	b1 e0       	ldi	r27, 0x01	; 1
     6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <vPortFree+0x26>
     6b0:	df 01       	movw	r26, r30
     6b2:	ed 91       	ld	r30, X+
     6b4:	fc 91       	ld	r31, X
     6b6:	11 97       	sbiw	r26, 0x01	; 1
     6b8:	22 81       	ldd	r18, Z+2	; 0x02
     6ba:	33 81       	ldd	r19, Z+3	; 0x03
     6bc:	24 17       	cp	r18, r20
     6be:	35 07       	cpc	r19, r21
     6c0:	b8 f3       	brcs	.-18     	; 0x6b0 <vPortFree+0x24>
     6c2:	24 97       	sbiw	r28, 0x04	; 4
     6c4:	f9 83       	std	Y+1, r31	; 0x01
     6c6:	e8 83       	st	Y, r30
     6c8:	0d 93       	st	X+, r16
     6ca:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	9b 81       	ldd	r25, Y+3	; 0x03
     6d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6d8:	82 0f       	add	r24, r18
     6da:	93 1f       	adc	r25, r19
     6dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     6e4:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
    }
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6f2:	fc 01       	movw	r30, r24
     6f4:	03 96       	adiw	r24, 0x03	; 3
     6f6:	92 83       	std	Z+2, r25	; 0x02
     6f8:	81 83       	std	Z+1, r24	; 0x01
     6fa:	2f ef       	ldi	r18, 0xFF	; 255
     6fc:	3f ef       	ldi	r19, 0xFF	; 255
     6fe:	34 83       	std	Z+4, r19	; 0x04
     700:	23 83       	std	Z+3, r18	; 0x03
     702:	96 83       	std	Z+6, r25	; 0x06
     704:	85 83       	std	Z+5, r24	; 0x05
     706:	90 87       	std	Z+8, r25	; 0x08
     708:	87 83       	std	Z+7, r24	; 0x07
     70a:	10 82       	st	Z, r1
     70c:	08 95       	ret

0000070e <vListInitialiseItem>:
     70e:	fc 01       	movw	r30, r24
     710:	11 86       	std	Z+9, r1	; 0x09
     712:	10 86       	std	Z+8, r1	; 0x08
     714:	08 95       	ret

00000716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     71c:	48 81       	ld	r20, Y
     71e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     720:	4f 3f       	cpi	r20, 0xFF	; 255
     722:	2f ef       	ldi	r18, 0xFF	; 255
     724:	52 07       	cpc	r21, r18
     726:	21 f4       	brne	.+8      	; 0x730 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     728:	fc 01       	movw	r30, r24
     72a:	a7 81       	ldd	r26, Z+7	; 0x07
     72c:	b0 85       	ldd	r27, Z+8	; 0x08
     72e:	0d c0       	rjmp	.+26     	; 0x74a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     730:	dc 01       	movw	r26, r24
     732:	13 96       	adiw	r26, 0x03	; 3
     734:	01 c0       	rjmp	.+2      	; 0x738 <vListInsert+0x22>
     736:	df 01       	movw	r26, r30
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	ed 91       	ld	r30, X+
     73c:	fc 91       	ld	r31, X
     73e:	13 97       	sbiw	r26, 0x03	; 3
     740:	20 81       	ld	r18, Z
     742:	31 81       	ldd	r19, Z+1	; 0x01
     744:	42 17       	cp	r20, r18
     746:	53 07       	cpc	r21, r19
     748:	b0 f7       	brcc	.-20     	; 0x736 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     74a:	12 96       	adiw	r26, 0x02	; 2
     74c:	ed 91       	ld	r30, X+
     74e:	fc 91       	ld	r31, X
     750:	13 97       	sbiw	r26, 0x03	; 3
     752:	fb 83       	std	Y+3, r31	; 0x03
     754:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     756:	d5 83       	std	Z+5, r29	; 0x05
     758:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     75a:	bd 83       	std	Y+5, r27	; 0x05
     75c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     75e:	13 96       	adiw	r26, 0x03	; 3
     760:	dc 93       	st	X, r29
     762:	ce 93       	st	-X, r28
     764:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     766:	99 87       	std	Y+9, r25	; 0x09
     768:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     76a:	fc 01       	movw	r30, r24
     76c:	20 81       	ld	r18, Z
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	20 83       	st	Z, r18
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     77e:	a0 85       	ldd	r26, Z+8	; 0x08
     780:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     782:	c2 81       	ldd	r28, Z+2	; 0x02
     784:	d3 81       	ldd	r29, Z+3	; 0x03
     786:	84 81       	ldd	r24, Z+4	; 0x04
     788:	95 81       	ldd	r25, Z+5	; 0x05
     78a:	9d 83       	std	Y+5, r25	; 0x05
     78c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     78e:	c4 81       	ldd	r28, Z+4	; 0x04
     790:	d5 81       	ldd	r29, Z+5	; 0x05
     792:	82 81       	ldd	r24, Z+2	; 0x02
     794:	93 81       	ldd	r25, Z+3	; 0x03
     796:	9b 83       	std	Y+3, r25	; 0x03
     798:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	8d 91       	ld	r24, X+
     79e:	9c 91       	ld	r25, X
     7a0:	12 97       	sbiw	r26, 0x02	; 2
     7a2:	e8 17       	cp	r30, r24
     7a4:	f9 07       	cpc	r31, r25
     7a6:	31 f4       	brne	.+12     	; 0x7b4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     7a8:	84 81       	ldd	r24, Z+4	; 0x04
     7aa:	95 81       	ldd	r25, Z+5	; 0x05
     7ac:	12 96       	adiw	r26, 0x02	; 2
     7ae:	9c 93       	st	X, r25
     7b0:	8e 93       	st	-X, r24
     7b2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     7b4:	11 86       	std	Z+9, r1	; 0x09
     7b6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     7b8:	8c 91       	ld	r24, X
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     7be:	8c 91       	ld	r24, X
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <prvIsQueueEmpty>:
        {
            xReturn = pdFAIL;
        }

        return xReturn;
    }
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	0f 92       	push	r0
     7cc:	fc 01       	movw	r30, r24
     7ce:	82 8d       	ldd	r24, Z+26	; 0x1a
     7d0:	81 11       	cpse	r24, r1
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <prvIsQueueEmpty+0x12>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <prvIsQueueEmpty+0x14>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	08 95       	ret

000007e0 <prvIsQueueFull>:
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	0f 92       	push	r0
     7e6:	fc 01       	movw	r30, r24
     7e8:	22 8d       	ldd	r18, Z+26	; 0x1a
     7ea:	83 8d       	ldd	r24, Z+27	; 0x1b
     7ec:	28 13       	cpse	r18, r24
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <prvIsQueueFull+0x14>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <prvIsQueueFull+0x16>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	08 95       	ret

000007fc <prvCopyDataToQueue>:
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
     806:	04 2f       	mov	r16, r20
     808:	1a 8d       	ldd	r17, Y+26	; 0x1a
     80a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     80c:	41 11       	cpse	r20, r1
     80e:	0c c0       	rjmp	.+24     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     810:	88 81       	ld	r24, Y
     812:	99 81       	ldd	r25, Y+1	; 0x01
     814:	89 2b       	or	r24, r25
     816:	09 f0       	breq	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     818:	42 c0       	rjmp	.+132    	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     81a:	8c 81       	ldd	r24, Y+4	; 0x04
     81c:	9d 81       	ldd	r25, Y+5	; 0x05
     81e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <xTaskPriorityDisinherit>
     822:	1d 82       	std	Y+5, r1	; 0x05
     824:	1c 82       	std	Y+4, r1	; 0x04
     826:	42 c0       	rjmp	.+132    	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     828:	01 11       	cpse	r16, r1
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	9b 81       	ldd	r25, Y+3	; 0x03
     832:	0e 94 02 11 	call	0x2204	; 0x2204 <memcpy>
     836:	2c 8d       	ldd	r18, Y+28	; 0x1c
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	9b 81       	ldd	r25, Y+3	; 0x03
     83c:	82 0f       	add	r24, r18
     83e:	91 1d       	adc	r25, r1
     840:	9b 83       	std	Y+3, r25	; 0x03
     842:	8a 83       	std	Y+2, r24	; 0x02
     844:	2c 81       	ldd	r18, Y+4	; 0x04
     846:	3d 81       	ldd	r19, Y+5	; 0x05
     848:	82 17       	cp	r24, r18
     84a:	93 07       	cpc	r25, r19
     84c:	50 f1       	brcs	.+84     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     84e:	88 81       	ld	r24, Y
     850:	99 81       	ldd	r25, Y+1	; 0x01
     852:	9b 83       	std	Y+3, r25	; 0x03
     854:	8a 83       	std	Y+2, r24	; 0x02
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	29 c0       	rjmp	.+82     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	9f 81       	ldd	r25, Y+7	; 0x07
     860:	0e 94 02 11 	call	0x2204	; 0x2204 <memcpy>
     864:	8c 8d       	ldd	r24, Y+28	; 0x1c
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	91 95       	neg	r25
     86a:	81 95       	neg	r24
     86c:	91 09       	sbc	r25, r1
     86e:	2e 81       	ldd	r18, Y+6	; 0x06
     870:	3f 81       	ldd	r19, Y+7	; 0x07
     872:	28 0f       	add	r18, r24
     874:	39 1f       	adc	r19, r25
     876:	3f 83       	std	Y+7, r19	; 0x07
     878:	2e 83       	std	Y+6, r18	; 0x06
     87a:	48 81       	ld	r20, Y
     87c:	59 81       	ldd	r21, Y+1	; 0x01
     87e:	24 17       	cp	r18, r20
     880:	35 07       	cpc	r19, r21
     882:	30 f4       	brcc	.+12     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     884:	2c 81       	ldd	r18, Y+4	; 0x04
     886:	3d 81       	ldd	r19, Y+5	; 0x05
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	9f 83       	std	Y+7, r25	; 0x07
     88e:	8e 83       	std	Y+6, r24	; 0x06
     890:	02 30       	cpi	r16, 0x02	; 2
     892:	49 f4       	brne	.+18     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     894:	11 23       	and	r17, r17
     896:	49 f0       	breq	.+18     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     898:	11 50       	subi	r17, 0x01	; 1
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	1f 5f       	subi	r17, 0xFF	; 255
     8ae:	1a 8f       	std	Y+26, r17	; 0x1a
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <prvCopyDataFromQueue>:
     8ba:	fc 01       	movw	r30, r24
     8bc:	44 8d       	ldd	r20, Z+28	; 0x1c
     8be:	44 23       	and	r20, r20
     8c0:	a9 f0       	breq	.+42     	; 0x8ec <prvCopyDataFromQueue+0x32>
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	26 81       	ldd	r18, Z+6	; 0x06
     8c6:	37 81       	ldd	r19, Z+7	; 0x07
     8c8:	24 0f       	add	r18, r20
     8ca:	35 1f       	adc	r19, r21
     8cc:	37 83       	std	Z+7, r19	; 0x07
     8ce:	26 83       	std	Z+6, r18	; 0x06
     8d0:	84 81       	ldd	r24, Z+4	; 0x04
     8d2:	95 81       	ldd	r25, Z+5	; 0x05
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	20 f0       	brcs	.+8      	; 0x8e2 <prvCopyDataFromQueue+0x28>
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	97 83       	std	Z+7, r25	; 0x07
     8e0:	86 83       	std	Z+6, r24	; 0x06
     8e2:	cb 01       	movw	r24, r22
     8e4:	66 81       	ldd	r22, Z+6	; 0x06
     8e6:	77 81       	ldd	r23, Z+7	; 0x07
     8e8:	0e 94 02 11 	call	0x2204	; 0x2204 <memcpy>
     8ec:	08 95       	ret

000008ee <prvUnlockQueue>:
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	0f 92       	push	r0
     8fc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8fe:	0b c0       	rjmp	.+22     	; 0x916 <__stack+0x17>
     900:	89 89       	ldd	r24, Y+17	; 0x11
     902:	88 23       	and	r24, r24
     904:	51 f0       	breq	.+20     	; 0x91a <__stack+0x1b>
     906:	ce 01       	movw	r24, r28
     908:	41 96       	adiw	r24, 0x11	; 17
     90a:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskRemoveFromEventList>
     90e:	81 11       	cpse	r24, r1
     910:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <vTaskMissedYield>
     914:	11 50       	subi	r17, 0x01	; 1
     916:	11 16       	cp	r1, r17
     918:	9c f3       	brlt	.-26     	; 0x900 <__stack+0x1>
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	8e 8f       	std	Y+30, r24	; 0x1e
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	0f 92       	push	r0
     928:	1d 8d       	ldd	r17, Y+29	; 0x1d
     92a:	0b c0       	rjmp	.+22     	; 0x942 <__stack+0x43>
     92c:	88 85       	ldd	r24, Y+8	; 0x08
     92e:	88 23       	and	r24, r24
     930:	51 f0       	breq	.+20     	; 0x946 <__stack+0x47>
     932:	ce 01       	movw	r24, r28
     934:	08 96       	adiw	r24, 0x08	; 8
     936:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskRemoveFromEventList>
     93a:	81 11       	cpse	r24, r1
     93c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <vTaskMissedYield>
     940:	11 50       	subi	r17, 0x01	; 1
     942:	11 16       	cp	r1, r17
     944:	9c f3       	brlt	.-26     	; 0x92c <__stack+0x2d>
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	8d 8f       	std	Y+29, r24	; 0x1d
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	08 95       	ret

00000956 <xQueueGenericReset>:
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	fc 01       	movw	r30, r24
     960:	36 2f       	mov	r19, r22
     962:	89 2b       	or	r24, r25
     964:	09 f4       	brne	.+2      	; 0x968 <xQueueGenericReset+0x12>
     966:	4d c0       	rjmp	.+154    	; 0xa02 <xQueueGenericReset+0xac>
     968:	23 8d       	ldd	r18, Z+27	; 0x1b
     96a:	22 23       	and	r18, r18
     96c:	09 f4       	brne	.+2      	; 0x970 <xQueueGenericReset+0x1a>
     96e:	4b c0       	rjmp	.+150    	; 0xa06 <xQueueGenericReset+0xb0>
     970:	02 2f       	mov	r16, r18
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	9f ef       	ldi	r25, 0xFF	; 255
     978:	b8 01       	movw	r22, r16
     97a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__udivmodhi4>
     97e:	44 8d       	ldd	r20, Z+28	; 0x1c
     980:	84 2f       	mov	r24, r20
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	68 17       	cp	r22, r24
     986:	79 07       	cpc	r23, r25
     988:	08 f4       	brcc	.+2      	; 0x98c <xQueueGenericReset+0x36>
     98a:	3f c0       	rjmp	.+126    	; 0xa0a <xQueueGenericReset+0xb4>
     98c:	ef 01       	movw	r28, r30
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	0f 92       	push	r0
     994:	60 81       	ld	r22, Z
     996:	71 81       	ldd	r23, Z+1	; 0x01
     998:	fb 01       	movw	r30, r22
     99a:	24 9f       	mul	r18, r20
     99c:	e0 0d       	add	r30, r0
     99e:	f1 1d       	adc	r31, r1
     9a0:	11 24       	eor	r1, r1
     9a2:	fd 83       	std	Y+5, r31	; 0x05
     9a4:	ec 83       	std	Y+4, r30	; 0x04
     9a6:	1a 8e       	std	Y+26, r1	; 0x1a
     9a8:	7b 83       	std	Y+3, r23	; 0x03
     9aa:	6a 83       	std	Y+2, r22	; 0x02
     9ac:	01 50       	subi	r16, 0x01	; 1
     9ae:	11 09       	sbc	r17, r1
     9b0:	80 9f       	mul	r24, r16
     9b2:	a0 01       	movw	r20, r0
     9b4:	81 9f       	mul	r24, r17
     9b6:	50 0d       	add	r21, r0
     9b8:	90 9f       	mul	r25, r16
     9ba:	50 0d       	add	r21, r0
     9bc:	11 24       	eor	r1, r1
     9be:	cb 01       	movw	r24, r22
     9c0:	84 0f       	add	r24, r20
     9c2:	95 1f       	adc	r25, r21
     9c4:	9f 83       	std	Y+7, r25	; 0x07
     9c6:	8e 83       	std	Y+6, r24	; 0x06
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	8d 8f       	std	Y+29, r24	; 0x1d
     9cc:	8e 8f       	std	Y+30, r24	; 0x1e
     9ce:	31 11       	cpse	r19, r1
     9d0:	0c c0       	rjmp	.+24     	; 0x9ea <xQueueGenericReset+0x94>
     9d2:	88 85       	ldd	r24, Y+8	; 0x08
     9d4:	88 23       	and	r24, r24
     9d6:	89 f0       	breq	.+34     	; 0x9fa <xQueueGenericReset+0xa4>
     9d8:	ce 01       	movw	r24, r28
     9da:	08 96       	adiw	r24, 0x08	; 8
     9dc:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskRemoveFromEventList>
     9e0:	88 23       	and	r24, r24
     9e2:	59 f0       	breq	.+22     	; 0x9fa <xQueueGenericReset+0xa4>
     9e4:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <xQueueGenericReset+0xa4>
     9ea:	ce 01       	movw	r24, r28
     9ec:	08 96       	adiw	r24, 0x08	; 8
     9ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     9f2:	ce 01       	movw	r24, r28
     9f4:	41 96       	adiw	r24, 0x11	; 17
     9f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     9fa:	0f 90       	pop	r0
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <xQueueGenericReset+0xb6>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <xQueueGenericReset+0xb6>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <xQueueGenericReset+0xb6>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <prvInitialiseNewQueue>:
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	f8 01       	movw	r30, r16
     a1c:	61 11       	cpse	r22, r1
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <prvInitialiseNewQueue+0x10>
     a20:	11 83       	std	Z+1, r17	; 0x01
     a22:	00 83       	st	Z, r16
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <prvInitialiseNewQueue+0x14>
     a26:	51 83       	std	Z+1, r21	; 0x01
     a28:	40 83       	st	Z, r20
     a2a:	83 8f       	std	Z+27, r24	; 0x1b
     a2c:	64 8f       	std	Z+28, r22	; 0x1c
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	cf 01       	movw	r24, r30
     a32:	0e 94 ab 04 	call	0x956	; 0x956 <xQueueGenericReset>
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	08 95       	ret

00000a3c <xQueueGenericCreate>:
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	38 2f       	mov	r19, r24
     a4c:	e6 2f       	mov	r30, r22
     a4e:	88 23       	and	r24, r24
     a50:	29 f1       	breq	.+74     	; 0xa9c <xQueueGenericCreate+0x60>
     a52:	68 2f       	mov	r22, r24
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	9f ef       	ldi	r25, 0xFF	; 255
     a5a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__udivmodhi4>
     a5e:	8e 2f       	mov	r24, r30
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	68 17       	cp	r22, r24
     a64:	79 07       	cpc	r23, r25
     a66:	e8 f0       	brcs	.+58     	; 0xaa2 <xQueueGenericCreate+0x66>
     a68:	3e 9f       	mul	r19, r30
     a6a:	c0 01       	movw	r24, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	81 3e       	cpi	r24, 0xE1	; 225
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	92 07       	cpc	r25, r18
     a74:	c8 f4       	brcc	.+50     	; 0xaa8 <xQueueGenericCreate+0x6c>
     a76:	d4 2e       	mov	r13, r20
     a78:	de 2f       	mov	r29, r30
     a7a:	c3 2f       	mov	r28, r19
     a7c:	4f 96       	adiw	r24, 0x1f	; 31
     a7e:	0e 94 b1 02 	call	0x562	; 0x562 <pvPortMalloc>
     a82:	7c 01       	movw	r14, r24
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	91 f0       	breq	.+36     	; 0xaac <xQueueGenericCreate+0x70>
     a88:	8c 01       	movw	r16, r24
     a8a:	2d 2d       	mov	r18, r13
     a8c:	ac 01       	movw	r20, r24
     a8e:	41 5e       	subi	r20, 0xE1	; 225
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	6d 2f       	mov	r22, r29
     a94:	8c 2f       	mov	r24, r28
     a96:	0e 94 0b 05 	call	0xa16	; 0xa16 <prvInitialiseNewQueue>
     a9a:	08 c0       	rjmp	.+16     	; 0xaac <xQueueGenericCreate+0x70>
     a9c:	e1 2c       	mov	r14, r1
     a9e:	f1 2c       	mov	r15, r1
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <xQueueGenericCreate+0x70>
     aa2:	e1 2c       	mov	r14, r1
     aa4:	f1 2c       	mov	r15, r1
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <xQueueGenericCreate+0x70>
     aa8:	e1 2c       	mov	r14, r1
     aaa:	f1 2c       	mov	r15, r1
     aac:	c7 01       	movw	r24, r14
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	08 95       	ret

00000abe <xQueueGenericSend>:
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	00 d0       	rcall	.+0      	; 0xad0 <xQueueGenericSend+0x12>
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <xQueueGenericSend+0x14>
     ad2:	1f 92       	push	r1
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
     ad8:	8c 01       	movw	r16, r24
     ada:	7b 01       	movw	r14, r22
     adc:	5d 83       	std	Y+5, r21	; 0x05
     ade:	4c 83       	std	Y+4, r20	; 0x04
     ae0:	c2 2e       	mov	r12, r18
     ae2:	d1 2c       	mov	r13, r1
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	0f 92       	push	r0
     aea:	f8 01       	movw	r30, r16
     aec:	92 8d       	ldd	r25, Z+26	; 0x1a
     aee:	83 8d       	ldd	r24, Z+27	; 0x1b
     af0:	98 17       	cp	r25, r24
     af2:	18 f0       	brcs	.+6      	; 0xafa <xQueueGenericSend+0x3c>
     af4:	f2 e0       	ldi	r31, 0x02	; 2
     af6:	cf 12       	cpse	r12, r31
     af8:	19 c0       	rjmp	.+50     	; 0xb2c <xQueueGenericSend+0x6e>
     afa:	4c 2d       	mov	r20, r12
     afc:	b7 01       	movw	r22, r14
     afe:	c8 01       	movw	r24, r16
     b00:	0e 94 fe 03 	call	0x7fc	; 0x7fc <prvCopyDataToQueue>
     b04:	f8 01       	movw	r30, r16
     b06:	91 89       	ldd	r25, Z+17	; 0x11
     b08:	99 23       	and	r25, r25
     b0a:	49 f0       	breq	.+18     	; 0xb1e <xQueueGenericSend+0x60>
     b0c:	c8 01       	movw	r24, r16
     b0e:	41 96       	adiw	r24, 0x11	; 17
     b10:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskRemoveFromEventList>
     b14:	88 23       	and	r24, r24
     b16:	31 f0       	breq	.+12     	; 0xb24 <xQueueGenericSend+0x66>
     b18:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <xQueueGenericSend+0x66>
     b1e:	81 11       	cpse	r24, r1
     b20:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	4d c0       	rjmp	.+154    	; 0xbc6 <xQueueGenericSend+0x108>
     b2c:	8c 81       	ldd	r24, Y+4	; 0x04
     b2e:	9d 81       	ldd	r25, Y+5	; 0x05
     b30:	89 2b       	or	r24, r25
     b32:	21 f4       	brne	.+8      	; 0xb3c <xQueueGenericSend+0x7e>
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	45 c0       	rjmp	.+138    	; 0xbc6 <xQueueGenericSend+0x108>
     b3c:	d1 10       	cpse	r13, r1
     b3e:	06 c0       	rjmp	.+12     	; 0xb4c <xQueueGenericSend+0x8e>
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskInternalSetTimeOutState>
     b48:	dd 24       	eor	r13, r13
     b4a:	d3 94       	inc	r13
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vTaskSuspendAll>
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	0f 92       	push	r0
     b5a:	f8 01       	movw	r30, r16
     b5c:	85 8d       	ldd	r24, Z+29	; 0x1d
     b5e:	8f 3f       	cpi	r24, 0xFF	; 255
     b60:	09 f4       	brne	.+2      	; 0xb64 <xQueueGenericSend+0xa6>
     b62:	15 8e       	std	Z+29, r1	; 0x1d
     b64:	f8 01       	movw	r30, r16
     b66:	86 8d       	ldd	r24, Z+30	; 0x1e
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	09 f4       	brne	.+2      	; 0xb6e <xQueueGenericSend+0xb0>
     b6c:	16 8e       	std	Z+30, r1	; 0x1e
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	be 01       	movw	r22, r28
     b74:	6c 5f       	subi	r22, 0xFC	; 252
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCheckForTimeOut>
     b80:	81 11       	cpse	r24, r1
     b82:	1b c0       	rjmp	.+54     	; 0xbba <xQueueGenericSend+0xfc>
     b84:	c8 01       	movw	r24, r16
     b86:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvIsQueueFull>
     b8a:	88 23       	and	r24, r24
     b8c:	81 f0       	breq	.+32     	; 0xbae <xQueueGenericSend+0xf0>
     b8e:	6c 81       	ldd	r22, Y+4	; 0x04
     b90:	7d 81       	ldd	r23, Y+5	; 0x05
     b92:	c8 01       	movw	r24, r16
     b94:	08 96       	adiw	r24, 0x08	; 8
     b96:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskPlaceOnEventList>
     b9a:	c8 01       	movw	r24, r16
     b9c:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
     ba0:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
     ba4:	81 11       	cpse	r24, r1
     ba6:	9e cf       	rjmp	.-196    	; 0xae4 <xQueueGenericSend+0x26>
     ba8:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
     bac:	9b cf       	rjmp	.-202    	; 0xae4 <xQueueGenericSend+0x26>
     bae:	c8 01       	movw	r24, r16
     bb0:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
     bb4:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
     bb8:	95 cf       	rjmp	.-214    	; 0xae4 <xQueueGenericSend+0x26>
     bba:	c8 01       	movw	r24, r16
     bbc:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
     bc0:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	08 95       	ret

00000be2 <xQueueGenericSendFromISR>:
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	8a 01       	movw	r16, r20
     bf0:	fc 01       	movw	r30, r24
     bf2:	52 8d       	ldd	r21, Z+26	; 0x1a
     bf4:	33 8d       	ldd	r19, Z+27	; 0x1b
     bf6:	53 17       	cp	r21, r19
     bf8:	10 f0       	brcs	.+4      	; 0xbfe <xQueueGenericSendFromISR+0x1c>
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	01 f5       	brne	.+64     	; 0xc3e <xQueueGenericSendFromISR+0x5c>
     bfe:	42 2f       	mov	r20, r18
     c00:	78 01       	movw	r14, r16
     c02:	ec 01       	movw	r28, r24
     c04:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c06:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c08:	ce 01       	movw	r24, r28
     c0a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <prvCopyDataToQueue>
     c0e:	1f 3f       	cpi	r17, 0xFF	; 255
     c10:	81 f4       	brne	.+32     	; 0xc32 <xQueueGenericSendFromISR+0x50>
     c12:	89 89       	ldd	r24, Y+17	; 0x11
     c14:	88 23       	and	r24, r24
     c16:	a9 f0       	breq	.+42     	; 0xc42 <xQueueGenericSendFromISR+0x60>
     c18:	ce 01       	movw	r24, r28
     c1a:	41 96       	adiw	r24, 0x11	; 17
     c1c:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskRemoveFromEventList>
     c20:	88 23       	and	r24, r24
     c22:	89 f0       	breq	.+34     	; 0xc46 <xQueueGenericSendFromISR+0x64>
     c24:	e1 14       	cp	r14, r1
     c26:	f1 04       	cpc	r15, r1
     c28:	81 f0       	breq	.+32     	; 0xc4a <xQueueGenericSendFromISR+0x68>
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	f7 01       	movw	r30, r14
     c2e:	80 83       	st	Z, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <xQueueGenericSendFromISR+0x6a>
     c32:	ff 24       	eor	r15, r15
     c34:	f3 94       	inc	r15
     c36:	f1 0e       	add	r15, r17
     c38:	fe 8e       	std	Y+30, r15	; 0x1e
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	07 c0       	rjmp	.+14     	; 0xc4c <xQueueGenericSendFromISR+0x6a>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <xQueueGenericSendFromISR+0x6a>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <xQueueGenericSendFromISR+0x6a>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <xQueueGenericSendFromISR+0x6a>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	08 95       	ret

00000c5a <xQueueReceive>:
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <xQueueReceive+0x12>
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <xQueueReceive+0x14>
     c6e:	1f 92       	push	r1
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	8c 01       	movw	r16, r24
     c76:	6b 01       	movw	r12, r22
     c78:	5d 83       	std	Y+5, r21	; 0x05
     c7a:	4c 83       	std	Y+4, r20	; 0x04
     c7c:	e1 2c       	mov	r14, r1
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	0f 92       	push	r0
     c84:	f8 01       	movw	r30, r16
     c86:	f2 8c       	ldd	r15, Z+26	; 0x1a
     c88:	ff 20       	and	r15, r15
     c8a:	a9 f0       	breq	.+42     	; 0xcb6 <xQueueReceive+0x5c>
     c8c:	b6 01       	movw	r22, r12
     c8e:	c8 01       	movw	r24, r16
     c90:	0e 94 5d 04 	call	0x8ba	; 0x8ba <prvCopyDataFromQueue>
     c94:	fa 94       	dec	r15
     c96:	f8 01       	movw	r30, r16
     c98:	f2 8e       	std	Z+26, r15	; 0x1a
     c9a:	80 85       	ldd	r24, Z+8	; 0x08
     c9c:	88 23       	and	r24, r24
     c9e:	39 f0       	breq	.+14     	; 0xcae <xQueueReceive+0x54>
     ca0:	c8 01       	movw	r24, r16
     ca2:	08 96       	adiw	r24, 0x08	; 8
     ca4:	0e 94 18 0c 	call	0x1830	; 0x1830 <xTaskRemoveFromEventList>
     ca8:	81 11       	cpse	r24, r1
     caa:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	53 c0       	rjmp	.+166    	; 0xd5c <xQueueReceive+0x102>
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	89 2b       	or	r24, r25
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <xQueueReceive+0x6c>
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	4b c0       	rjmp	.+150    	; 0xd5c <xQueueReceive+0x102>
     cc6:	e1 10       	cpse	r14, r1
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <xQueueReceive+0x7c>
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskInternalSetTimeOutState>
     cd2:	ee 24       	eor	r14, r14
     cd4:	e3 94       	inc	r14
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vTaskSuspendAll>
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	0f 92       	push	r0
     ce4:	f8 01       	movw	r30, r16
     ce6:	85 8d       	ldd	r24, Z+29	; 0x1d
     ce8:	8f 3f       	cpi	r24, 0xFF	; 255
     cea:	09 f4       	brne	.+2      	; 0xcee <xQueueReceive+0x94>
     cec:	15 8e       	std	Z+29, r1	; 0x1d
     cee:	f8 01       	movw	r30, r16
     cf0:	86 8d       	ldd	r24, Z+30	; 0x1e
     cf2:	8f 3f       	cpi	r24, 0xFF	; 255
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <xQueueReceive+0x9e>
     cf6:	16 8e       	std	Z+30, r1	; 0x1e
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	be 01       	movw	r22, r28
     cfe:	6c 5f       	subi	r22, 0xFC	; 252
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCheckForTimeOut>
     d0a:	81 11       	cpse	r24, r1
     d0c:	1b c0       	rjmp	.+54     	; 0xd44 <xQueueReceive+0xea>
     d0e:	c8 01       	movw	r24, r16
     d10:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <prvIsQueueEmpty>
     d14:	88 23       	and	r24, r24
     d16:	81 f0       	breq	.+32     	; 0xd38 <xQueueReceive+0xde>
     d18:	6c 81       	ldd	r22, Y+4	; 0x04
     d1a:	7d 81       	ldd	r23, Y+5	; 0x05
     d1c:	c8 01       	movw	r24, r16
     d1e:	41 96       	adiw	r24, 0x11	; 17
     d20:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskPlaceOnEventList>
     d24:	c8 01       	movw	r24, r16
     d26:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
     d2a:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
     d2e:	81 11       	cpse	r24, r1
     d30:	a6 cf       	rjmp	.-180    	; 0xc7e <xQueueReceive+0x24>
     d32:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
     d36:	a3 cf       	rjmp	.-186    	; 0xc7e <xQueueReceive+0x24>
     d38:	c8 01       	movw	r24, r16
     d3a:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
     d3e:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
     d42:	9d cf       	rjmp	.-198    	; 0xc7e <xQueueReceive+0x24>
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
     d4a:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
     d4e:	c8 01       	movw	r24, r16
     d50:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <prvIsQueueEmpty>
     d54:	88 23       	and	r24, r24
     d56:	09 f4       	brne	.+2      	; 0xd5a <xQueueReceive+0x100>
     d58:	92 cf       	rjmp	.-220    	; 0xc7e <xQueueReceive+0x24>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	08 95       	ret

00000d78 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	0f 92       	push	r0
     d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d86:	8f 3f       	cpi	r24, 0xFF	; 255
     d88:	09 f4       	brne	.+2      	; 0xd8c <vQueueWaitForMessageRestricted+0x14>
     d8a:	1d 8e       	std	Y+29, r1	; 0x1d
     d8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d8e:	8f 3f       	cpi	r24, 0xFF	; 255
     d90:	09 f4       	brne	.+2      	; 0xd94 <vQueueWaitForMessageRestricted+0x1c>
     d92:	1e 8e       	std	Y+30, r1	; 0x1e
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d98:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d9a:	81 11       	cpse	r24, r1
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d9e:	ce 01       	movw	r24, r28
     da0:	41 96       	adiw	r24, 0x11	; 17
     da2:	0e 94 cf 0b 	call	0x179e	; 0x179e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 77 04 	call	0x8ee	; 0x8ee <prvUnlockQueue>
    }
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     db2:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <pxDelayedTaskList>
     db6:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <pxDelayedTaskList+0x1>
     dba:	80 81       	ld	r24, Z
     dbc:	81 11       	cpse	r24, r1
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <prvResetNextTaskUnblockTime+0x1c>
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	9f ef       	ldi	r25, 0xFF	; 255
     dc4:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <xNextTaskUnblockTime+0x1>
     dc8:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xNextTaskUnblockTime>
     dcc:	08 95       	ret
     dce:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <pxDelayedTaskList>
     dd2:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <pxDelayedTaskList+0x1>
     dd6:	05 80       	ldd	r0, Z+5	; 0x05
     dd8:	f6 81       	ldd	r31, Z+6	; 0x06
     dda:	e0 2d       	mov	r30, r0
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <xNextTaskUnblockTime+0x1>
     de4:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xNextTaskUnblockTime>
     de8:	08 95       	ret

00000dea <prvDeleteTCB>:
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ec 01       	movw	r28, r24
     df0:	8f 89       	ldd	r24, Y+23	; 0x17
     df2:	98 8d       	ldd	r25, Y+24	; 0x18
     df4:	0e 94 46 03 	call	0x68c	; 0x68c <vPortFree>
     df8:	ce 01       	movw	r24, r28
     dfa:	0e 94 46 03 	call	0x68c	; 0x68c <vPortFree>
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <prvInitialiseNewTask>:
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	4c 01       	movw	r8, r24
     e24:	d5 01       	movw	r26, r10
     e26:	57 96       	adiw	r26, 0x17	; 23
     e28:	8d 91       	ld	r24, X+
     e2a:	9c 91       	ld	r25, X
     e2c:	58 97       	sbiw	r26, 0x18	; 24
     e2e:	21 50       	subi	r18, 0x01	; 1
     e30:	31 09       	sbc	r19, r1
     e32:	3c 01       	movw	r6, r24
     e34:	62 0e       	add	r6, r18
     e36:	73 1e       	adc	r7, r19
     e38:	61 15       	cp	r22, r1
     e3a:	71 05       	cpc	r23, r1
     e3c:	89 f4       	brne	.+34     	; 0xe60 <prvInitialiseNewTask+0x5c>
     e3e:	16 c0       	rjmp	.+44     	; 0xe6c <prvInitialiseNewTask+0x68>
     e40:	82 2f       	mov	r24, r18
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	fb 01       	movw	r30, r22
     e46:	e8 0f       	add	r30, r24
     e48:	f9 1f       	adc	r31, r25
     e4a:	30 81       	ld	r19, Z
     e4c:	d5 01       	movw	r26, r10
     e4e:	a8 0f       	add	r26, r24
     e50:	b9 1f       	adc	r27, r25
     e52:	59 96       	adiw	r26, 0x19	; 25
     e54:	3c 93       	st	X, r19
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	29 f0       	breq	.+10     	; 0xe66 <prvInitialiseNewTask+0x62>
     e5c:	2f 5f       	subi	r18, 0xFF	; 255
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <prvInitialiseNewTask+0x5e>
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	28 30       	cpi	r18, 0x08	; 8
     e64:	68 f3       	brcs	.-38     	; 0xe40 <prvInitialiseNewTask+0x3c>
     e66:	f5 01       	movw	r30, r10
     e68:	10 a2       	std	Z+32, r1	; 0x20
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <prvInitialiseNewTask+0x6e>
     e6c:	d5 01       	movw	r26, r10
     e6e:	59 96       	adiw	r26, 0x19	; 25
     e70:	1c 92       	st	X, r1
     e72:	b3 e0       	ldi	r27, 0x03	; 3
     e74:	be 15       	cp	r27, r14
     e76:	20 f4       	brcc	.+8      	; 0xe80 <prvInitialiseNewTask+0x7c>
     e78:	0f 2e       	mov	r0, r31
     e7a:	f3 e0       	ldi	r31, 0x03	; 3
     e7c:	ef 2e       	mov	r14, r31
     e7e:	f0 2d       	mov	r31, r0
     e80:	f5 01       	movw	r30, r10
     e82:	e6 8a       	std	Z+22, r14	; 0x16
     e84:	e1 a2       	std	Z+33, r14	; 0x21
     e86:	12 a2       	std	Z+34, r1	; 0x22
     e88:	c5 01       	movw	r24, r10
     e8a:	02 96       	adiw	r24, 0x02	; 2
     e8c:	0e 94 87 03 	call	0x70e	; 0x70e <vListInitialiseItem>
     e90:	c5 01       	movw	r24, r10
     e92:	0c 96       	adiw	r24, 0x0c	; 12
     e94:	0e 94 87 03 	call	0x70e	; 0x70e <vListInitialiseItem>
     e98:	d5 01       	movw	r26, r10
     e9a:	19 96       	adiw	r26, 0x09	; 9
     e9c:	bc 92       	st	X, r11
     e9e:	ae 92       	st	-X, r10
     ea0:	18 97       	sbiw	r26, 0x08	; 8
     ea2:	84 e0       	ldi	r24, 0x04	; 4
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	8e 19       	sub	r24, r14
     ea8:	91 09       	sbc	r25, r1
     eaa:	1d 96       	adiw	r26, 0x0d	; 13
     eac:	9c 93       	st	X, r25
     eae:	8e 93       	st	-X, r24
     eb0:	1c 97       	sbiw	r26, 0x0c	; 12
     eb2:	53 96       	adiw	r26, 0x13	; 19
     eb4:	bc 92       	st	X, r11
     eb6:	ae 92       	st	-X, r10
     eb8:	52 97       	sbiw	r26, 0x12	; 18
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	f5 01       	movw	r30, r10
     ebe:	b3 96       	adiw	r30, 0x23	; 35
     ec0:	df 01       	movw	r26, r30
     ec2:	1d 92       	st	X+, r1
     ec4:	8a 95       	dec	r24
     ec6:	e9 f7       	brne	.-6      	; 0xec2 <prvInitialiseNewTask+0xbe>
     ec8:	f5 01       	movw	r30, r10
     eca:	17 a2       	std	Z+39, r1	; 0x27
     ecc:	a8 01       	movw	r20, r16
     ece:	b4 01       	movw	r22, r8
     ed0:	c3 01       	movw	r24, r6
     ed2:	0e 94 43 01 	call	0x286	; 0x286 <pxPortInitialiseStack>
     ed6:	d5 01       	movw	r26, r10
     ed8:	8d 93       	st	X+, r24
     eda:	9c 93       	st	X, r25
     edc:	c1 14       	cp	r12, r1
     ede:	d1 04       	cpc	r13, r1
     ee0:	19 f0       	breq	.+6      	; 0xee8 <prvInitialiseNewTask+0xe4>
     ee2:	f6 01       	movw	r30, r12
     ee4:	b1 82       	std	Z+1, r11	; 0x01
     ee6:	a0 82       	st	Z, r10
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	7f 90       	pop	r7
     f00:	6f 90       	pop	r6
     f02:	08 95       	ret

00000f04 <prvInitialiseTaskLists>:
     f04:	cf 93       	push	r28
     f06:	c0 e0       	ldi	r28, 0x00	; 0
     f08:	10 c0       	rjmp	.+32     	; 0xf2a <prvInitialiseTaskLists+0x26>
     f0a:	8c 2f       	mov	r24, r28
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9c 01       	movw	r18, r24
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	8a 5b       	subi	r24, 0xBA	; 186
     f22:	98 4f       	sbci	r25, 0xF8	; 248
     f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     f28:	cf 5f       	subi	r28, 0xFF	; 255
     f2a:	c4 30       	cpi	r28, 0x04	; 4
     f2c:	70 f3       	brcs	.-36     	; 0xf0a <prvInitialiseTaskLists+0x6>
     f2e:	8d e3       	ldi	r24, 0x3D	; 61
     f30:	97 e0       	ldi	r25, 0x07	; 7
     f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     f36:	84 e3       	ldi	r24, 0x34	; 52
     f38:	97 e0       	ldi	r25, 0x07	; 7
     f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     f3e:	87 e2       	ldi	r24, 0x27	; 39
     f40:	97 e0       	ldi	r25, 0x07	; 7
     f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     f46:	8e e1       	ldi	r24, 0x1E	; 30
     f48:	97 e0       	ldi	r25, 0x07	; 7
     f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     f4e:	84 e1       	ldi	r24, 0x14	; 20
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
     f56:	8d e3       	ldi	r24, 0x3D	; 61
     f58:	97 e0       	ldi	r25, 0x07	; 7
     f5a:	90 93 33 07 	sts	0x0733, r25	; 0x800733 <pxDelayedTaskList+0x1>
     f5e:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <pxDelayedTaskList>
     f62:	84 e3       	ldi	r24, 0x34	; 52
     f64:	97 e0       	ldi	r25, 0x07	; 7
     f66:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxOverflowDelayedTaskList+0x1>
     f6a:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxOverflowDelayedTaskList>
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <prvAddNewTaskToReadyList>:
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	0f 92       	push	r0
     f7e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxCurrentNumberOfTasks>
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <uxCurrentNumberOfTasks>
     f88:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <pxCurrentTCB>
     f8c:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     f90:	89 2b       	or	r24, r25
     f92:	59 f4       	brne	.+22     	; 0xfaa <prvAddNewTaskToReadyList+0x38>
     f94:	d0 93 6b 07 	sts	0x076B, r29	; 0x80076b <pxCurrentTCB+0x1>
     f98:	c0 93 6a 07 	sts	0x076A, r28	; 0x80076a <pxCurrentTCB>
     f9c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxCurrentNumberOfTasks>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	99 f4       	brne	.+38     	; 0xfca <prvAddNewTaskToReadyList+0x58>
     fa4:	0e 94 82 07 	call	0xf04	; 0xf04 <prvInitialiseTaskLists>
     fa8:	10 c0       	rjmp	.+32     	; 0xfca <prvAddNewTaskToReadyList+0x58>
     faa:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xSchedulerRunning>
     fae:	81 11       	cpse	r24, r1
     fb0:	0c c0       	rjmp	.+24     	; 0xfca <prvAddNewTaskToReadyList+0x58>
     fb2:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pxCurrentTCB>
     fb6:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
     fba:	96 89       	ldd	r25, Z+22	; 0x16
     fbc:	8e 89       	ldd	r24, Y+22	; 0x16
     fbe:	89 17       	cp	r24, r25
     fc0:	20 f0       	brcs	.+8      	; 0xfca <prvAddNewTaskToReadyList+0x58>
     fc2:	d0 93 6b 07 	sts	0x076B, r29	; 0x80076b <pxCurrentTCB+0x1>
     fc6:	c0 93 6a 07 	sts	0x076A, r28	; 0x80076a <pxCurrentTCB>
     fca:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTaskNumber>
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTaskNumber>
     fd4:	8e 89       	ldd	r24, Y+22	; 0x16
     fd6:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
     fda:	98 17       	cp	r25, r24
     fdc:	10 f4       	brcc	.+4      	; 0xfe2 <prvAddNewTaskToReadyList+0x70>
     fde:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	8e 0f       	add	r24, r30
     ff4:	9f 1f       	adc	r25, r31
     ff6:	fc 01       	movw	r30, r24
     ff8:	ea 5b       	subi	r30, 0xBA	; 186
     ffa:	f8 4f       	sbci	r31, 0xF8	; 248
     ffc:	01 80       	ldd	r0, Z+1	; 0x01
     ffe:	f2 81       	ldd	r31, Z+2	; 0x02
    1000:	e0 2d       	mov	r30, r0
    1002:	fd 83       	std	Y+5, r31	; 0x05
    1004:	ec 83       	std	Y+4, r30	; 0x04
    1006:	84 81       	ldd	r24, Z+4	; 0x04
    1008:	95 81       	ldd	r25, Z+5	; 0x05
    100a:	9f 83       	std	Y+7, r25	; 0x07
    100c:	8e 83       	std	Y+6, r24	; 0x06
    100e:	a4 81       	ldd	r26, Z+4	; 0x04
    1010:	b5 81       	ldd	r27, Z+5	; 0x05
    1012:	ce 01       	movw	r24, r28
    1014:	02 96       	adiw	r24, 0x02	; 2
    1016:	13 96       	adiw	r26, 0x03	; 3
    1018:	9c 93       	st	X, r25
    101a:	8e 93       	st	-X, r24
    101c:	12 97       	sbiw	r26, 0x02	; 2
    101e:	95 83       	std	Z+5, r25	; 0x05
    1020:	84 83       	std	Z+4, r24	; 0x04
    1022:	ee 89       	ldd	r30, Y+22	; 0x16
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	cf 01       	movw	r24, r30
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	ea 5b       	subi	r30, 0xBA	; 186
    103a:	f8 4f       	sbci	r31, 0xF8	; 248
    103c:	fb 87       	std	Y+11, r31	; 0x0b
    103e:	ea 87       	std	Y+10, r30	; 0x0a
    1040:	80 81       	ld	r24, Z
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 83       	st	Z, r24
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xSchedulerRunning>
    104e:	88 23       	and	r24, r24
    1050:	51 f0       	breq	.+20     	; 0x1066 <prvAddNewTaskToReadyList+0xf4>
    1052:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pxCurrentTCB>
    1056:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    105a:	96 89       	ldd	r25, Z+22	; 0x16
    105c:	8e 89       	ldd	r24, Y+22	; 0x16
    105e:	98 17       	cp	r25, r24
    1060:	10 f4       	brcc	.+4      	; 0x1066 <prvAddNewTaskToReadyList+0xf4>
    1062:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	08 95       	ret

0000106c <prvCheckTasksWaitingTermination>:
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	1c c0       	rjmp	.+56     	; 0x10aa <prvCheckTasksWaitingTermination+0x3e>
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	0f 92       	push	r0
    1078:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <xTasksWaitingTermination+0x5>
    107c:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <xTasksWaitingTermination+0x6>
    1080:	c6 81       	ldd	r28, Z+6	; 0x06
    1082:	d7 81       	ldd	r29, Z+7	; 0x07
    1084:	ce 01       	movw	r24, r28
    1086:	02 96       	adiw	r24, 0x02	; 2
    1088:	0e 94 bc 03 	call	0x778	; 0x778 <uxListRemove>
    108c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxCurrentNumberOfTasks>
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <uxCurrentNumberOfTasks>
    1096:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxDeletedTasksWaitingCleanUp>
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <uxDeletedTasksWaitingCleanUp>
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 f5 06 	call	0xdea	; 0xdea <prvDeleteTCB>
    10aa:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <uxDeletedTasksWaitingCleanUp>
    10ae:	81 11       	cpse	r24, r1
    10b0:	e0 cf       	rjmp	.-64     	; 0x1072 <prvCheckTasksWaitingTermination+0x6>
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <prvIdleTask>:
    10b8:	0e 94 36 08 	call	0x106c	; 0x106c <prvCheckTasksWaitingTermination>
    10bc:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <pxReadyTasksLists>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	d0 f3       	brcs	.-12     	; 0x10b8 <prvIdleTask>
    10c4:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
    10c8:	f7 cf       	rjmp	.-18     	; 0x10b8 <prvIdleTask>

000010ca <prvAddCurrentTaskToDelayedList>:
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
    10d6:	f6 2e       	mov	r15, r22
    10d8:	00 91 11 07 	lds	r16, 0x0711	; 0x800711 <xTickCount>
    10dc:	10 91 12 07 	lds	r17, 0x0712	; 0x800712 <xTickCount+0x1>
    10e0:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <pxCurrentTCB>
    10e4:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    10e8:	02 96       	adiw	r24, 0x02	; 2
    10ea:	0e 94 bc 03 	call	0x778	; 0x778 <uxListRemove>
    10ee:	cf 3f       	cpi	r28, 0xFF	; 255
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	d8 07       	cpc	r29, r24
    10f4:	b1 f5       	brne	.+108    	; 0x1162 <prvAddCurrentTaskToDelayedList+0x98>
    10f6:	ff 20       	and	r15, r15
    10f8:	a1 f1       	breq	.+104    	; 0x1162 <prvAddCurrentTaskToDelayedList+0x98>
    10fa:	e4 e1       	ldi	r30, 0x14	; 20
    10fc:	f7 e0       	ldi	r31, 0x07	; 7
    10fe:	a1 81       	ldd	r26, Z+1	; 0x01
    1100:	b2 81       	ldd	r27, Z+2	; 0x02
    1102:	c0 91 6a 07 	lds	r28, 0x076A	; 0x80076a <pxCurrentTCB>
    1106:	d0 91 6b 07 	lds	r29, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    110a:	bd 83       	std	Y+5, r27	; 0x05
    110c:	ac 83       	std	Y+4, r26	; 0x04
    110e:	c0 91 6a 07 	lds	r28, 0x076A	; 0x80076a <pxCurrentTCB>
    1112:	d0 91 6b 07 	lds	r29, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1116:	14 96       	adiw	r26, 0x04	; 4
    1118:	8d 91       	ld	r24, X+
    111a:	9c 91       	ld	r25, X
    111c:	15 97       	sbiw	r26, 0x05	; 5
    111e:	9f 83       	std	Y+7, r25	; 0x07
    1120:	8e 83       	std	Y+6, r24	; 0x06
    1122:	14 96       	adiw	r26, 0x04	; 4
    1124:	cd 91       	ld	r28, X+
    1126:	dc 91       	ld	r29, X
    1128:	15 97       	sbiw	r26, 0x05	; 5
    112a:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <pxCurrentTCB>
    112e:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1132:	02 96       	adiw	r24, 0x02	; 2
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <pxCurrentTCB>
    113c:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1140:	02 96       	adiw	r24, 0x02	; 2
    1142:	15 96       	adiw	r26, 0x05	; 5
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	14 97       	sbiw	r26, 0x04	; 4
    114a:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
    114e:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1152:	1b 96       	adiw	r26, 0x0b	; 11
    1154:	fc 93       	st	X, r31
    1156:	ee 93       	st	-X, r30
    1158:	1a 97       	sbiw	r26, 0x0a	; 10
    115a:	80 81       	ld	r24, Z
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	80 83       	st	Z, r24
    1160:	2f c0       	rjmp	.+94     	; 0x11c0 <prvAddCurrentTaskToDelayedList+0xf6>
    1162:	c0 0f       	add	r28, r16
    1164:	d1 1f       	adc	r29, r17
    1166:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pxCurrentTCB>
    116a:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    116e:	d3 83       	std	Z+3, r29	; 0x03
    1170:	c2 83       	std	Z+2, r28	; 0x02
    1172:	c0 17       	cp	r28, r16
    1174:	d1 07       	cpc	r29, r17
    1176:	68 f4       	brcc	.+26     	; 0x1192 <prvAddCurrentTaskToDelayedList+0xc8>
    1178:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <pxCurrentTCB>
    117c:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1180:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <pxOverflowDelayedTaskList>
    1184:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <pxOverflowDelayedTaskList+0x1>
    1188:	6e 5f       	subi	r22, 0xFE	; 254
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	0e 94 8b 03 	call	0x716	; 0x716 <vListInsert>
    1190:	17 c0       	rjmp	.+46     	; 0x11c0 <prvAddCurrentTaskToDelayedList+0xf6>
    1192:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <pxCurrentTCB>
    1196:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    119a:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <pxDelayedTaskList>
    119e:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <pxDelayedTaskList+0x1>
    11a2:	6e 5f       	subi	r22, 0xFE	; 254
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	0e 94 8b 03 	call	0x716	; 0x716 <vListInsert>
    11aa:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xNextTaskUnblockTime>
    11ae:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xNextTaskUnblockTime+0x1>
    11b2:	c8 17       	cp	r28, r24
    11b4:	d9 07       	cpc	r29, r25
    11b6:	20 f4       	brcc	.+8      	; 0x11c0 <prvAddCurrentTaskToDelayedList+0xf6>
    11b8:	d0 93 09 07 	sts	0x0709, r29	; 0x800709 <xNextTaskUnblockTime+0x1>
    11bc:	c0 93 08 07 	sts	0x0708, r28	; 0x800708 <xNextTaskUnblockTime>
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	08 95       	ret

000011cc <xTaskCreate>:
    11cc:	2f 92       	push	r2
    11ce:	3f 92       	push	r3
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	3c 01       	movw	r6, r24
    11f2:	1b 01       	movw	r2, r22
    11f4:	5a 01       	movw	r10, r20
    11f6:	29 01       	movw	r4, r18
    11f8:	ca 01       	movw	r24, r20
    11fa:	0e 94 b1 02 	call	0x562	; 0x562 <pvPortMalloc>
    11fe:	6c 01       	movw	r12, r24
    1200:	89 2b       	or	r24, r25
    1202:	71 f0       	breq	.+28     	; 0x1220 <xTaskCreate+0x54>
    1204:	88 e2       	ldi	r24, 0x28	; 40
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 b1 02 	call	0x562	; 0x562 <pvPortMalloc>
    120c:	ec 01       	movw	r28, r24
    120e:	89 2b       	or	r24, r25
    1210:	19 f0       	breq	.+6      	; 0x1218 <xTaskCreate+0x4c>
    1212:	d8 8e       	std	Y+24, r13	; 0x18
    1214:	cf 8a       	std	Y+23, r12	; 0x17
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <xTaskCreate+0x58>
    1218:	c6 01       	movw	r24, r12
    121a:	0e 94 46 03 	call	0x68c	; 0x68c <vPortFree>
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <xTaskCreate+0x58>
    1220:	c0 e0       	ldi	r28, 0x00	; 0
    1222:	d0 e0       	ldi	r29, 0x00	; 0
    1224:	20 97       	sbiw	r28, 0x00	; 0
    1226:	91 f0       	breq	.+36     	; 0x124c <xTaskCreate+0x80>
    1228:	95 01       	movw	r18, r10
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	81 2c       	mov	r8, r1
    1230:	91 2c       	mov	r9, r1
    1232:	5e 01       	movw	r10, r28
    1234:	67 01       	movw	r12, r14
    1236:	e0 2e       	mov	r14, r16
    1238:	82 01       	movw	r16, r4
    123a:	b1 01       	movw	r22, r2
    123c:	c3 01       	movw	r24, r6
    123e:	0e 94 02 07 	call	0xe04	; 0xe04 <prvInitialiseNewTask>
    1242:	ce 01       	movw	r24, r28
    1244:	0e 94 b9 07 	call	0xf72	; 0xf72 <prvAddNewTaskToReadyList>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <xTaskCreate+0x82>
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	7f 90       	pop	r7
    1268:	6f 90       	pop	r6
    126a:	5f 90       	pop	r5
    126c:	4f 90       	pop	r4
    126e:	3f 90       	pop	r3
    1270:	2f 90       	pop	r2
    1272:	08 95       	ret

00001274 <vTaskStartScheduler>:
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	0f 2e       	mov	r0, r31
    127c:	f6 e0       	ldi	r31, 0x06	; 6
    127e:	ef 2e       	mov	r14, r31
    1280:	f7 e0       	ldi	r31, 0x07	; 7
    1282:	ff 2e       	mov	r15, r31
    1284:	f0 2d       	mov	r31, r0
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	45 e5       	ldi	r20, 0x55	; 85
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	71 e0       	ldi	r23, 0x01	; 1
    1294:	8c e5       	ldi	r24, 0x5C	; 92
    1296:	98 e0       	ldi	r25, 0x08	; 8
    1298:	0e 94 e6 08 	call	0x11cc	; 0x11cc <xTaskCreate>
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	11 f4       	brne	.+4      	; 0x12a4 <vTaskStartScheduler+0x30>
    12a0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <xTimerCreateTimerTask>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	81 f4       	brne	.+32     	; 0x12c8 <vTaskStartScheduler+0x54>
    12a8:	f8 94       	cli
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
    12ae:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <xNextTaskUnblockTime+0x1>
    12b2:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xNextTaskUnblockTime>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <xSchedulerRunning>
    12bc:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <xTickCount+0x1>
    12c0:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <xTickCount>
    12c4:	0e 94 af 01 	call	0x35e	; 0x35e <xPortStartScheduler>
    12c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <uxTopUsedPriority>
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	08 95       	ret

000012d4 <vTaskSuspendAll>:
    12d4:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxSchedulerSuspended>
    12de:	08 95       	ret

000012e0 <xTaskGetTickCount>:
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	0f 92       	push	r0
    12e6:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xTickCount>
    12ea:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <xTickCount+0x1>
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	08 95       	ret

000012f4 <xTaskIncrementTick>:
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    1300:	81 11       	cpse	r24, r1
    1302:	01 c1       	rjmp	.+514    	; 0x1506 <xTaskIncrementTick+0x212>
    1304:	c0 91 11 07 	lds	r28, 0x0711	; 0x800711 <xTickCount>
    1308:	d0 91 12 07 	lds	r29, 0x0712	; 0x800712 <xTickCount+0x1>
    130c:	8e 01       	movw	r16, r28
    130e:	0f 5f       	subi	r16, 0xFF	; 255
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	10 93 12 07 	sts	0x0712, r17	; 0x800712 <xTickCount+0x1>
    1316:	00 93 11 07 	sts	0x0711, r16	; 0x800711 <xTickCount>
    131a:	01 15       	cp	r16, r1
    131c:	11 05       	cpc	r17, r1
    131e:	b9 f4       	brne	.+46     	; 0x134e <xTaskIncrementTick+0x5a>
    1320:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <pxDelayedTaskList>
    1324:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <pxDelayedTaskList+0x1>
    1328:	20 91 30 07 	lds	r18, 0x0730	; 0x800730 <pxOverflowDelayedTaskList>
    132c:	30 91 31 07 	lds	r19, 0x0731	; 0x800731 <pxOverflowDelayedTaskList+0x1>
    1330:	30 93 33 07 	sts	0x0733, r19	; 0x800733 <pxDelayedTaskList+0x1>
    1334:	20 93 32 07 	sts	0x0732, r18	; 0x800732 <pxDelayedTaskList>
    1338:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <pxOverflowDelayedTaskList+0x1>
    133c:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <pxOverflowDelayedTaskList>
    1340:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <xNumOfOverflows>
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <xNumOfOverflows>
    134a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <prvResetNextTaskUnblockTime>
    134e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xNextTaskUnblockTime>
    1352:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xNextTaskUnblockTime+0x1>
    1356:	08 17       	cp	r16, r24
    1358:	19 07       	cpc	r17, r25
    135a:	20 f4       	brcc	.+8      	; 0x1364 <xTaskIncrementTick+0x70>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	b8 c0       	rjmp	.+368    	; 0x14d0 <xTaskIncrementTick+0x1dc>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <xTaskIncrementTick+0x72>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <pxDelayedTaskList>
    136a:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <pxDelayedTaskList+0x1>
    136e:	90 81       	ld	r25, Z
    1370:	91 11       	cpse	r25, r1
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <xTaskIncrementTick+0x8e>
    1374:	2f ef       	ldi	r18, 0xFF	; 255
    1376:	3f ef       	ldi	r19, 0xFF	; 255
    1378:	30 93 09 07 	sts	0x0709, r19	; 0x800709 <xNextTaskUnblockTime+0x1>
    137c:	20 93 08 07 	sts	0x0708, r18	; 0x800708 <xNextTaskUnblockTime>
    1380:	a7 c0       	rjmp	.+334    	; 0x14d0 <xTaskIncrementTick+0x1dc>
    1382:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <pxDelayedTaskList>
    1386:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <pxDelayedTaskList+0x1>
    138a:	05 80       	ldd	r0, Z+5	; 0x05
    138c:	f6 81       	ldd	r31, Z+6	; 0x06
    138e:	e0 2d       	mov	r30, r0
    1390:	06 80       	ldd	r0, Z+6	; 0x06
    1392:	f7 81       	ldd	r31, Z+7	; 0x07
    1394:	e0 2d       	mov	r30, r0
    1396:	22 81       	ldd	r18, Z+2	; 0x02
    1398:	33 81       	ldd	r19, Z+3	; 0x03
    139a:	02 17       	cp	r16, r18
    139c:	13 07       	cpc	r17, r19
    139e:	28 f4       	brcc	.+10     	; 0x13aa <xTaskIncrementTick+0xb6>
    13a0:	30 93 09 07 	sts	0x0709, r19	; 0x800709 <xNextTaskUnblockTime+0x1>
    13a4:	20 93 08 07 	sts	0x0708, r18	; 0x800708 <xNextTaskUnblockTime>
    13a8:	93 c0       	rjmp	.+294    	; 0x14d0 <xTaskIncrementTick+0x1dc>
    13aa:	a2 85       	ldd	r26, Z+10	; 0x0a
    13ac:	b3 85       	ldd	r27, Z+11	; 0x0b
    13ae:	24 81       	ldd	r18, Z+4	; 0x04
    13b0:	35 81       	ldd	r19, Z+5	; 0x05
    13b2:	46 81       	ldd	r20, Z+6	; 0x06
    13b4:	57 81       	ldd	r21, Z+7	; 0x07
    13b6:	e9 01       	movw	r28, r18
    13b8:	5d 83       	std	Y+5, r21	; 0x05
    13ba:	4c 83       	std	Y+4, r20	; 0x04
    13bc:	26 81       	ldd	r18, Z+6	; 0x06
    13be:	37 81       	ldd	r19, Z+7	; 0x07
    13c0:	44 81       	ldd	r20, Z+4	; 0x04
    13c2:	55 81       	ldd	r21, Z+5	; 0x05
    13c4:	e9 01       	movw	r28, r18
    13c6:	5b 83       	std	Y+3, r21	; 0x03
    13c8:	4a 83       	std	Y+2, r20	; 0x02
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	2d 91       	ld	r18, X+
    13ce:	3c 91       	ld	r19, X
    13d0:	12 97       	sbiw	r26, 0x02	; 2
    13d2:	af 01       	movw	r20, r30
    13d4:	4e 5f       	subi	r20, 0xFE	; 254
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	24 17       	cp	r18, r20
    13da:	35 07       	cpc	r19, r21
    13dc:	31 f4       	brne	.+12     	; 0x13ea <xTaskIncrementTick+0xf6>
    13de:	26 81       	ldd	r18, Z+6	; 0x06
    13e0:	37 81       	ldd	r19, Z+7	; 0x07
    13e2:	12 96       	adiw	r26, 0x02	; 2
    13e4:	3c 93       	st	X, r19
    13e6:	2e 93       	st	-X, r18
    13e8:	11 97       	sbiw	r26, 0x01	; 1
    13ea:	13 86       	std	Z+11, r1	; 0x0b
    13ec:	12 86       	std	Z+10, r1	; 0x0a
    13ee:	9c 91       	ld	r25, X
    13f0:	91 50       	subi	r25, 0x01	; 1
    13f2:	9c 93       	st	X, r25
    13f4:	a4 89       	ldd	r26, Z+20	; 0x14
    13f6:	b5 89       	ldd	r27, Z+21	; 0x15
    13f8:	10 97       	sbiw	r26, 0x00	; 0
    13fa:	19 f1       	breq	.+70     	; 0x1442 <xTaskIncrementTick+0x14e>
    13fc:	26 85       	ldd	r18, Z+14	; 0x0e
    13fe:	37 85       	ldd	r19, Z+15	; 0x0f
    1400:	60 89       	ldd	r22, Z+16	; 0x10
    1402:	71 89       	ldd	r23, Z+17	; 0x11
    1404:	e9 01       	movw	r28, r18
    1406:	7d 83       	std	Y+5, r23	; 0x05
    1408:	6c 83       	std	Y+4, r22	; 0x04
    140a:	20 89       	ldd	r18, Z+16	; 0x10
    140c:	31 89       	ldd	r19, Z+17	; 0x11
    140e:	66 85       	ldd	r22, Z+14	; 0x0e
    1410:	77 85       	ldd	r23, Z+15	; 0x0f
    1412:	e9 01       	movw	r28, r18
    1414:	7b 83       	std	Y+3, r23	; 0x03
    1416:	6a 83       	std	Y+2, r22	; 0x02
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	6d 91       	ld	r22, X+
    141c:	7c 91       	ld	r23, X
    141e:	12 97       	sbiw	r26, 0x02	; 2
    1420:	9f 01       	movw	r18, r30
    1422:	24 5f       	subi	r18, 0xF4	; 244
    1424:	3f 4f       	sbci	r19, 0xFF	; 255
    1426:	62 17       	cp	r22, r18
    1428:	73 07       	cpc	r23, r19
    142a:	31 f4       	brne	.+12     	; 0x1438 <xTaskIncrementTick+0x144>
    142c:	20 89       	ldd	r18, Z+16	; 0x10
    142e:	31 89       	ldd	r19, Z+17	; 0x11
    1430:	12 96       	adiw	r26, 0x02	; 2
    1432:	3c 93       	st	X, r19
    1434:	2e 93       	st	-X, r18
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	15 8a       	std	Z+21, r1	; 0x15
    143a:	14 8a       	std	Z+20, r1	; 0x14
    143c:	9c 91       	ld	r25, X
    143e:	91 50       	subi	r25, 0x01	; 1
    1440:	9c 93       	st	X, r25
    1442:	26 89       	ldd	r18, Z+22	; 0x16
    1444:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
    1448:	92 17       	cp	r25, r18
    144a:	10 f4       	brcc	.+4      	; 0x1450 <xTaskIncrementTick+0x15c>
    144c:	20 93 10 07 	sts	0x0710, r18	; 0x800710 <uxTopReadyPriority>
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	d9 01       	movw	r26, r18
    1454:	aa 0f       	add	r26, r26
    1456:	bb 1f       	adc	r27, r27
    1458:	aa 0f       	add	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	aa 0f       	add	r26, r26
    145e:	bb 1f       	adc	r27, r27
    1460:	2a 0f       	add	r18, r26
    1462:	3b 1f       	adc	r19, r27
    1464:	d9 01       	movw	r26, r18
    1466:	aa 5b       	subi	r26, 0xBA	; 186
    1468:	b8 4f       	sbci	r27, 0xF8	; 248
    146a:	11 96       	adiw	r26, 0x01	; 1
    146c:	0d 90       	ld	r0, X+
    146e:	bc 91       	ld	r27, X
    1470:	a0 2d       	mov	r26, r0
    1472:	b5 83       	std	Z+5, r27	; 0x05
    1474:	a4 83       	std	Z+4, r26	; 0x04
    1476:	14 96       	adiw	r26, 0x04	; 4
    1478:	2d 91       	ld	r18, X+
    147a:	3c 91       	ld	r19, X
    147c:	15 97       	sbiw	r26, 0x05	; 5
    147e:	37 83       	std	Z+7, r19	; 0x07
    1480:	26 83       	std	Z+6, r18	; 0x06
    1482:	14 96       	adiw	r26, 0x04	; 4
    1484:	2d 91       	ld	r18, X+
    1486:	3c 91       	ld	r19, X
    1488:	15 97       	sbiw	r26, 0x05	; 5
    148a:	e9 01       	movw	r28, r18
    148c:	5b 83       	std	Y+3, r21	; 0x03
    148e:	4a 83       	std	Y+2, r20	; 0x02
    1490:	15 96       	adiw	r26, 0x05	; 5
    1492:	5c 93       	st	X, r21
    1494:	4e 93       	st	-X, r20
    1496:	14 97       	sbiw	r26, 0x04	; 4
    1498:	a6 89       	ldd	r26, Z+22	; 0x16
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	9d 01       	movw	r18, r26
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	a2 0f       	add	r26, r18
    14ac:	b3 1f       	adc	r27, r19
    14ae:	aa 5b       	subi	r26, 0xBA	; 186
    14b0:	b8 4f       	sbci	r27, 0xF8	; 248
    14b2:	b3 87       	std	Z+11, r27	; 0x0b
    14b4:	a2 87       	std	Z+10, r26	; 0x0a
    14b6:	9c 91       	ld	r25, X
    14b8:	9f 5f       	subi	r25, 0xFF	; 255
    14ba:	9c 93       	st	X, r25
    14bc:	26 89       	ldd	r18, Z+22	; 0x16
    14be:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pxCurrentTCB>
    14c2:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    14c6:	96 89       	ldd	r25, Z+22	; 0x16
    14c8:	29 17       	cp	r18, r25
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <xTaskIncrementTick+0x1da>
    14cc:	49 cf       	rjmp	.-366    	; 0x1360 <xTaskIncrementTick+0x6c>
    14ce:	4b cf       	rjmp	.-362    	; 0x1366 <xTaskIncrementTick+0x72>
    14d0:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pxCurrentTCB>
    14d4:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    14d8:	26 89       	ldd	r18, Z+22	; 0x16
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	f9 01       	movw	r30, r18
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	2e 0f       	add	r18, r30
    14ec:	3f 1f       	adc	r19, r31
    14ee:	f9 01       	movw	r30, r18
    14f0:	ea 5b       	subi	r30, 0xBA	; 186
    14f2:	f8 4f       	sbci	r31, 0xF8	; 248
    14f4:	90 81       	ld	r25, Z
    14f6:	92 30       	cpi	r25, 0x02	; 2
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <xTaskIncrementTick+0x208>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <xYieldPending>
    1500:	91 11       	cpse	r25, r1
    1502:	0c c0       	rjmp	.+24     	; 0x151c <xTaskIncrementTick+0x228>
    1504:	0c c0       	rjmp	.+24     	; 0x151e <xTaskIncrementTick+0x22a>
    1506:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <xPendedTicks>
    150a:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <xPendedTicks+0x1>
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	90 93 0e 07 	sts	0x070E, r25	; 0x80070e <xPendedTicks+0x1>
    1514:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <xPendedTicks>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	01 c0       	rjmp	.+2      	; 0x151e <xTaskIncrementTick+0x22a>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	08 95       	ret

00001528 <xTaskResumeAll>:
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	0f 92       	push	r0
    1532:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    1536:	81 50       	subi	r24, 0x01	; 1
    1538:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <uxSchedulerSuspended>
    153c:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    1540:	81 11       	cpse	r24, r1
    1542:	bf c0       	rjmp	.+382    	; 0x16c2 <xTaskResumeAll+0x19a>
    1544:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <uxCurrentNumberOfTasks>
    1548:	81 11       	cpse	r24, r1
    154a:	96 c0       	rjmp	.+300    	; 0x1678 <xTaskResumeAll+0x150>
    154c:	bd c0       	rjmp	.+378    	; 0x16c8 <xTaskResumeAll+0x1a0>
    154e:	e0 91 2c 07 	lds	r30, 0x072C	; 0x80072c <xPendingReadyList+0x5>
    1552:	f0 91 2d 07 	lds	r31, 0x072D	; 0x80072d <xPendingReadyList+0x6>
    1556:	06 80       	ldd	r0, Z+6	; 0x06
    1558:	f7 81       	ldd	r31, Z+7	; 0x07
    155a:	e0 2d       	mov	r30, r0
    155c:	a4 89       	ldd	r26, Z+20	; 0x14
    155e:	b5 89       	ldd	r27, Z+21	; 0x15
    1560:	c6 85       	ldd	r28, Z+14	; 0x0e
    1562:	d7 85       	ldd	r29, Z+15	; 0x0f
    1564:	80 89       	ldd	r24, Z+16	; 0x10
    1566:	91 89       	ldd	r25, Z+17	; 0x11
    1568:	9d 83       	std	Y+5, r25	; 0x05
    156a:	8c 83       	std	Y+4, r24	; 0x04
    156c:	c0 89       	ldd	r28, Z+16	; 0x10
    156e:	d1 89       	ldd	r29, Z+17	; 0x11
    1570:	86 85       	ldd	r24, Z+14	; 0x0e
    1572:	97 85       	ldd	r25, Z+15	; 0x0f
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	11 96       	adiw	r26, 0x01	; 1
    157a:	2d 91       	ld	r18, X+
    157c:	3c 91       	ld	r19, X
    157e:	12 97       	sbiw	r26, 0x02	; 2
    1580:	cf 01       	movw	r24, r30
    1582:	0c 96       	adiw	r24, 0x0c	; 12
    1584:	28 17       	cp	r18, r24
    1586:	39 07       	cpc	r19, r25
    1588:	31 f4       	brne	.+12     	; 0x1596 <xTaskResumeAll+0x6e>
    158a:	80 89       	ldd	r24, Z+16	; 0x10
    158c:	91 89       	ldd	r25, Z+17	; 0x11
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	9c 93       	st	X, r25
    1592:	8e 93       	st	-X, r24
    1594:	11 97       	sbiw	r26, 0x01	; 1
    1596:	15 8a       	std	Z+21, r1	; 0x15
    1598:	14 8a       	std	Z+20, r1	; 0x14
    159a:	8c 91       	ld	r24, X
    159c:	81 50       	subi	r24, 0x01	; 1
    159e:	8c 93       	st	X, r24
    15a0:	a2 85       	ldd	r26, Z+10	; 0x0a
    15a2:	b3 85       	ldd	r27, Z+11	; 0x0b
    15a4:	c4 81       	ldd	r28, Z+4	; 0x04
    15a6:	d5 81       	ldd	r29, Z+5	; 0x05
    15a8:	86 81       	ldd	r24, Z+6	; 0x06
    15aa:	97 81       	ldd	r25, Z+7	; 0x07
    15ac:	9d 83       	std	Y+5, r25	; 0x05
    15ae:	8c 83       	std	Y+4, r24	; 0x04
    15b0:	c6 81       	ldd	r28, Z+6	; 0x06
    15b2:	d7 81       	ldd	r29, Z+7	; 0x07
    15b4:	84 81       	ldd	r24, Z+4	; 0x04
    15b6:	95 81       	ldd	r25, Z+5	; 0x05
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	8d 91       	ld	r24, X+
    15c0:	9c 91       	ld	r25, X
    15c2:	12 97       	sbiw	r26, 0x02	; 2
    15c4:	9f 01       	movw	r18, r30
    15c6:	2e 5f       	subi	r18, 0xFE	; 254
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	82 17       	cp	r24, r18
    15cc:	93 07       	cpc	r25, r19
    15ce:	31 f4       	brne	.+12     	; 0x15dc <xTaskResumeAll+0xb4>
    15d0:	86 81       	ldd	r24, Z+6	; 0x06
    15d2:	97 81       	ldd	r25, Z+7	; 0x07
    15d4:	12 96       	adiw	r26, 0x02	; 2
    15d6:	9c 93       	st	X, r25
    15d8:	8e 93       	st	-X, r24
    15da:	11 97       	sbiw	r26, 0x01	; 1
    15dc:	13 86       	std	Z+11, r1	; 0x0b
    15de:	12 86       	std	Z+10, r1	; 0x0a
    15e0:	8c 91       	ld	r24, X
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	8c 93       	st	X, r24
    15e6:	86 89       	ldd	r24, Z+22	; 0x16
    15e8:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
    15ec:	98 17       	cp	r25, r24
    15ee:	10 f4       	brcc	.+4      	; 0x15f4 <xTaskResumeAll+0xcc>
    15f0:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	dc 01       	movw	r26, r24
    15f8:	aa 0f       	add	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	aa 0f       	add	r26, r26
    15fe:	bb 1f       	adc	r27, r27
    1600:	aa 0f       	add	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	8a 0f       	add	r24, r26
    1606:	9b 1f       	adc	r25, r27
    1608:	dc 01       	movw	r26, r24
    160a:	aa 5b       	subi	r26, 0xBA	; 186
    160c:	b8 4f       	sbci	r27, 0xF8	; 248
    160e:	11 96       	adiw	r26, 0x01	; 1
    1610:	0d 90       	ld	r0, X+
    1612:	bc 91       	ld	r27, X
    1614:	a0 2d       	mov	r26, r0
    1616:	b5 83       	std	Z+5, r27	; 0x05
    1618:	a4 83       	std	Z+4, r26	; 0x04
    161a:	14 96       	adiw	r26, 0x04	; 4
    161c:	8d 91       	ld	r24, X+
    161e:	9c 91       	ld	r25, X
    1620:	15 97       	sbiw	r26, 0x05	; 5
    1622:	97 83       	std	Z+7, r25	; 0x07
    1624:	86 83       	std	Z+6, r24	; 0x06
    1626:	14 96       	adiw	r26, 0x04	; 4
    1628:	cd 91       	ld	r28, X+
    162a:	dc 91       	ld	r29, X
    162c:	15 97       	sbiw	r26, 0x05	; 5
    162e:	3b 83       	std	Y+3, r19	; 0x03
    1630:	2a 83       	std	Y+2, r18	; 0x02
    1632:	15 96       	adiw	r26, 0x05	; 5
    1634:	3c 93       	st	X, r19
    1636:	2e 93       	st	-X, r18
    1638:	14 97       	sbiw	r26, 0x04	; 4
    163a:	a6 89       	ldd	r26, Z+22	; 0x16
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	cd 01       	movw	r24, r26
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	a8 0f       	add	r26, r24
    164e:	b9 1f       	adc	r27, r25
    1650:	aa 5b       	subi	r26, 0xBA	; 186
    1652:	b8 4f       	sbci	r27, 0xF8	; 248
    1654:	b3 87       	std	Z+11, r27	; 0x0b
    1656:	a2 87       	std	Z+10, r26	; 0x0a
    1658:	8c 91       	ld	r24, X
    165a:	8f 5f       	subi	r24, 0xFF	; 255
    165c:	8c 93       	st	X, r24
    165e:	96 89       	ldd	r25, Z+22	; 0x16
    1660:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
    1664:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1668:	56 96       	adiw	r26, 0x16	; 22
    166a:	8c 91       	ld	r24, X
    166c:	98 17       	cp	r25, r24
    166e:	30 f0       	brcs	.+12     	; 0x167c <xTaskResumeAll+0x154>
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xYieldPending>
    1676:	02 c0       	rjmp	.+4      	; 0x167c <xTaskResumeAll+0x154>
    1678:	e0 e0       	ldi	r30, 0x00	; 0
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <xPendingReadyList>
    1680:	81 11       	cpse	r24, r1
    1682:	65 cf       	rjmp	.-310    	; 0x154e <xTaskResumeAll+0x26>
    1684:	ef 2b       	or	r30, r31
    1686:	11 f0       	breq	.+4      	; 0x168c <xTaskResumeAll+0x164>
    1688:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <prvResetNextTaskUnblockTime>
    168c:	c0 91 0d 07 	lds	r28, 0x070D	; 0x80070d <xPendedTicks>
    1690:	d0 91 0e 07 	lds	r29, 0x070E	; 0x80070e <xPendedTicks+0x1>
    1694:	20 97       	sbiw	r28, 0x00	; 0
    1696:	69 f0       	breq	.+26     	; 0x16b2 <xTaskResumeAll+0x18a>
    1698:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <xTaskIncrementTick>
    169c:	88 23       	and	r24, r24
    169e:	19 f0       	breq	.+6      	; 0x16a6 <xTaskResumeAll+0x17e>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xYieldPending>
    16a6:	21 97       	sbiw	r28, 0x01	; 1
    16a8:	b9 f7       	brne	.-18     	; 0x1698 <xTaskResumeAll+0x170>
    16aa:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <xPendedTicks+0x1>
    16ae:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <xPendedTicks>
    16b2:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xYieldPending>
    16b6:	88 23       	and	r24, r24
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <xTaskResumeAll+0x19e>
    16ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <xTaskResumeAll+0x1a0>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <xTaskResumeAll+0x1a0>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <vTaskSwitchContext>:
    16d2:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    16d6:	88 23       	and	r24, r24
    16d8:	21 f0       	breq	.+8      	; 0x16e2 <vTaskSwitchContext+0x10>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xYieldPending>
    16e0:	08 95       	ret
    16e2:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <xYieldPending>
    16e6:	20 91 10 07 	lds	r18, 0x0710	; 0x800710 <uxTopReadyPriority>
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vTaskSwitchContext+0x1c>
    16ec:	21 50       	subi	r18, 0x01	; 1
    16ee:	82 2f       	mov	r24, r18
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	fc 01       	movw	r30, r24
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
    1700:	e8 0f       	add	r30, r24
    1702:	f9 1f       	adc	r31, r25
    1704:	ea 5b       	subi	r30, 0xBA	; 186
    1706:	f8 4f       	sbci	r31, 0xF8	; 248
    1708:	30 81       	ld	r19, Z
    170a:	33 23       	and	r19, r19
    170c:	79 f3       	breq	.-34     	; 0x16ec <vTaskSwitchContext+0x1a>
    170e:	ac 01       	movw	r20, r24
    1710:	44 0f       	add	r20, r20
    1712:	55 1f       	adc	r21, r21
    1714:	44 0f       	add	r20, r20
    1716:	55 1f       	adc	r21, r21
    1718:	44 0f       	add	r20, r20
    171a:	55 1f       	adc	r21, r21
    171c:	48 0f       	add	r20, r24
    171e:	59 1f       	adc	r21, r25
    1720:	df 01       	movw	r26, r30
    1722:	01 80       	ldd	r0, Z+1	; 0x01
    1724:	f2 81       	ldd	r31, Z+2	; 0x02
    1726:	e0 2d       	mov	r30, r0
    1728:	02 80       	ldd	r0, Z+2	; 0x02
    172a:	f3 81       	ldd	r31, Z+3	; 0x03
    172c:	e0 2d       	mov	r30, r0
    172e:	12 96       	adiw	r26, 0x02	; 2
    1730:	fc 93       	st	X, r31
    1732:	ee 93       	st	-X, r30
    1734:	11 97       	sbiw	r26, 0x01	; 1
    1736:	47 5b       	subi	r20, 0xB7	; 183
    1738:	58 4f       	sbci	r21, 0xF8	; 248
    173a:	e4 17       	cp	r30, r20
    173c:	f5 07       	cpc	r31, r21
    173e:	29 f4       	brne	.+10     	; 0x174a <vTaskSwitchContext+0x78>
    1740:	42 81       	ldd	r20, Z+2	; 0x02
    1742:	53 81       	ldd	r21, Z+3	; 0x03
    1744:	fd 01       	movw	r30, r26
    1746:	52 83       	std	Z+2, r21	; 0x02
    1748:	41 83       	std	Z+1, r20	; 0x01
    174a:	fc 01       	movw	r30, r24
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	8e 0f       	add	r24, r30
    175a:	9f 1f       	adc	r25, r31
    175c:	fc 01       	movw	r30, r24
    175e:	ea 5b       	subi	r30, 0xBA	; 186
    1760:	f8 4f       	sbci	r31, 0xF8	; 248
    1762:	01 80       	ldd	r0, Z+1	; 0x01
    1764:	f2 81       	ldd	r31, Z+2	; 0x02
    1766:	e0 2d       	mov	r30, r0
    1768:	86 81       	ldd	r24, Z+6	; 0x06
    176a:	97 81       	ldd	r25, Z+7	; 0x07
    176c:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <pxCurrentTCB+0x1>
    1770:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <pxCurrentTCB>
    1774:	20 93 10 07 	sts	0x0710, r18	; 0x800710 <uxTopReadyPriority>
    1778:	08 95       	ret

0000177a <vTaskPlaceOnEventList>:
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	eb 01       	movw	r28, r22
    1780:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <pxCurrentTCB>
    1784:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1788:	64 5f       	subi	r22, 0xF4	; 244
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	0e 94 8b 03 	call	0x716	; 0x716 <vListInsert>
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	ce 01       	movw	r24, r28
    1794:	0e 94 65 08 	call	0x10ca	; 0x10ca <prvAddCurrentTaskToDelayedList>
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <vTaskPlaceOnEventListRestricted>:
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	fc 01       	movw	r30, r24
    17a8:	8b 01       	movw	r16, r22
    17aa:	a1 81       	ldd	r26, Z+1	; 0x01
    17ac:	b2 81       	ldd	r27, Z+2	; 0x02
    17ae:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <pxCurrentTCB>
    17b2:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    17b6:	ec 01       	movw	r28, r24
    17b8:	bf 87       	std	Y+15, r27	; 0x0f
    17ba:	ae 87       	std	Y+14, r26	; 0x0e
    17bc:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <pxCurrentTCB>
    17c0:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    17c4:	14 96       	adiw	r26, 0x04	; 4
    17c6:	2d 91       	ld	r18, X+
    17c8:	3c 91       	ld	r19, X
    17ca:	15 97       	sbiw	r26, 0x05	; 5
    17cc:	ec 01       	movw	r28, r24
    17ce:	39 8b       	std	Y+17, r19	; 0x11
    17d0:	28 8b       	std	Y+16, r18	; 0x10
    17d2:	14 96       	adiw	r26, 0x04	; 4
    17d4:	8d 91       	ld	r24, X+
    17d6:	9c 91       	ld	r25, X
    17d8:	15 97       	sbiw	r26, 0x05	; 5
    17da:	20 91 6a 07 	lds	r18, 0x076A	; 0x80076a <pxCurrentTCB>
    17de:	30 91 6b 07 	lds	r19, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    17e2:	24 5f       	subi	r18, 0xF4	; 244
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	ec 01       	movw	r28, r24
    17e8:	3b 83       	std	Y+3, r19	; 0x03
    17ea:	2a 83       	std	Y+2, r18	; 0x02
    17ec:	20 91 6a 07 	lds	r18, 0x076A	; 0x80076a <pxCurrentTCB>
    17f0:	30 91 6b 07 	lds	r19, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    17f4:	24 5f       	subi	r18, 0xF4	; 244
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	15 96       	adiw	r26, 0x05	; 5
    17fa:	3c 93       	st	X, r19
    17fc:	2e 93       	st	-X, r18
    17fe:	14 97       	sbiw	r26, 0x04	; 4
    1800:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <pxCurrentTCB>
    1804:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1808:	55 96       	adiw	r26, 0x15	; 21
    180a:	fc 93       	st	X, r31
    180c:	ee 93       	st	-X, r30
    180e:	54 97       	sbiw	r26, 0x14	; 20
    1810:	90 81       	ld	r25, Z
    1812:	9f 5f       	subi	r25, 0xFF	; 255
    1814:	90 83       	st	Z, r25
    1816:	44 23       	and	r20, r20
    1818:	11 f0       	breq	.+4      	; 0x181e <vTaskPlaceOnEventListRestricted+0x80>
    181a:	0f ef       	ldi	r16, 0xFF	; 255
    181c:	1f ef       	ldi	r17, 0xFF	; 255
    181e:	64 2f       	mov	r22, r20
    1820:	c8 01       	movw	r24, r16
    1822:	0e 94 65 08 	call	0x10ca	; 0x10ca <prvAddCurrentTaskToDelayedList>
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	08 95       	ret

00001830 <xTaskRemoveFromEventList>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	dc 01       	movw	r26, r24
    1836:	15 96       	adiw	r26, 0x05	; 5
    1838:	ed 91       	ld	r30, X+
    183a:	fc 91       	ld	r31, X
    183c:	16 97       	sbiw	r26, 0x06	; 6
    183e:	06 80       	ldd	r0, Z+6	; 0x06
    1840:	f7 81       	ldd	r31, Z+7	; 0x07
    1842:	e0 2d       	mov	r30, r0
    1844:	a4 89       	ldd	r26, Z+20	; 0x14
    1846:	b5 89       	ldd	r27, Z+21	; 0x15
    1848:	c6 85       	ldd	r28, Z+14	; 0x0e
    184a:	d7 85       	ldd	r29, Z+15	; 0x0f
    184c:	80 89       	ldd	r24, Z+16	; 0x10
    184e:	91 89       	ldd	r25, Z+17	; 0x11
    1850:	9d 83       	std	Y+5, r25	; 0x05
    1852:	8c 83       	std	Y+4, r24	; 0x04
    1854:	c0 89       	ldd	r28, Z+16	; 0x10
    1856:	d1 89       	ldd	r29, Z+17	; 0x11
    1858:	86 85       	ldd	r24, Z+14	; 0x0e
    185a:	97 85       	ldd	r25, Z+15	; 0x0f
    185c:	9b 83       	std	Y+3, r25	; 0x03
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	11 96       	adiw	r26, 0x01	; 1
    1862:	8d 91       	ld	r24, X+
    1864:	9c 91       	ld	r25, X
    1866:	12 97       	sbiw	r26, 0x02	; 2
    1868:	9f 01       	movw	r18, r30
    186a:	24 5f       	subi	r18, 0xF4	; 244
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	82 17       	cp	r24, r18
    1870:	93 07       	cpc	r25, r19
    1872:	31 f4       	brne	.+12     	; 0x1880 <xTaskRemoveFromEventList+0x50>
    1874:	80 89       	ldd	r24, Z+16	; 0x10
    1876:	91 89       	ldd	r25, Z+17	; 0x11
    1878:	12 96       	adiw	r26, 0x02	; 2
    187a:	9c 93       	st	X, r25
    187c:	8e 93       	st	-X, r24
    187e:	11 97       	sbiw	r26, 0x01	; 1
    1880:	15 8a       	std	Z+21, r1	; 0x15
    1882:	14 8a       	std	Z+20, r1	; 0x14
    1884:	8c 91       	ld	r24, X
    1886:	81 50       	subi	r24, 0x01	; 1
    1888:	8c 93       	st	X, r24
    188a:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    188e:	81 11       	cpse	r24, r1
    1890:	60 c0       	rjmp	.+192    	; 0x1952 <xTaskRemoveFromEventList+0x122>
    1892:	a2 85       	ldd	r26, Z+10	; 0x0a
    1894:	b3 85       	ldd	r27, Z+11	; 0x0b
    1896:	c4 81       	ldd	r28, Z+4	; 0x04
    1898:	d5 81       	ldd	r29, Z+5	; 0x05
    189a:	86 81       	ldd	r24, Z+6	; 0x06
    189c:	97 81       	ldd	r25, Z+7	; 0x07
    189e:	9d 83       	std	Y+5, r25	; 0x05
    18a0:	8c 83       	std	Y+4, r24	; 0x04
    18a2:	c6 81       	ldd	r28, Z+6	; 0x06
    18a4:	d7 81       	ldd	r29, Z+7	; 0x07
    18a6:	84 81       	ldd	r24, Z+4	; 0x04
    18a8:	95 81       	ldd	r25, Z+5	; 0x05
    18aa:	9b 83       	std	Y+3, r25	; 0x03
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	11 96       	adiw	r26, 0x01	; 1
    18b0:	8d 91       	ld	r24, X+
    18b2:	9c 91       	ld	r25, X
    18b4:	12 97       	sbiw	r26, 0x02	; 2
    18b6:	9f 01       	movw	r18, r30
    18b8:	2e 5f       	subi	r18, 0xFE	; 254
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	82 17       	cp	r24, r18
    18be:	93 07       	cpc	r25, r19
    18c0:	31 f4       	brne	.+12     	; 0x18ce <xTaskRemoveFromEventList+0x9e>
    18c2:	86 81       	ldd	r24, Z+6	; 0x06
    18c4:	97 81       	ldd	r25, Z+7	; 0x07
    18c6:	12 96       	adiw	r26, 0x02	; 2
    18c8:	9c 93       	st	X, r25
    18ca:	8e 93       	st	-X, r24
    18cc:	11 97       	sbiw	r26, 0x01	; 1
    18ce:	13 86       	std	Z+11, r1	; 0x0b
    18d0:	12 86       	std	Z+10, r1	; 0x0a
    18d2:	8c 91       	ld	r24, X
    18d4:	81 50       	subi	r24, 0x01	; 1
    18d6:	8c 93       	st	X, r24
    18d8:	86 89       	ldd	r24, Z+22	; 0x16
    18da:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
    18de:	98 17       	cp	r25, r24
    18e0:	10 f4       	brcc	.+4      	; 0x18e6 <xTaskRemoveFromEventList+0xb6>
    18e2:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	dc 01       	movw	r26, r24
    18ea:	aa 0f       	add	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	aa 0f       	add	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	aa 0f       	add	r26, r26
    18f4:	bb 1f       	adc	r27, r27
    18f6:	8a 0f       	add	r24, r26
    18f8:	9b 1f       	adc	r25, r27
    18fa:	dc 01       	movw	r26, r24
    18fc:	aa 5b       	subi	r26, 0xBA	; 186
    18fe:	b8 4f       	sbci	r27, 0xF8	; 248
    1900:	11 96       	adiw	r26, 0x01	; 1
    1902:	0d 90       	ld	r0, X+
    1904:	bc 91       	ld	r27, X
    1906:	a0 2d       	mov	r26, r0
    1908:	b5 83       	std	Z+5, r27	; 0x05
    190a:	a4 83       	std	Z+4, r26	; 0x04
    190c:	14 96       	adiw	r26, 0x04	; 4
    190e:	8d 91       	ld	r24, X+
    1910:	9c 91       	ld	r25, X
    1912:	15 97       	sbiw	r26, 0x05	; 5
    1914:	97 83       	std	Z+7, r25	; 0x07
    1916:	86 83       	std	Z+6, r24	; 0x06
    1918:	14 96       	adiw	r26, 0x04	; 4
    191a:	cd 91       	ld	r28, X+
    191c:	dc 91       	ld	r29, X
    191e:	15 97       	sbiw	r26, 0x05	; 5
    1920:	3b 83       	std	Y+3, r19	; 0x03
    1922:	2a 83       	std	Y+2, r18	; 0x02
    1924:	15 96       	adiw	r26, 0x05	; 5
    1926:	3c 93       	st	X, r19
    1928:	2e 93       	st	-X, r18
    192a:	14 97       	sbiw	r26, 0x04	; 4
    192c:	a6 89       	ldd	r26, Z+22	; 0x16
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	cd 01       	movw	r24, r26
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	a8 0f       	add	r26, r24
    1940:	b9 1f       	adc	r27, r25
    1942:	aa 5b       	subi	r26, 0xBA	; 186
    1944:	b8 4f       	sbci	r27, 0xF8	; 248
    1946:	b3 87       	std	Z+11, r27	; 0x0b
    1948:	a2 87       	std	Z+10, r26	; 0x0a
    194a:	8c 91       	ld	r24, X
    194c:	8f 5f       	subi	r24, 0xFF	; 255
    194e:	8c 93       	st	X, r24
    1950:	1c c0       	rjmp	.+56     	; 0x198a <xTaskRemoveFromEventList+0x15a>
    1952:	47 e2       	ldi	r20, 0x27	; 39
    1954:	57 e0       	ldi	r21, 0x07	; 7
    1956:	da 01       	movw	r26, r20
    1958:	11 96       	adiw	r26, 0x01	; 1
    195a:	cd 91       	ld	r28, X+
    195c:	dc 91       	ld	r29, X
    195e:	12 97       	sbiw	r26, 0x02	; 2
    1960:	d7 87       	std	Z+15, r29	; 0x0f
    1962:	c6 87       	std	Z+14, r28	; 0x0e
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	91 8b       	std	Z+17, r25	; 0x11
    196a:	80 8b       	std	Z+16, r24	; 0x10
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	dc 01       	movw	r26, r24
    1972:	13 96       	adiw	r26, 0x03	; 3
    1974:	3c 93       	st	X, r19
    1976:	2e 93       	st	-X, r18
    1978:	12 97       	sbiw	r26, 0x02	; 2
    197a:	3d 83       	std	Y+5, r19	; 0x05
    197c:	2c 83       	std	Y+4, r18	; 0x04
    197e:	55 8b       	std	Z+21, r21	; 0x15
    1980:	44 8b       	std	Z+20, r20	; 0x14
    1982:	da 01       	movw	r26, r20
    1984:	8c 91       	ld	r24, X
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	8c 93       	st	X, r24
    198a:	96 89       	ldd	r25, Z+22	; 0x16
    198c:	e0 91 6a 07 	lds	r30, 0x076A	; 0x80076a <pxCurrentTCB>
    1990:	f0 91 6b 07 	lds	r31, 0x076B	; 0x80076b <pxCurrentTCB+0x1>
    1994:	86 89       	ldd	r24, Z+22	; 0x16
    1996:	89 17       	cp	r24, r25
    1998:	20 f4       	brcc	.+8      	; 0x19a2 <xTaskRemoveFromEventList+0x172>
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xYieldPending>
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <xTaskRemoveFromEventList+0x174>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <vTaskInternalSetTimeOutState>:
    19aa:	20 91 0b 07 	lds	r18, 0x070B	; 0x80070b <xNumOfOverflows>
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 83       	st	Z, r18
    19b2:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <xTickCount>
    19b6:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <xTickCount+0x1>
    19ba:	32 83       	std	Z+2, r19	; 0x02
    19bc:	21 83       	std	Z+1, r18	; 0x01
    19be:	08 95       	ret

000019c0 <xTaskCheckForTimeOut>:
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	0f 92       	push	r0
    19cc:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <xTickCount>
    19d0:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <xTickCount+0x1>
    19d4:	dc 01       	movw	r26, r24
    19d6:	11 96       	adiw	r26, 0x01	; 1
    19d8:	4d 91       	ld	r20, X+
    19da:	5c 91       	ld	r21, X
    19dc:	12 97       	sbiw	r26, 0x02	; 2
    19de:	df 01       	movw	r26, r30
    19e0:	a4 1b       	sub	r26, r20
    19e2:	b5 0b       	sbc	r27, r21
    19e4:	eb 01       	movw	r28, r22
    19e6:	28 81       	ld	r18, Y
    19e8:	39 81       	ldd	r19, Y+1	; 0x01
    19ea:	2f 3f       	cpi	r18, 0xFF	; 255
    19ec:	df ef       	ldi	r29, 0xFF	; 255
    19ee:	3d 07       	cpc	r19, r29
    19f0:	f9 f0       	breq	.+62     	; 0x1a30 <xTaskCheckForTimeOut+0x70>
    19f2:	ec 01       	movw	r28, r24
    19f4:	18 81       	ld	r17, Y
    19f6:	c0 91 0b 07 	lds	r28, 0x070B	; 0x80070b <xNumOfOverflows>
    19fa:	1c 17       	cp	r17, r28
    19fc:	41 f0       	breq	.+16     	; 0x1a0e <xTaskCheckForTimeOut+0x4e>
    19fe:	e4 17       	cp	r30, r20
    1a00:	f5 07       	cpc	r31, r21
    1a02:	28 f0       	brcs	.+10     	; 0x1a0e <xTaskCheckForTimeOut+0x4e>
    1a04:	fb 01       	movw	r30, r22
    1a06:	11 82       	std	Z+1, r1	; 0x01
    1a08:	10 82       	st	Z, r1
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	12 c0       	rjmp	.+36     	; 0x1a32 <xTaskCheckForTimeOut+0x72>
    1a0e:	a2 17       	cp	r26, r18
    1a10:	b3 07       	cpc	r27, r19
    1a12:	48 f4       	brcc	.+18     	; 0x1a26 <xTaskCheckForTimeOut+0x66>
    1a14:	fb 01       	movw	r30, r22
    1a16:	2a 1b       	sub	r18, r26
    1a18:	3b 0b       	sbc	r19, r27
    1a1a:	31 83       	std	Z+1, r19	; 0x01
    1a1c:	20 83       	st	Z, r18
    1a1e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskInternalSetTimeOutState>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <xTaskCheckForTimeOut+0x72>
    1a26:	db 01       	movw	r26, r22
    1a28:	1d 92       	st	X+, r1
    1a2a:	1c 92       	st	X, r1
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <xTaskCheckForTimeOut+0x72>
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	08 95       	ret

00001a3e <vTaskMissedYield>:
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xYieldPending>
    1a44:	08 95       	ret

00001a46 <xTaskGetSchedulerState>:
    1a46:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <xSchedulerRunning>
    1a4a:	88 23       	and	r24, r24
    1a4c:	31 f0       	breq	.+12     	; 0x1a5a <xTaskGetSchedulerState+0x14>
    1a4e:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <uxSchedulerSuspended>
    1a52:	81 11       	cpse	r24, r1
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <xTaskGetSchedulerState+0x18>
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	08 95       	ret
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	08 95       	ret
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	08 95       	ret

00001a62 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1a6c:	89 2b       	or	r24, r25
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <xTaskPriorityDisinherit+0x10>
    1a70:	51 c0       	rjmp	.+162    	; 0x1b14 <xTaskPriorityDisinherit+0xb2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1a72:	82 a1       	ldd	r24, Z+34	; 0x22
    1a74:	81 50       	subi	r24, 0x01	; 1
    1a76:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1a78:	26 89       	ldd	r18, Z+22	; 0x16
    1a7a:	91 a1       	ldd	r25, Z+33	; 0x21
    1a7c:	29 17       	cp	r18, r25
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <xTaskPriorityDisinherit+0x20>
    1a80:	4b c0       	rjmp	.+150    	; 0x1b18 <xTaskPriorityDisinherit+0xb6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1a82:	81 11       	cpse	r24, r1
    1a84:	4b c0       	rjmp	.+150    	; 0x1b1c <xTaskPriorityDisinherit+0xba>
    1a86:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1a88:	8f 01       	movw	r16, r30
    1a8a:	0e 5f       	subi	r16, 0xFE	; 254
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	c8 01       	movw	r24, r16
    1a90:	0e 94 bc 03 	call	0x778	; 0x778 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1a94:	89 a1       	ldd	r24, Y+33	; 0x21
    1a96:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a98:	24 e0       	ldi	r18, 0x04	; 4
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	28 1b       	sub	r18, r24
    1a9e:	31 09       	sbc	r19, r1
    1aa0:	3d 87       	std	Y+13, r19	; 0x0d
    1aa2:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    1aa4:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <uxTopReadyPriority>
    1aa8:	98 17       	cp	r25, r24
    1aaa:	10 f4       	brcc	.+4      	; 0x1ab0 <xTaskPriorityDisinherit+0x4e>
    1aac:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTopReadyPriority>
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	8e 0f       	add	r24, r30
    1ac2:	9f 1f       	adc	r25, r31
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ea 5b       	subi	r30, 0xBA	; 186
    1ac8:	f8 4f       	sbci	r31, 0xF8	; 248
    1aca:	01 80       	ldd	r0, Z+1	; 0x01
    1acc:	f2 81       	ldd	r31, Z+2	; 0x02
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	fd 83       	std	Y+5, r31	; 0x05
    1ad2:	ec 83       	std	Y+4, r30	; 0x04
    1ad4:	84 81       	ldd	r24, Z+4	; 0x04
    1ad6:	95 81       	ldd	r25, Z+5	; 0x05
    1ad8:	9f 83       	std	Y+7, r25	; 0x07
    1ada:	8e 83       	std	Y+6, r24	; 0x06
    1adc:	a4 81       	ldd	r26, Z+4	; 0x04
    1ade:	b5 81       	ldd	r27, Z+5	; 0x05
    1ae0:	13 96       	adiw	r26, 0x03	; 3
    1ae2:	1c 93       	st	X, r17
    1ae4:	0e 93       	st	-X, r16
    1ae6:	12 97       	sbiw	r26, 0x02	; 2
    1ae8:	15 83       	std	Z+5, r17	; 0x05
    1aea:	04 83       	std	Z+4, r16	; 0x04
    1aec:	ee 89       	ldd	r30, Y+22	; 0x16
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	cf 01       	movw	r24, r30
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	e8 0f       	add	r30, r24
    1b00:	f9 1f       	adc	r31, r25
    1b02:	ea 5b       	subi	r30, 0xBA	; 186
    1b04:	f8 4f       	sbci	r31, 0xF8	; 248
    1b06:	fb 87       	std	Y+11, r31	; 0x0b
    1b08:	ea 87       	std	Y+10, r30	; 0x0a
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <xTaskPriorityDisinherit+0xbc>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <xTaskPriorityDisinherit+0xbc>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <xTaskPriorityDisinherit+0xbc>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <prvGetNextExpireTime>:
        }
    }
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    1b28:	dc 01       	movw	r26, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1b2a:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <pxCurrentTimerList>
    1b2e:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <pxCurrentTimerList+0x1>
    1b32:	80 81       	ld	r24, Z
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	81 11       	cpse	r24, r1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9c 93       	st	X, r25

        if( *pxListWasEmpty == pdFALSE )
    1b3c:	91 11       	cpse	r25, r1
    1b3e:	06 c0       	rjmp	.+12     	; 0x1b4c <prvGetNextExpireTime+0x24>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1b40:	05 80       	ldd	r0, Z+5	; 0x05
    1b42:	f6 81       	ldd	r31, Z+6	; 0x06
    1b44:	e0 2d       	mov	r30, r0
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	08 95       	ret
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
        }

        return xNextExpireTime;
    }
    1b50:	08 95       	ret

00001b52 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    1b52:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1b54:	73 83       	std	Z+3, r23	; 0x03
    1b56:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1b58:	91 87       	std	Z+9, r25	; 0x09
    1b5a:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    1b5c:	46 17       	cp	r20, r22
    1b5e:	57 07       	cpc	r21, r23
    1b60:	90 f0       	brcs	.+36     	; 0x1b86 <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b62:	42 1b       	sub	r20, r18
    1b64:	53 0b       	sbc	r21, r19
    1b66:	84 85       	ldd	r24, Z+12	; 0x0c
    1b68:	95 85       	ldd	r25, Z+13	; 0x0d
    1b6a:	48 17       	cp	r20, r24
    1b6c:	59 07       	cpc	r21, r25
    1b6e:	e0 f4       	brcc	.+56     	; 0x1ba8 <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1b70:	bf 01       	movw	r22, r30
    1b72:	6e 5f       	subi	r22, 0xFE	; 254
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxOverflowTimerList>
    1b7a:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxOverflowTimerList+0x1>
    1b7e:	0e 94 8b 03 	call	0x716	; 0x716 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1b86:	42 17       	cp	r20, r18
    1b88:	53 07       	cpc	r21, r19
    1b8a:	18 f4       	brcc	.+6      	; 0x1b92 <prvInsertTimerInActiveList+0x40>
    1b8c:	62 17       	cp	r22, r18
    1b8e:	73 07       	cpc	r23, r19
    1b90:	68 f4       	brcc	.+26     	; 0x1bac <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1b92:	bf 01       	movw	r22, r30
    1b94:	6e 5f       	subi	r22, 0xFE	; 254
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <pxCurrentTimerList>
    1b9c:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <pxCurrentTimerList+0x1>
    1ba0:	0e 94 8b 03 	call	0x716	; 0x716 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    1bae:	08 95       	ret

00001bb0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	8b 01       	movw	r16, r22
    1bc0:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    1bc2:	08 c0       	rjmp	.+16     	; 0x1bd4 <prvReloadTimer+0x24>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    1bc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc8:	08 0f       	add	r16, r24
    1bca:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1bcc:	e8 89       	ldd	r30, Y+16	; 0x10
    1bce:	f9 89       	ldd	r31, Y+17	; 0x11
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	09 95       	icall
                                const TickType_t xTimeNow )
    {
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    1bd4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bd6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bd8:	60 0f       	add	r22, r16
    1bda:	71 1f       	adc	r23, r17
    1bdc:	98 01       	movw	r18, r16
    1bde:	a7 01       	movw	r20, r14
    1be0:	ce 01       	movw	r24, r28
    1be2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <prvInsertTimerInActiveList>
    1be6:	81 11       	cpse	r24, r1
    1be8:	ed cf       	rjmp	.-38     	; 0x1bc4 <prvReloadTimer+0x14>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	08 95       	ret

00001bf8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	8c 01       	movw	r16, r24
    1c06:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1c08:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <pxCurrentTimerList>
    1c0c:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <pxCurrentTimerList+0x1>
    1c10:	05 80       	ldd	r0, Z+5	; 0x05
    1c12:	f6 81       	ldd	r31, Z+6	; 0x06
    1c14:	e0 2d       	mov	r30, r0
    1c16:	c6 81       	ldd	r28, Z+6	; 0x06
    1c18:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	02 96       	adiw	r24, 0x02	; 2
    1c1e:	0e 94 bc 03 	call	0x778	; 0x778 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1c22:	8a 89       	ldd	r24, Y+18	; 0x12
    1c24:	82 ff       	sbrs	r24, 2
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <prvProcessExpiredTimer+0x3c>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    1c28:	a7 01       	movw	r20, r14
    1c2a:	b8 01       	movw	r22, r16
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <prvReloadTimer>
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <prvProcessExpiredTimer+0x40>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1c34:	8e 7f       	andi	r24, 0xFE	; 254
    1c36:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1c38:	e8 89       	ldd	r30, Y+16	; 0x10
    1c3a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	09 95       	icall
    }
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	08 95       	ret

00001c4e <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <prvSwitchTimerLists+0x14>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1c50:	05 80       	ldd	r0, Z+5	; 0x05
    1c52:	f6 81       	ldd	r31, Z+6	; 0x06
    1c54:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    1c56:	6f ef       	ldi	r22, 0xFF	; 255
    1c58:	7f ef       	ldi	r23, 0xFF	; 255
    1c5a:	80 81       	ld	r24, Z
    1c5c:	91 81       	ldd	r25, Z+1	; 0x01
    1c5e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <prvProcessExpiredTimer>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1c62:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <pxCurrentTimerList>
    1c66:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <pxCurrentTimerList+0x1>
    1c6a:	80 81       	ld	r24, Z
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	f0 cf       	rjmp	.-32     	; 0x1c50 <prvSwitchTimerLists+0x2>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1c70:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxOverflowTimerList>
    1c74:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxOverflowTimerList+0x1>
    1c78:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <pxCurrentTimerList+0x1>
    1c7c:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1c80:	f0 93 73 07 	sts	0x0773, r31	; 0x800773 <pxOverflowTimerList+0x1>
    1c84:	e0 93 72 07 	sts	0x0772, r30	; 0x800772 <pxOverflowTimerList>
    1c88:	08 95       	ret

00001c8a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1c94:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xTaskGetTickCount>
    1c98:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    1c9a:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <xLastTime.2422>
    1c9e:	90 91 6d 07 	lds	r25, 0x076D	; 0x80076d <xLastTime.2422+0x1>
    1ca2:	c8 17       	cp	r28, r24
    1ca4:	d9 07       	cpc	r29, r25
    1ca6:	30 f4       	brcc	.+12     	; 0x1cb4 <prvSampleTimeNow+0x2a>
        {
            prvSwitchTimerLists();
    1ca8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	f8 01       	movw	r30, r16
    1cb0:	80 83       	st	Z, r24
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <prvSampleTimeNow+0x2e>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    1cb8:	d0 93 6d 07 	sts	0x076D, r29	; 0x80076d <xLastTime.2422+0x1>
    1cbc:	c0 93 6c 07 	sts	0x076C, r28	; 0x80076c <xLastTime.2422>

        return xTimeNow;
    }
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	08 95       	ret

00001ccc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	1f 92       	push	r1
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	7c 01       	movw	r14, r24
    1ce2:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1ce4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <prvSampleTimeNow>
    1cf0:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	27 c0       	rjmp	.+78     	; 0x1d46 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1cf8:	11 11       	cpse	r17, r1
    1cfa:	0a c0       	rjmp	.+20     	; 0x1d10 <prvProcessTimerOrBlockTask+0x44>
    1cfc:	ce 14       	cp	r12, r14
    1cfe:	df 04       	cpc	r13, r15
    1d00:	38 f0       	brcs	.+14     	; 0x1d10 <prvProcessTimerOrBlockTask+0x44>
                {
                    ( void ) xTaskResumeAll();
    1d02:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1d06:	b6 01       	movw	r22, r12
    1d08:	c7 01       	movw	r24, r14
    1d0a:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <prvProcessExpiredTimer>
    1d0e:	1d c0       	rjmp	.+58     	; 0x1d4a <prvProcessTimerOrBlockTask+0x7e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1d10:	11 23       	and	r17, r17
    1d12:	41 f0       	breq	.+16     	; 0x1d24 <prvProcessTimerOrBlockTask+0x58>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1d14:	e0 91 72 07 	lds	r30, 0x0772	; 0x800772 <pxOverflowTimerList>
    1d18:	f0 91 73 07 	lds	r31, 0x0773	; 0x800773 <pxOverflowTimerList+0x1>
    1d1c:	80 81       	ld	r24, Z
    1d1e:	11 e0       	ldi	r17, 0x01	; 1
    1d20:	81 11       	cpse	r24, r1
    1d22:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1d24:	b7 01       	movw	r22, r14
    1d26:	6c 19       	sub	r22, r12
    1d28:	7d 09       	sbc	r23, r13
    1d2a:	41 2f       	mov	r20, r17
    1d2c:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xTimerQueue>
    1d30:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xTimerQueue+0x1>
    1d34:	0e 94 bc 06 	call	0xd78	; 0xd78 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1d38:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <prvProcessTimerOrBlockTask+0x7e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1d40:	0e 94 de 01 	call	0x3bc	; 0x3bc <vPortYield>
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <prvProcessTimerOrBlockTask+0x7e>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1d46:	0e 94 94 0a 	call	0x1528	; 0x1528 <xTaskResumeAll>
            }
        }
    }
    1d4a:	0f 90       	pop	r0
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	08 95       	ret

00001d5c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <prvProcessReceivedCommands+0xe>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <prvProcessReceivedCommands+0x10>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <prvProcessReceivedCommands+0x12>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1d72:	7a c0       	rjmp	.+244    	; 0x1e68 <prvProcessReceivedCommands+0x10c>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	88 23       	and	r24, r24
    1d78:	0c f4       	brge	.+2      	; 0x1d7c <prvProcessReceivedCommands+0x20>
    1d7a:	76 c0       	rjmp	.+236    	; 0x1e68 <prvProcessReceivedCommands+0x10c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1d7c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d7e:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1d80:	d8 01       	movw	r26, r16
    1d82:	1a 96       	adiw	r26, 0x0a	; 10
    1d84:	8d 91       	ld	r24, X+
    1d86:	9c 91       	ld	r25, X
    1d88:	1b 97       	sbiw	r26, 0x0b	; 11
    1d8a:	89 2b       	or	r24, r25
    1d8c:	21 f0       	breq	.+8      	; 0x1d96 <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1d8e:	c8 01       	movw	r24, r16
    1d90:	02 96       	adiw	r24, 0x02	; 2
    1d92:	0e 94 bc 03 	call	0x778	; 0x778 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1d96:	ce 01       	movw	r24, r28
    1d98:	06 96       	adiw	r24, 0x06	; 6
    1d9a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <prvSampleTimeNow>
    1d9e:	7c 01       	movw	r14, r24

                switch( xMessage.xMessageID )
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	8e 2f       	mov	r24, r30
    1da4:	ee 0f       	add	r30, r30
    1da6:	99 0b       	sbc	r25, r25
    1da8:	aa 0b       	sbc	r26, r26
    1daa:	bb 0b       	sbc	r27, r27
    1dac:	fc 01       	movw	r30, r24
    1dae:	31 97       	sbiw	r30, 0x01	; 1
    1db0:	e9 30       	cpi	r30, 0x09	; 9
    1db2:	f1 05       	cpc	r31, r1
    1db4:	08 f0       	brcs	.+2      	; 0x1db8 <prvProcessReceivedCommands+0x5c>
    1db6:	58 c0       	rjmp	.+176    	; 0x1e68 <prvProcessReceivedCommands+0x10c>
    1db8:	ec 5c       	subi	r30, 0xCC	; 204
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	82 89       	ldd	r24, Z+18	; 0x12
    1dc4:	81 60       	ori	r24, 0x01	; 1
    1dc6:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1dc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dca:	3b 81       	ldd	r19, Y+3	; 0x03
    1dcc:	64 85       	ldd	r22, Z+12	; 0x0c
    1dce:	75 85       	ldd	r23, Z+13	; 0x0d
    1dd0:	62 0f       	add	r22, r18
    1dd2:	73 1f       	adc	r23, r19
    1dd4:	a7 01       	movw	r20, r14
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <prvInsertTimerInActiveList>
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <prvProcessReceivedCommands+0x86>
    1de0:	43 c0       	rjmp	.+134    	; 0x1e68 <prvProcessReceivedCommands+0x10c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1de2:	d8 01       	movw	r26, r16
    1de4:	52 96       	adiw	r26, 0x12	; 18
    1de6:	8c 91       	ld	r24, X
    1de8:	52 97       	sbiw	r26, 0x12	; 18
    1dea:	82 ff       	sbrs	r24, 2
    1dec:	0d c0       	rjmp	.+26     	; 0x1e08 <prvProcessReceivedCommands+0xac>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    1dee:	6a 81       	ldd	r22, Y+2	; 0x02
    1df0:	7b 81       	ldd	r23, Y+3	; 0x03
    1df2:	1c 96       	adiw	r26, 0x0c	; 12
    1df4:	8d 91       	ld	r24, X+
    1df6:	9c 91       	ld	r25, X
    1df8:	1d 97       	sbiw	r26, 0x0d	; 13
    1dfa:	68 0f       	add	r22, r24
    1dfc:	79 1f       	adc	r23, r25
    1dfe:	a7 01       	movw	r20, r14
    1e00:	c8 01       	movw	r24, r16
    1e02:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <prvReloadTimer>
    1e06:	03 c0       	rjmp	.+6      	; 0x1e0e <prvProcessReceivedCommands+0xb2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1e08:	8e 7f       	andi	r24, 0xFE	; 254
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1e0e:	d8 01       	movw	r26, r16
    1e10:	50 96       	adiw	r26, 0x10	; 16
    1e12:	ed 91       	ld	r30, X+
    1e14:	fc 91       	ld	r31, X
    1e16:	51 97       	sbiw	r26, 0x11	; 17
    1e18:	c8 01       	movw	r24, r16
    1e1a:	09 95       	icall
    1e1c:	25 c0       	rjmp	.+74     	; 0x1e68 <prvProcessReceivedCommands+0x10c>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1e1e:	f8 01       	movw	r30, r16
    1e20:	82 89       	ldd	r24, Z+18	; 0x12
    1e22:	8e 7f       	andi	r24, 0xFE	; 254
    1e24:	82 8b       	std	Z+18, r24	; 0x12
                        break;
    1e26:	20 c0       	rjmp	.+64     	; 0x1e68 <prvProcessReceivedCommands+0x10c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1e28:	d8 01       	movw	r26, r16
    1e2a:	52 96       	adiw	r26, 0x12	; 18
    1e2c:	8c 91       	ld	r24, X
    1e2e:	52 97       	sbiw	r26, 0x12	; 18
    1e30:	81 60       	ori	r24, 0x01	; 1
    1e32:	52 96       	adiw	r26, 0x12	; 18
    1e34:	8c 93       	st	X, r24
    1e36:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1e38:	6a 81       	ldd	r22, Y+2	; 0x02
    1e3a:	7b 81       	ldd	r23, Y+3	; 0x03
    1e3c:	1d 96       	adiw	r26, 0x0d	; 13
    1e3e:	7c 93       	st	X, r23
    1e40:	6e 93       	st	-X, r22
    1e42:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1e44:	6e 0d       	add	r22, r14
    1e46:	7f 1d       	adc	r23, r15
    1e48:	97 01       	movw	r18, r14
    1e4a:	a7 01       	movw	r20, r14
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <prvInsertTimerInActiveList>
                        break;
    1e52:	0a c0       	rjmp	.+20     	; 0x1e68 <prvProcessReceivedCommands+0x10c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    1e54:	f8 01       	movw	r30, r16
    1e56:	82 89       	ldd	r24, Z+18	; 0x12
    1e58:	81 fd       	sbrc	r24, 1
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <prvProcessReceivedCommands+0x108>
                                {
                                    vPortFree( pxTimer );
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	0e 94 46 03 	call	0x68c	; 0x68c <vPortFree>
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <prvProcessReceivedCommands+0x10c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1e64:	8e 7f       	andi	r24, 0xFE	; 254
    1e66:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	be 01       	movw	r22, r28
    1e6e:	6f 5f       	subi	r22, 0xFF	; 255
    1e70:	7f 4f       	sbci	r23, 0xFF	; 255
    1e72:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xTimerQueue>
    1e76:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xTimerQueue+0x1>
    1e7a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <xQueueReceive>
    1e7e:	81 11       	cpse	r24, r1
    1e80:	79 cf       	rjmp	.-270    	; 0x1d74 <prvProcessReceivedCommands+0x18>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    1e82:	26 96       	adiw	r28, 0x06	; 6
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	08 95       	ret

00001e9c <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	1f 92       	push	r1
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <prvGetNextExpireTime>

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    1eae:	69 81       	ldd	r22, Y+1	; 0x01
    1eb0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
    1eb4:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <prvProcessReceivedCommands>
    1eb8:	f6 cf       	rjmp	.-20     	; 0x1ea6 <prvTimerTask+0xa>

00001eba <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    1ec0:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xTimerQueue>
    1ec4:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xTimerQueue+0x1>
    1ec8:	89 2b       	or	r24, r25
    1eca:	e9 f4       	brne	.+58     	; 0x1f06 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    1ecc:	8f e7       	ldi	r24, 0x7F	; 127
    1ece:	97 e0       	ldi	r25, 0x07	; 7
    1ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    1ed4:	86 e7       	ldi	r24, 0x76	; 118
    1ed6:	97 e0       	ldi	r25, 0x07	; 7
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    1edc:	8f e7       	ldi	r24, 0x7F	; 127
    1ede:	97 e0       	ldi	r25, 0x07	; 7
    1ee0:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <pxCurrentTimerList+0x1>
    1ee4:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    1ee8:	86 e7       	ldi	r24, 0x76	; 118
    1eea:	97 e0       	ldi	r25, 0x07	; 7
    1eec:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <pxOverflowTimerList+0x1>
    1ef0:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	65 e0       	ldi	r22, 0x05	; 5
    1ef8:	8a e0       	ldi	r24, 0x0A	; 10
    1efa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <xQueueGenericCreate>
    1efe:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <xTimerQueue+0x1>
    1f02:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	08 95       	ret

00001f0c <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
    1f0c:	7f 92       	push	r7
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	4c 01       	movw	r8, r24
    1f28:	5b 01       	movw	r10, r22
    1f2a:	74 2e       	mov	r7, r20
    1f2c:	69 01       	movw	r12, r18
    1f2e:	e7 01       	movw	r28, r14
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    1f30:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    1f34:	99 82       	std	Y+1, r9	; 0x01
    1f36:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1f38:	bd 86       	std	Y+13, r11	; 0x0d
    1f3a:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    1f3c:	df 86       	std	Y+15, r13	; 0x0f
    1f3e:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1f40:	19 8b       	std	Y+17, r17	; 0x11
    1f42:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1f44:	c7 01       	movw	r24, r14
    1f46:	02 96       	adiw	r24, 0x02	; 2
    1f48:	0e 94 87 03 	call	0x70e	; 0x70e <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
    1f4c:	77 20       	and	r7, r7
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <prvInitialiseNewTimer+0x4a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    1f50:	8a 89       	ldd	r24, Y+18	; 0x12
    1f52:	84 60       	ori	r24, 0x04	; 4
    1f54:	8a 8b       	std	Y+18, r24	; 0x12
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	bf 90       	pop	r11
    1f68:	af 90       	pop	r10
    1f6a:	9f 90       	pop	r9
    1f6c:	8f 90       	pop	r8
    1f6e:	7f 90       	pop	r7
    1f70:	08 95       	ret

00001f72 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1f78:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    1f7c:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xTimerQueue>
    1f80:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xTimerQueue+0x1>
    1f84:	89 2b       	or	r24, r25
    1f86:	91 f0       	breq	.+36     	; 0x1fac <xTimerCreateTimerTask+0x3a>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    1f88:	0f 2e       	mov	r0, r31
    1f8a:	fe e6       	ldi	r31, 0x6E	; 110
    1f8c:	ef 2e       	mov	r14, r31
    1f8e:	f7 e0       	ldi	r31, 0x07	; 7
    1f90:	ff 2e       	mov	r15, r31
    1f92:	f0 2d       	mov	r31, r0
    1f94:	03 e0       	ldi	r16, 0x03	; 3
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	45 e5       	ldi	r20, 0x55	; 85
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	68 e0       	ldi	r22, 0x08	; 8
    1fa0:	71 e0       	ldi	r23, 0x01	; 1
    1fa2:	8e e4       	ldi	r24, 0x4E	; 78
    1fa4:	9f e0       	ldi	r25, 0x0F	; 15
    1fa6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <xTaskCreate>
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    1fac:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	08 95       	ret

00001fb6 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    1fb6:	7f 92       	push	r7
    1fb8:	8f 92       	push	r8
    1fba:	9f 92       	push	r9
    1fbc:	af 92       	push	r10
    1fbe:	bf 92       	push	r11
    1fc0:	cf 92       	push	r12
    1fc2:	df 92       	push	r13
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	6c 01       	movw	r12, r24
    1fd2:	5b 01       	movw	r10, r22
    1fd4:	74 2e       	mov	r7, r20
    1fd6:	49 01       	movw	r8, r18
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    1fd8:	83 e1       	ldi	r24, 0x13	; 19
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 b1 02 	call	0x562	; 0x562 <pvPortMalloc>
    1fe0:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	41 f0       	breq	.+16     	; 0x1ff6 <xTimerCreate+0x40>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    1fe6:	1a 8a       	std	Y+18, r1	; 0x12
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    1fe8:	7c 01       	movw	r14, r24
    1fea:	94 01       	movw	r18, r8
    1fec:	47 2d       	mov	r20, r7
    1fee:	b5 01       	movw	r22, r10
    1ff0:	c6 01       	movw	r24, r12
    1ff2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <prvInitialiseNewTimer>
            }

            return pxNewTimer;
        }
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0f 91       	pop	r16
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	bf 90       	pop	r11
    200a:	af 90       	pop	r10
    200c:	9f 90       	pop	r9
    200e:	8f 90       	pop	r8
    2010:	7f 90       	pop	r7
    2012:	08 95       	ret

00002014 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	00 d0       	rcall	.+0      	; 0x201e <xTimerGenericCommand+0xa>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <xTimerGenericCommand+0xc>
    2020:	1f 92       	push	r1
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2026:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <xTimerQueue>
    202a:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <xTimerQueue+0x1>
    202e:	30 97       	sbiw	r30, 0x00	; 0
    2030:	71 f1       	breq	.+92     	; 0x208e <xTimerGenericCommand+0x7a>
    2032:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2034:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2036:	5b 83       	std	Y+3, r21	; 0x03
    2038:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    203a:	9d 83       	std	Y+5, r25	; 0x05
    203c:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    203e:	66 30       	cpi	r22, 0x06	; 6
    2040:	ec f4       	brge	.+58     	; 0x207c <xTimerGenericCommand+0x68>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2042:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <xTaskGetSchedulerState>
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	61 f4       	brne	.+24     	; 0x2062 <xTimerGenericCommand+0x4e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	a8 01       	movw	r20, r16
    204e:	be 01       	movw	r22, r28
    2050:	6f 5f       	subi	r22, 0xFF	; 255
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xTimerQueue>
    2058:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xTimerQueue+0x1>
    205c:	0e 94 5f 05 	call	0xabe	; 0xabe <xQueueGenericSend>
    2060:	17 c0       	rjmp	.+46     	; 0x2090 <xTimerGenericCommand+0x7c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	be 01       	movw	r22, r28
    206a:	6f 5f       	subi	r22, 0xFF	; 255
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xTimerQueue>
    2072:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <xTimerQueue+0x1>
    2076:	0e 94 5f 05 	call	0xabe	; 0xabe <xQueueGenericSend>
    207a:	0a c0       	rjmp	.+20     	; 0x2090 <xTimerGenericCommand+0x7c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	ad 01       	movw	r20, r26
    2080:	be 01       	movw	r22, r28
    2082:	6f 5f       	subi	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	cf 01       	movw	r24, r30
    2088:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <xQueueGenericSendFromISR>
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <xTimerGenericCommand+0x7c>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    208e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	08 95       	ret

000020a4 <timer_handler>:
	UATR_SEND(tmp[1]);
	UATR_SEND(tmp[0]);
	
	
	
}
    20a4:	8c e2       	ldi	r24, 0x2C	; 44
    20a6:	0e 94 ce 00 	call	0x19c	; 0x19c <toggle>
    20aa:	08 95       	ret

000020ac <task1>:
    20ac:	0f 2e       	mov	r0, r31
    20ae:	f4 e6       	ldi	r31, 0x64	; 100
    20b0:	ef 2e       	mov	r14, r31
    20b2:	f1 2c       	mov	r15, r1
    20b4:	f0 2d       	mov	r31, r0
    20b6:	0e 94 2d 01 	call	0x25a	; 0x25a <UART_recieve>
    20ba:	c8 2f       	mov	r28, r24
    20bc:	83 37       	cpi	r24, 0x73	; 115
    20be:	69 f4       	brne	.+26     	; 0x20da <task1+0x2e>
    20c0:	08 ee       	ldi	r16, 0xE8	; 232
    20c2:	13 e0       	ldi	r17, 0x03	; 3
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	63 e0       	ldi	r22, 0x03	; 3
    20ce:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <T1>
    20d2:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <T1+0x1>
    20d6:	0e 94 0a 10 	call	0x2014	; 0x2014 <xTimerGenericCommand>
    20da:	c9 36       	cpi	r28, 0x69	; 105
    20dc:	71 f4       	brne	.+28     	; 0x20fa <task1+0x4e>
    20de:	f6 94       	lsr	r15
    20e0:	e7 94       	ror	r14
    20e2:	08 ee       	ldi	r16, 0xE8	; 232
    20e4:	13 e0       	ldi	r17, 0x03	; 3
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	a7 01       	movw	r20, r14
    20ec:	64 e0       	ldi	r22, 0x04	; 4
    20ee:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <T1>
    20f2:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <T1+0x1>
    20f6:	0e 94 0a 10 	call	0x2014	; 0x2014 <xTimerGenericCommand>
    20fa:	c4 36       	cpi	r28, 0x64	; 100
    20fc:	71 f4       	brne	.+28     	; 0x211a <task1+0x6e>
    20fe:	ee 0c       	add	r14, r14
    2100:	ff 1c       	adc	r15, r15
    2102:	08 ee       	ldi	r16, 0xE8	; 232
    2104:	13 e0       	ldi	r17, 0x03	; 3
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	a7 01       	movw	r20, r14
    210c:	64 e0       	ldi	r22, 0x04	; 4
    210e:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <T1>
    2112:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <T1+0x1>
    2116:	0e 94 0a 10 	call	0x2014	; 0x2014 <xTimerGenericCommand>
    211a:	c2 37       	cpi	r28, 0x72	; 114
    211c:	61 f6       	brne	.-104    	; 0x20b6 <task1+0xa>
    211e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xTaskGetTickCount>
    2122:	08 ee       	ldi	r16, 0xE8	; 232
    2124:	13 e0       	ldi	r17, 0x03	; 3
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	ac 01       	movw	r20, r24
    212c:	62 e0       	ldi	r22, 0x02	; 2
    212e:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <T1>
    2132:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <T1+0x1>
    2136:	0e 94 0a 10 	call	0x2014	; 0x2014 <xTimerGenericCommand>
    213a:	bd cf       	rjmp	.-134    	; 0x20b6 <task1+0xa>

0000213c <init>:

 
 void init()
  {
	 out(D4,0);
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	8c e2       	ldi	r24, 0x2C	; 44
    2140:	0e 94 5c 00 	call	0xb8	; 0xb8 <out>
	 UART_init();
    2144:	0e 94 1d 01 	call	0x23a	; 0x23a <UART_init>
    2148:	08 95       	ret

0000214a <main>:
	
*/


int main(void)
{
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	00 d0       	rcall	.+0      	; 0x2158 <main+0xe>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    init();
    215c:	0e 94 9e 10 	call	0x213c	; 0x213c <init>
	
	TaskHandle_t task1_h;//,task2_h;
	

    T1 = xTimerCreate(  "MyTimer",100, pdTRUE,( void * ) 0, timer_handler);
    2160:	02 e5       	ldi	r16, 0x52	; 82
    2162:	10 e1       	ldi	r17, 0x10	; 16
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	64 e6       	ldi	r22, 0x64	; 100
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <xTimerCreate>
    2176:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <T1+0x1>
    217a:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <T1>
	 xTimerStart( T1, 0 );
    217e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <xTaskGetTickCount>
    2182:	00 e0       	ldi	r16, 0x00	; 0
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	ac 01       	movw	r20, r24
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <T1>
    2192:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <T1+0x1>
    2196:	0e 94 0a 10 	call	0x2014	; 0x2014 <xTimerGenericCommand>
	xTaskCreate(task1,"process",250,NULL,1,&task1_h);
    219a:	ce 01       	movw	r24, r28
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	7c 01       	movw	r14, r24
    21a0:	01 e0       	ldi	r16, 0x01	; 1
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a ef       	ldi	r20, 0xFA	; 250
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	68 e1       	ldi	r22, 0x18	; 24
    21ac:	71 e0       	ldi	r23, 0x01	; 1
    21ae:	86 e5       	ldi	r24, 0x56	; 86
    21b0:	90 e1       	ldi	r25, 0x10	; 16
    21b2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <xTaskCreate>
//	xTaskCreate(task2,"handler",250,NULL,1,&task2_h);
	
	
	vTaskStartScheduler();
    21b6:	0e 94 3a 09 	call	0x1274	; 0x1274 <vTaskStartScheduler>
	
	
	
   
}
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	08 95       	ret

000021d0 <__udivmodhi4>:
    21d0:	aa 1b       	sub	r26, r26
    21d2:	bb 1b       	sub	r27, r27
    21d4:	51 e1       	ldi	r21, 0x11	; 17
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <__udivmodhi4_ep>

000021d8 <__udivmodhi4_loop>:
    21d8:	aa 1f       	adc	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	a6 17       	cp	r26, r22
    21de:	b7 07       	cpc	r27, r23
    21e0:	10 f0       	brcs	.+4      	; 0x21e6 <__udivmodhi4_ep>
    21e2:	a6 1b       	sub	r26, r22
    21e4:	b7 0b       	sbc	r27, r23

000021e6 <__udivmodhi4_ep>:
    21e6:	88 1f       	adc	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	5a 95       	dec	r21
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__udivmodhi4_loop>
    21ee:	80 95       	com	r24
    21f0:	90 95       	com	r25
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	08 95       	ret

000021f8 <__tablejump2__>:
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	05 90       	lpm	r0, Z+
    21fe:	f4 91       	lpm	r31, Z
    2200:	e0 2d       	mov	r30, r0
    2202:	09 94       	ijmp

00002204 <memcpy>:
    2204:	fb 01       	movw	r30, r22
    2206:	dc 01       	movw	r26, r24
    2208:	02 c0       	rjmp	.+4      	; 0x220e <memcpy+0xa>
    220a:	01 90       	ld	r0, Z+
    220c:	0d 92       	st	X+, r0
    220e:	41 50       	subi	r20, 0x01	; 1
    2210:	50 40       	sbci	r21, 0x00	; 0
    2212:	d8 f7       	brcc	.-10     	; 0x220a <memcpy+0x6>
    2214:	08 95       	ret

00002216 <_exit>:
    2216:	f8 94       	cli

00002218 <__stop_program>:
    2218:	ff cf       	rjmp	.-2      	; 0x2218 <__stop_program>
